#!/usr/bin/env node

import { readFile } from "fs";
import { cwd } from "process";
import { fileURLToPath } from "url";
import { dirname, join } from "path";
import simpleGit from "simple-git";
import axios from "axios";

// initiate git object from simple git, github user name, and axios default payload
let git;
let __githubUserName;
let axiosPayload = {
  clientName: "",
  isAssessment: 0,
  totalSpecsDefined: 0,
  specsExecuted: 0,
  failureCount: "",
  failedSpecs: "",
};

// pathing chain to get path to repo on machine
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const __currentDir = join(__dirname, "..");
const __testResultsPath = join(cwd(), "src", "__tests__", "results.json");

// For the purpose of submitting through github, as the git username will passed as an arg instead of getting from the git object
const __args = process.argv.splice(2);
const __gitHubUserNameFromArgs = __args[0];

// Init git object
git = simpleGit(__currentDir);
const config = await git.listConfig();

// Read file created by 'compile-test' node script
const readTestData = () => {
  readFile(__testResultsPath, "utf-8", (error, data) => {
    if (error) {
      throw error;
    }

    let parsed = JSON.parse(data);
    let clientName = setClientName(parsed);

    if (__gitHubUserNameFromArgs) {
      switch (clientName) {
        case "React Forms":
          axiosPayload.testId = "react01";
          break;
        case "React Forms Makeup":
          axiosPayload.testId = "react03";
          break;
        case "React Mapping":
          axiosPayload.testId = "react02";
          break;
        case "React Mapping Makeup":
          axiosPayload.testId = "react04";
          break;
        case "React Practice":
          axiosPayload.testId = "react09";
          break;
      }
    } else {
      switch (clientName) {
        case "React Forms":
          axiosPayload.testId = "react05";
          break;
        case "React Forms Makeup":
          axiosPayload.testId = "react06";
          break;
        case "React Mapping":
          axiosPayload.testId = "react07";
          break;
        case "React Mapping Makeup":
          axiosPayload.testId = "react08";
          break;
        case "React Practice":
          axiosPayload.testId = "react10";
          break;
      }
    }

    const listOfFailedSpecs = setFailedSpecs(
      parsed.testResults[0].assertionResults
    );

    axiosPayload.clientName = clientName;
    axiosPayload.isAssessment = 1;
    axiosPayload.totalSpecsDefined = parsed.numTotalTests;
    axiosPayload.specsExecuted =
      parsed.testResults[0].assertionResults.length > 1
        ? parsed.testResults[0].assertionResults.length
        : 0;
    axiosPayload.failureCount = listOfFailedSpecs.length;
    axiosPayload.failedSpecs = listOfFailedSpecs;
    if (__gitHubUserNameFromArgs || __githubUserName) {
      postCall(axiosPayload);
    } else {
      console.log("Error processing request, No GH Username found.");
    }
  });
};

// Axios call to post data to server
const postCall = (data) => {
  let url;

  if (!__gitHubUserNameFromArgs) {
    url = `http://pw.sabio.la/api/admin/test/react/${__githubUserName}/results`;
  } else {
    url = `http://pw.sabio.la/api/admin/test/react/${__gitHubUserNameFromArgs}/results`;
  }

  const payload = { Results: data };
  const config = {
    method: "POST",
    url: url,
    data: payload,
  };

  axios(config)
    .then((result) => {
      console.log(`statusCode: ${result.status}`);
      console.log(`Test submitted successfully.`);
    })
    .catch((error) => {
      console.log(`ERROR: ${error}`);
      console.log(
        `Ensure your Github username is set properly and please try again.`
      );
    });
};

// sets the testId for db insert
const setClientName = (data) => {
  const jsonData = JSON.stringify(data);
  if (
    jsonData.includes("React Forms #1") ||
    jsonData.includes("React-Form-1.test.js")
  ) {
    return "React Forms";
  } else if (
    jsonData.includes("React Forms Make Up") ||
    jsonData.includes("React-Form-Make-Up.test.js")
  ) {
    return "React Forms Makeup";
  } else if (
    jsonData.includes("React Mapping Part B") ||
    jsonData.includes("React-Mapping-Part-B.test.js")
  ) {
    return "React Mapping";
  } else if (
    jsonData.includes("React Mapping Part B - Makeup") ||
    jsonData.includes("React-Mapping-Makeup.test.js")
  ) {
    return "React Mapping Makeup";
  }
};

// counts number of failed tests
const setFailedSpecs = (data) => {
  let failedMessage = data
    .map((results, index) => {
      let obj = {
        id: index + 1,
        specName: results.title,
        status: results.status,
      };
      return obj;
    })
    .filter((test) => test.status == "failed");

  return failedMessage;
};

// gets github username. to be utilized if submitting locally. will use global over local username if it exists. if neither, return empty string (ideally in the event of a gh submission)
const getGitHubUserName = async () => {
  let userName;
  let localUserName;
  let globalUserName;
  let localConfig = await git.listConfig("local");
  let gloablConfig = await git.listConfig("global");

  localUserName = localConfig.all["user.name"];
  globalUserName = gloablConfig.all["user.name"];

  // theres an easier way to do this im sure
  if (!globalUserName && !localUserName) {
    userName = "";
  } else if (globalUserName && !localUserName) {
    userName = globalUserName;
  } else if (!globalUserName && localUserName) {
    userName = localUserName;
  }

  return userName;
};

__githubUserName = getGitHubUserName();

readTestData();
