{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar Source = require(\"./Source\");\nvar LineToLineMappedSource = /*#__PURE__*/function (_Source) {\n  _inherits(LineToLineMappedSource, _Source);\n  var _super = _createSuper(LineToLineMappedSource);\n  function LineToLineMappedSource(value, name, originalSource) {\n    var _this;\n    _classCallCheck(this, LineToLineMappedSource);\n    _this = _super.call(this);\n    _this._value = value;\n    _this._name = name;\n    _this._originalSource = originalSource;\n    return _this;\n  }\n  _createClass(LineToLineMappedSource, [{\n    key: \"source\",\n    value: function source() {\n      return this._value;\n    }\n  }, {\n    key: \"node\",\n    value: function node(options) {\n      var value = this._value;\n      var name = this._name;\n      var lines = value.split(\"\\n\");\n      var node = new SourceNode(null, null, null, lines.map(function (line, idx) {\n        return new SourceNode(idx + 1, 0, name, line + (idx != lines.length - 1 ? \"\\n\" : \"\"));\n      }));\n      node.setSourceContent(name, this._originalSource);\n      return node;\n    }\n  }, {\n    key: \"listMap\",\n    value: function listMap(options) {\n      return new SourceListMap(this._value, this._name, this._originalSource);\n    }\n  }, {\n    key: \"updateHash\",\n    value: function updateHash(hash) {\n      hash.update(this._value);\n      hash.update(this._originalSource);\n    }\n  }]);\n  return LineToLineMappedSource;\n}(Source);\nrequire(\"./SourceAndMapMixin\")(LineToLineMappedSource.prototype);\nmodule.exports = LineToLineMappedSource;","map":{"version":3,"names":["SourceNode","require","SourceMapConsumer","SourceListMap","Source","LineToLineMappedSource","value","name","originalSource","_value","_name","_originalSource","options","lines","split","node","map","line","idx","length","setSourceContent","hash","update","prototype","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack-sources/lib/LineToLineMappedSource.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar SourceNode = require(\"source-map\").SourceNode;\nvar SourceMapConsumer = require(\"source-map\").SourceMapConsumer;\nvar SourceListMap = require(\"source-list-map\").SourceListMap;\nvar Source = require(\"./Source\");\n\nclass LineToLineMappedSource extends Source {\n\tconstructor(value, name, originalSource) {\n\t\tsuper();\n\t\tthis._value = value;\n\t\tthis._name = name;\n\t\tthis._originalSource = originalSource;\n\t}\n\n\tsource() {\n\t\treturn this._value;\n\t}\n\n\tnode(options) {\n\t\tvar value = this._value;\n\t\tvar name = this._name;\n\t\tvar lines = value.split(\"\\n\");\n\t\tvar node = new SourceNode(null, null, null,\n\t\t\tlines.map(function(line, idx) {\n\t\t\t\treturn new SourceNode(idx + 1, 0, name, (line + (idx != lines.length - 1 ? \"\\n\" : \"\")));\n\t\t\t})\n\t\t);\n\t\tnode.setSourceContent(name, this._originalSource);\n\t\treturn node;\n\t}\n\n\tlistMap(options) {\n\t\treturn new SourceListMap(this._value, this._name, this._originalSource)\n\t}\n\n\tupdateHash(hash) {\n\t\thash.update(this._value);\n\t\thash.update(this._originalSource);\n\t}\n}\n\nrequire(\"./SourceAndMapMixin\")(LineToLineMappedSource.prototype);\n\nmodule.exports = LineToLineMappedSource;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC,CAACD,UAAU;AACjD,IAAIE,iBAAiB,GAAGD,OAAO,CAAC,YAAY,CAAC,CAACC,iBAAiB;AAC/D,IAAIC,aAAa,GAAGF,OAAO,CAAC,iBAAiB,CAAC,CAACE,aAAa;AAC5D,IAAIC,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAAC,IAE3BI,sBAAsB;EAAA;EAAA;EAC3B,gCAAYC,KAAK,EAAEC,IAAI,EAAEC,cAAc,EAAE;IAAA;IAAA;IACxC;IACA,MAAKC,MAAM,GAAGH,KAAK;IACnB,MAAKI,KAAK,GAAGH,IAAI;IACjB,MAAKI,eAAe,GAAGH,cAAc;IAAC;EACvC;EAAC;IAAA;IAAA,OAED,kBAAS;MACR,OAAO,IAAI,CAACC,MAAM;IACnB;EAAC;IAAA;IAAA,OAED,cAAKG,OAAO,EAAE;MACb,IAAIN,KAAK,GAAG,IAAI,CAACG,MAAM;MACvB,IAAIF,IAAI,GAAG,IAAI,CAACG,KAAK;MACrB,IAAIG,KAAK,GAAGP,KAAK,CAACQ,KAAK,CAAC,IAAI,CAAC;MAC7B,IAAIC,IAAI,GAAG,IAAIf,UAAU,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EACzCa,KAAK,CAACG,GAAG,CAAC,UAASC,IAAI,EAAEC,GAAG,EAAE;QAC7B,OAAO,IAAIlB,UAAU,CAACkB,GAAG,GAAG,CAAC,EAAE,CAAC,EAAEX,IAAI,EAAGU,IAAI,IAAIC,GAAG,IAAIL,KAAK,CAACM,MAAM,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,CAAE;MACxF,CAAC,CAAC,CACF;MACDJ,IAAI,CAACK,gBAAgB,CAACb,IAAI,EAAE,IAAI,CAACI,eAAe,CAAC;MACjD,OAAOI,IAAI;IACZ;EAAC;IAAA;IAAA,OAED,iBAAQH,OAAO,EAAE;MAChB,OAAO,IAAIT,aAAa,CAAC,IAAI,CAACM,MAAM,EAAE,IAAI,CAACC,KAAK,EAAE,IAAI,CAACC,eAAe,CAAC;IACxE;EAAC;IAAA;IAAA,OAED,oBAAWU,IAAI,EAAE;MAChBA,IAAI,CAACC,MAAM,CAAC,IAAI,CAACb,MAAM,CAAC;MACxBY,IAAI,CAACC,MAAM,CAAC,IAAI,CAACX,eAAe,CAAC;IAClC;EAAC;EAAA;AAAA,EAhCmCP,MAAM;AAmC3CH,OAAO,CAAC,qBAAqB,CAAC,CAACI,sBAAsB,CAACkB,SAAS,CAAC;AAEhEC,MAAM,CAACC,OAAO,GAAGpB,sBAAsB"},"metadata":{},"sourceType":"script"}