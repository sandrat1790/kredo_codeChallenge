{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nvar createDefaultHandler = function createDefaultHandler(profile, logger) {\n  var lastState;\n  var lastStateTime;\n  var defaultHandler = function defaultHandler(percentage, msg) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    logger.status.apply(logger, [\"\".concat(Math.floor(percentage * 100), \"%\"), msg].concat(args));\n    if (profile) {\n      var state = msg;\n      state = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n      if (percentage === 0) {\n        lastState = null;\n        lastStateTime = Date.now();\n      } else if (state !== lastState || percentage === 1) {\n        var now = Date.now();\n        if (lastState) {\n          var diff = now - lastStateTime;\n          var stateMsg = \"\".concat(diff, \"ms \").concat(lastState);\n          if (diff > 1000) {\n            logger.warn(stateMsg);\n          } else if (diff > 10) {\n            logger.info(stateMsg);\n          } else if (diff > 0) {\n            logger.log(stateMsg);\n          } else {\n            logger.debug(stateMsg);\n          }\n        }\n        lastState = state;\n        lastStateTime = now;\n      }\n    }\n    if (percentage === 1) logger.status();\n  };\n  return defaultHandler;\n};\nvar ProgressPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {ProgressPluginArgument} options options\n   */\n  function ProgressPlugin(options) {\n    _classCallCheck(this, ProgressPlugin);\n    if (typeof options === \"function\") {\n      options = {\n        handler: options\n      };\n    }\n    options = options || {};\n    validateOptions(schema, options, \"Progress Plugin\");\n    options = Object.assign({}, ProgressPlugin.defaultOptions, options);\n    this.profile = options.profile;\n    this.handler = options.handler;\n    this.modulesCount = options.modulesCount;\n    this.showEntries = options.entries;\n    this.showModules = options.modules;\n    this.showActiveModules = options.activeModules;\n  }\n  _createClass(ProgressPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var modulesCount = this.modulesCount;\n      var handler = this.handler || createDefaultHandler(this.profile, compiler.getInfrastructureLogger(\"webpack.Progress\"));\n      var showEntries = this.showEntries;\n      var showModules = this.showModules;\n      var showActiveModules = this.showActiveModules;\n      if (compiler.compilers) {\n        var states = new Array(compiler.compilers.length);\n        compiler.compilers.forEach(function (compiler, idx) {\n          new ProgressPlugin(function (p, msg) {\n            for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n              args[_key2 - 2] = arguments[_key2];\n            }\n            states[idx] = [p, msg].concat(args);\n            handler.apply(void 0, [states.map(function (state) {\n              return state && state[0] || 0;\n            }).reduce(function (a, b) {\n              return a + b;\n            }) / states.length, \"[\".concat(idx, \"] \").concat(msg)].concat(args));\n          }).apply(compiler);\n        });\n      } else {\n        var lastModulesCount = 0;\n        var lastEntriesCount = 0;\n        var moduleCount = modulesCount;\n        var entriesCount = 1;\n        var doneModules = 0;\n        var doneEntries = 0;\n        var activeModules = new Set();\n        var lastActiveModule = \"\";\n        var update = function update() {\n          var percentByModules = doneModules / Math.max(lastModulesCount, moduleCount);\n          var percentByEntries = doneEntries / Math.max(lastEntriesCount, entriesCount);\n          var items = [0.1 + Math.max(percentByModules, percentByEntries) * 0.6, \"building\"];\n          if (showEntries) {\n            items.push(\"\".concat(doneEntries, \"/\").concat(entriesCount, \" entries\"));\n          }\n          if (showModules) {\n            items.push(\"\".concat(doneModules, \"/\").concat(moduleCount, \" modules\"));\n          }\n          if (showActiveModules) {\n            items.push(\"\".concat(activeModules.size, \" active\"));\n            items.push(lastActiveModule);\n          }\n          handler.apply(void 0, items);\n        };\n        var moduleAdd = function moduleAdd(module) {\n          moduleCount++;\n          if (showActiveModules) {\n            var ident = module.identifier();\n            if (ident) {\n              activeModules.add(ident);\n              lastActiveModule = ident;\n            }\n          }\n          update();\n        };\n        var entryAdd = function entryAdd(entry, name) {\n          entriesCount++;\n          update();\n        };\n        var moduleDone = function moduleDone(module) {\n          doneModules++;\n          if (showActiveModules) {\n            var ident = module.identifier();\n            if (ident) {\n              activeModules.delete(ident);\n              if (lastActiveModule === ident) {\n                lastActiveModule = \"\";\n                var _iterator = _createForOfIteratorHelper(activeModules),\n                  _step;\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    var m = _step.value;\n                    lastActiveModule = m;\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n              }\n            }\n          }\n          update();\n        };\n        var entryDone = function entryDone(entry, name) {\n          doneEntries++;\n          update();\n        };\n        compiler.hooks.compilation.tap(\"ProgressPlugin\", function (compilation) {\n          if (compilation.compiler.isChild()) return;\n          lastModulesCount = moduleCount;\n          lastEntriesCount = entriesCount;\n          moduleCount = entriesCount = 0;\n          doneModules = doneEntries = 0;\n          handler(0, \"compiling\");\n          compilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n          compilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n          compilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n          compilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n          compilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n          compilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n          var hooks = {\n            finishModules: \"finish module graph\",\n            seal: \"sealing\",\n            beforeChunks: \"chunk graph\",\n            afterChunks: \"after chunk graph\",\n            optimizeDependenciesBasic: \"basic dependencies optimization\",\n            optimizeDependencies: \"dependencies optimization\",\n            optimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n            afterOptimizeDependencies: \"after dependencies optimization\",\n            optimize: \"optimizing\",\n            optimizeModulesBasic: \"basic module optimization\",\n            optimizeModules: \"module optimization\",\n            optimizeModulesAdvanced: \"advanced module optimization\",\n            afterOptimizeModules: \"after module optimization\",\n            optimizeChunksBasic: \"basic chunk optimization\",\n            optimizeChunks: \"chunk optimization\",\n            optimizeChunksAdvanced: \"advanced chunk optimization\",\n            afterOptimizeChunks: \"after chunk optimization\",\n            optimizeTree: \"module and chunk tree optimization\",\n            afterOptimizeTree: \"after module and chunk tree optimization\",\n            optimizeChunkModulesBasic: \"basic chunk modules optimization\",\n            optimizeChunkModules: \"chunk modules optimization\",\n            optimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n            afterOptimizeChunkModules: \"after chunk modules optimization\",\n            reviveModules: \"module reviving\",\n            optimizeModuleOrder: \"module order optimization\",\n            advancedOptimizeModuleOrder: \"advanced module order optimization\",\n            beforeModuleIds: \"before module ids\",\n            moduleIds: \"module ids\",\n            optimizeModuleIds: \"module id optimization\",\n            afterOptimizeModuleIds: \"module id optimization\",\n            reviveChunks: \"chunk reviving\",\n            optimizeChunkOrder: \"chunk order optimization\",\n            beforeChunkIds: \"before chunk ids\",\n            optimizeChunkIds: \"chunk id optimization\",\n            afterOptimizeChunkIds: \"after chunk id optimization\",\n            recordModules: \"record modules\",\n            recordChunks: \"record chunks\",\n            beforeHash: \"hashing\",\n            afterHash: \"after hashing\",\n            recordHash: \"record hash\",\n            beforeModuleAssets: \"module assets processing\",\n            beforeChunkAssets: \"chunk assets processing\",\n            additionalChunkAssets: \"additional chunk assets processing\",\n            record: \"recording\",\n            additionalAssets: \"additional asset processing\",\n            optimizeChunkAssets: \"chunk asset optimization\",\n            afterOptimizeChunkAssets: \"after chunk asset optimization\",\n            optimizeAssets: \"asset optimization\",\n            afterOptimizeAssets: \"after asset optimization\",\n            afterSeal: \"after seal\"\n          };\n          var numberOfHooks = Object.keys(hooks).length;\n          Object.keys(hooks).forEach(function (name, idx) {\n            var title = hooks[name];\n            var percentage = idx / numberOfHooks * 0.25 + 0.7;\n            compilation.hooks[name].intercept({\n              name: \"ProgressPlugin\",\n              context: true,\n              call: function call() {\n                handler(percentage, title);\n              },\n              tap: function tap(context, _tap) {\n                if (context) {\n                  // p is percentage from 0 to 1\n                  // args is any number of messages in a hierarchical matter\n                  context.reportProgress = function (p) {\n                    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                      args[_key3 - 1] = arguments[_key3];\n                    }\n                    handler.apply(void 0, [percentage, title, _tap.name].concat(args));\n                  };\n                }\n                handler(percentage, title, _tap.name);\n              }\n            });\n          });\n        });\n        compiler.hooks.emit.intercept({\n          name: \"ProgressPlugin\",\n          context: true,\n          call: function call() {\n            handler(0.95, \"emitting\");\n          },\n          tap: function tap(context, _tap2) {\n            if (context) {\n              context.reportProgress = function (p) {\n                for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                  args[_key4 - 1] = arguments[_key4];\n                }\n                handler.apply(void 0, [0.95, \"emitting\", _tap2.name].concat(args));\n              };\n            }\n            handler(0.95, \"emitting\", _tap2.name);\n          }\n        });\n        compiler.hooks.afterEmit.intercept({\n          name: \"ProgressPlugin\",\n          context: true,\n          call: function call() {\n            handler(0.98, \"after emitting\");\n          },\n          tap: function tap(context, _tap3) {\n            if (context) {\n              context.reportProgress = function (p) {\n                for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n                  args[_key5 - 1] = arguments[_key5];\n                }\n                handler.apply(void 0, [0.98, \"after emitting\", _tap3.name].concat(args));\n              };\n            }\n            handler(0.98, \"after emitting\", _tap3.name);\n          }\n        });\n        compiler.hooks.done.tap(\"ProgressPlugin\", function () {\n          handler(1, \"\");\n        });\n      }\n    }\n  }]);\n  return ProgressPlugin;\n}();\nProgressPlugin.defaultOptions = {\n  profile: false,\n  modulesCount: 500,\n  modules: true,\n  activeModules: true,\n  // TODO webpack 5 default this to true\n  entries: false\n};\nmodule.exports = ProgressPlugin;","map":{"version":3,"names":["validateOptions","require","schema","createDefaultHandler","profile","logger","lastState","lastStateTime","defaultHandler","percentage","msg","args","status","Math","floor","state","replace","Date","now","diff","stateMsg","warn","info","log","debug","ProgressPlugin","options","handler","Object","assign","defaultOptions","modulesCount","showEntries","entries","showModules","modules","showActiveModules","activeModules","compiler","getInfrastructureLogger","compilers","states","Array","length","forEach","idx","p","map","reduce","a","b","apply","lastModulesCount","lastEntriesCount","moduleCount","entriesCount","doneModules","doneEntries","Set","lastActiveModule","update","percentByModules","max","percentByEntries","items","push","size","moduleAdd","module","ident","identifier","add","entryAdd","entry","name","moduleDone","delete","m","entryDone","hooks","compilation","tap","isChild","buildModule","failedModule","succeedModule","addEntry","failedEntry","succeedEntry","finishModules","seal","beforeChunks","afterChunks","optimizeDependenciesBasic","optimizeDependencies","optimizeDependenciesAdvanced","afterOptimizeDependencies","optimize","optimizeModulesBasic","optimizeModules","optimizeModulesAdvanced","afterOptimizeModules","optimizeChunksBasic","optimizeChunks","optimizeChunksAdvanced","afterOptimizeChunks","optimizeTree","afterOptimizeTree","optimizeChunkModulesBasic","optimizeChunkModules","optimizeChunkModulesAdvanced","afterOptimizeChunkModules","reviveModules","optimizeModuleOrder","advancedOptimizeModuleOrder","beforeModuleIds","moduleIds","optimizeModuleIds","afterOptimizeModuleIds","reviveChunks","optimizeChunkOrder","beforeChunkIds","optimizeChunkIds","afterOptimizeChunkIds","recordModules","recordChunks","beforeHash","afterHash","recordHash","beforeModuleAssets","beforeChunkAssets","additionalChunkAssets","record","additionalAssets","optimizeChunkAssets","afterOptimizeChunkAssets","optimizeAssets","afterOptimizeAssets","afterSeal","numberOfHooks","keys","title","intercept","context","call","reportProgress","emit","afterEmit","done","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/ProgressPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/ProgressPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginArgument} ProgressPluginArgument */\n/** @typedef {import(\"../declarations/plugins/ProgressPlugin\").ProgressPluginOptions} ProgressPluginOptions */\n\nconst createDefaultHandler = (profile, logger) => {\n\tlet lastState;\n\tlet lastStateTime;\n\n\tconst defaultHandler = (percentage, msg, ...args) => {\n\t\tlogger.status(`${Math.floor(percentage * 100)}%`, msg, ...args);\n\t\tif (profile) {\n\t\t\tlet state = msg;\n\t\t\tstate = state.replace(/^\\d+\\/\\d+\\s+/, \"\");\n\t\t\tif (percentage === 0) {\n\t\t\t\tlastState = null;\n\t\t\t\tlastStateTime = Date.now();\n\t\t\t} else if (state !== lastState || percentage === 1) {\n\t\t\t\tconst now = Date.now();\n\t\t\t\tif (lastState) {\n\t\t\t\t\tconst diff = now - lastStateTime;\n\t\t\t\t\tconst stateMsg = `${diff}ms ${lastState}`;\n\t\t\t\t\tif (diff > 1000) {\n\t\t\t\t\t\tlogger.warn(stateMsg);\n\t\t\t\t\t} else if (diff > 10) {\n\t\t\t\t\t\tlogger.info(stateMsg);\n\t\t\t\t\t} else if (diff > 0) {\n\t\t\t\t\t\tlogger.log(stateMsg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug(stateMsg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlastState = state;\n\t\t\t\tlastStateTime = now;\n\t\t\t}\n\t\t}\n\t\tif (percentage === 1) logger.status();\n\t};\n\n\treturn defaultHandler;\n};\n\nclass ProgressPlugin {\n\t/**\n\t * @param {ProgressPluginArgument} options options\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\thandler: options\n\t\t\t};\n\t\t}\n\n\t\toptions = options || {};\n\t\tvalidateOptions(schema, options, \"Progress Plugin\");\n\t\toptions = Object.assign({}, ProgressPlugin.defaultOptions, options);\n\n\t\tthis.profile = options.profile;\n\t\tthis.handler = options.handler;\n\t\tthis.modulesCount = options.modulesCount;\n\t\tthis.showEntries = options.entries;\n\t\tthis.showModules = options.modules;\n\t\tthis.showActiveModules = options.activeModules;\n\t}\n\n\tapply(compiler) {\n\t\tconst { modulesCount } = this;\n\t\tconst handler =\n\t\t\tthis.handler ||\n\t\t\tcreateDefaultHandler(\n\t\t\t\tthis.profile,\n\t\t\t\tcompiler.getInfrastructureLogger(\"webpack.Progress\")\n\t\t\t);\n\t\tconst showEntries = this.showEntries;\n\t\tconst showModules = this.showModules;\n\t\tconst showActiveModules = this.showActiveModules;\n\t\tif (compiler.compilers) {\n\t\t\tconst states = new Array(compiler.compilers.length);\n\t\t\tcompiler.compilers.forEach((compiler, idx) => {\n\t\t\t\tnew ProgressPlugin((p, msg, ...args) => {\n\t\t\t\t\tstates[idx] = [p, msg, ...args];\n\t\t\t\t\thandler(\n\t\t\t\t\t\tstates\n\t\t\t\t\t\t\t.map(state => (state && state[0]) || 0)\n\t\t\t\t\t\t\t.reduce((a, b) => a + b) / states.length,\n\t\t\t\t\t\t`[${idx}] ${msg}`,\n\t\t\t\t\t\t...args\n\t\t\t\t\t);\n\t\t\t\t}).apply(compiler);\n\t\t\t});\n\t\t} else {\n\t\t\tlet lastModulesCount = 0;\n\t\t\tlet lastEntriesCount = 0;\n\t\t\tlet moduleCount = modulesCount;\n\t\t\tlet entriesCount = 1;\n\t\t\tlet doneModules = 0;\n\t\t\tlet doneEntries = 0;\n\t\t\tconst activeModules = new Set();\n\t\t\tlet lastActiveModule = \"\";\n\n\t\t\tconst update = () => {\n\t\t\t\tconst percentByModules =\n\t\t\t\t\tdoneModules / Math.max(lastModulesCount, moduleCount);\n\t\t\t\tconst percentByEntries =\n\t\t\t\t\tdoneEntries / Math.max(lastEntriesCount, entriesCount);\n\n\t\t\t\tconst items = [\n\t\t\t\t\t0.1 + Math.max(percentByModules, percentByEntries) * 0.6,\n\t\t\t\t\t\"building\"\n\t\t\t\t];\n\t\t\t\tif (showEntries) {\n\t\t\t\t\titems.push(`${doneEntries}/${entriesCount} entries`);\n\t\t\t\t}\n\t\t\t\tif (showModules) {\n\t\t\t\t\titems.push(`${doneModules}/${moduleCount} modules`);\n\t\t\t\t}\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\titems.push(`${activeModules.size} active`);\n\t\t\t\t\titems.push(lastActiveModule);\n\t\t\t\t}\n\t\t\t\thandler(...items);\n\t\t\t};\n\n\t\t\tconst moduleAdd = module => {\n\t\t\t\tmoduleCount++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.add(ident);\n\t\t\t\t\t\tlastActiveModule = ident;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryAdd = (entry, name) => {\n\t\t\t\tentriesCount++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst moduleDone = module => {\n\t\t\t\tdoneModules++;\n\t\t\t\tif (showActiveModules) {\n\t\t\t\t\tconst ident = module.identifier();\n\t\t\t\t\tif (ident) {\n\t\t\t\t\t\tactiveModules.delete(ident);\n\t\t\t\t\t\tif (lastActiveModule === ident) {\n\t\t\t\t\t\t\tlastActiveModule = \"\";\n\t\t\t\t\t\t\tfor (const m of activeModules) {\n\t\t\t\t\t\t\t\tlastActiveModule = m;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tconst entryDone = (entry, name) => {\n\t\t\t\tdoneEntries++;\n\t\t\t\tupdate();\n\t\t\t};\n\n\t\t\tcompiler.hooks.compilation.tap(\"ProgressPlugin\", compilation => {\n\t\t\t\tif (compilation.compiler.isChild()) return;\n\t\t\t\tlastModulesCount = moduleCount;\n\t\t\t\tlastEntriesCount = entriesCount;\n\t\t\t\tmoduleCount = entriesCount = 0;\n\t\t\t\tdoneModules = doneEntries = 0;\n\t\t\t\thandler(0, \"compiling\");\n\n\t\t\t\tcompilation.hooks.buildModule.tap(\"ProgressPlugin\", moduleAdd);\n\t\t\t\tcompilation.hooks.failedModule.tap(\"ProgressPlugin\", moduleDone);\n\t\t\t\tcompilation.hooks.succeedModule.tap(\"ProgressPlugin\", moduleDone);\n\n\t\t\t\tcompilation.hooks.addEntry.tap(\"ProgressPlugin\", entryAdd);\n\t\t\t\tcompilation.hooks.failedEntry.tap(\"ProgressPlugin\", entryDone);\n\t\t\t\tcompilation.hooks.succeedEntry.tap(\"ProgressPlugin\", entryDone);\n\n\t\t\t\tconst hooks = {\n\t\t\t\t\tfinishModules: \"finish module graph\",\n\t\t\t\t\tseal: \"sealing\",\n\t\t\t\t\tbeforeChunks: \"chunk graph\",\n\t\t\t\t\tafterChunks: \"after chunk graph\",\n\t\t\t\t\toptimizeDependenciesBasic: \"basic dependencies optimization\",\n\t\t\t\t\toptimizeDependencies: \"dependencies optimization\",\n\t\t\t\t\toptimizeDependenciesAdvanced: \"advanced dependencies optimization\",\n\t\t\t\t\tafterOptimizeDependencies: \"after dependencies optimization\",\n\t\t\t\t\toptimize: \"optimizing\",\n\t\t\t\t\toptimizeModulesBasic: \"basic module optimization\",\n\t\t\t\t\toptimizeModules: \"module optimization\",\n\t\t\t\t\toptimizeModulesAdvanced: \"advanced module optimization\",\n\t\t\t\t\tafterOptimizeModules: \"after module optimization\",\n\t\t\t\t\toptimizeChunksBasic: \"basic chunk optimization\",\n\t\t\t\t\toptimizeChunks: \"chunk optimization\",\n\t\t\t\t\toptimizeChunksAdvanced: \"advanced chunk optimization\",\n\t\t\t\t\tafterOptimizeChunks: \"after chunk optimization\",\n\t\t\t\t\toptimizeTree: \"module and chunk tree optimization\",\n\t\t\t\t\tafterOptimizeTree: \"after module and chunk tree optimization\",\n\t\t\t\t\toptimizeChunkModulesBasic: \"basic chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModules: \"chunk modules optimization\",\n\t\t\t\t\toptimizeChunkModulesAdvanced: \"advanced chunk modules optimization\",\n\t\t\t\t\tafterOptimizeChunkModules: \"after chunk modules optimization\",\n\t\t\t\t\treviveModules: \"module reviving\",\n\t\t\t\t\toptimizeModuleOrder: \"module order optimization\",\n\t\t\t\t\tadvancedOptimizeModuleOrder: \"advanced module order optimization\",\n\t\t\t\t\tbeforeModuleIds: \"before module ids\",\n\t\t\t\t\tmoduleIds: \"module ids\",\n\t\t\t\t\toptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\tafterOptimizeModuleIds: \"module id optimization\",\n\t\t\t\t\treviveChunks: \"chunk reviving\",\n\t\t\t\t\toptimizeChunkOrder: \"chunk order optimization\",\n\t\t\t\t\tbeforeChunkIds: \"before chunk ids\",\n\t\t\t\t\toptimizeChunkIds: \"chunk id optimization\",\n\t\t\t\t\tafterOptimizeChunkIds: \"after chunk id optimization\",\n\t\t\t\t\trecordModules: \"record modules\",\n\t\t\t\t\trecordChunks: \"record chunks\",\n\t\t\t\t\tbeforeHash: \"hashing\",\n\t\t\t\t\tafterHash: \"after hashing\",\n\t\t\t\t\trecordHash: \"record hash\",\n\t\t\t\t\tbeforeModuleAssets: \"module assets processing\",\n\t\t\t\t\tbeforeChunkAssets: \"chunk assets processing\",\n\t\t\t\t\tadditionalChunkAssets: \"additional chunk assets processing\",\n\t\t\t\t\trecord: \"recording\",\n\t\t\t\t\tadditionalAssets: \"additional asset processing\",\n\t\t\t\t\toptimizeChunkAssets: \"chunk asset optimization\",\n\t\t\t\t\tafterOptimizeChunkAssets: \"after chunk asset optimization\",\n\t\t\t\t\toptimizeAssets: \"asset optimization\",\n\t\t\t\t\tafterOptimizeAssets: \"after asset optimization\",\n\t\t\t\t\tafterSeal: \"after seal\"\n\t\t\t\t};\n\t\t\t\tconst numberOfHooks = Object.keys(hooks).length;\n\t\t\t\tObject.keys(hooks).forEach((name, idx) => {\n\t\t\t\t\tconst title = hooks[name];\n\t\t\t\t\tconst percentage = (idx / numberOfHooks) * 0.25 + 0.7;\n\t\t\t\t\tcompilation.hooks[name].intercept({\n\t\t\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\t\t\tcontext: true,\n\t\t\t\t\t\tcall: () => {\n\t\t\t\t\t\t\thandler(percentage, title);\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\t\t\tif (context) {\n\t\t\t\t\t\t\t\t// p is percentage from 0 to 1\n\t\t\t\t\t\t\t\t// args is any number of messages in a hierarchical matter\n\t\t\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\t\t\thandler(percentage, title, tap.name, ...args);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\thandler(percentage, title, tap.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\tcompiler.hooks.emit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.95, \"emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.95, \"emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.95, \"emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.afterEmit.intercept({\n\t\t\t\tname: \"ProgressPlugin\",\n\t\t\t\tcontext: true,\n\t\t\t\tcall: () => {\n\t\t\t\t\thandler(0.98, \"after emitting\");\n\t\t\t\t},\n\t\t\t\ttap: (context, tap) => {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tcontext.reportProgress = (p, ...args) => {\n\t\t\t\t\t\t\thandler(0.98, \"after emitting\", tap.name, ...args);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\thandler(0.98, \"after emitting\", tap.name);\n\t\t\t\t}\n\t\t\t});\n\t\t\tcompiler.hooks.done.tap(\"ProgressPlugin\", () => {\n\t\t\t\thandler(1, \"\");\n\t\t\t});\n\t\t}\n\t}\n}\n\nProgressPlugin.defaultOptions = {\n\tprofile: false,\n\tmodulesCount: 500,\n\tmodules: true,\n\tactiveModules: true,\n\t// TODO webpack 5 default this to true\n\tentries: false\n};\n\nmodule.exports = ProgressPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}