{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n/** @typedef {import(\"./SingleEntryDependency\")} SingleEntryDependency */\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar Dependency = require(\"../Dependency\");\nvar MultiEntryDependency = /*#__PURE__*/function (_Dependency) {\n  _inherits(MultiEntryDependency, _Dependency);\n  var _super = _createSuper(MultiEntryDependency);\n  /**\n   * @param {SingleEntryDependency[]} dependencies an array of SingleEntryDependencies\n   * @param {string} name entry name\n   */\n  function MultiEntryDependency(dependencies, name) {\n    var _this;\n    _classCallCheck(this, MultiEntryDependency);\n    _this = _super.call(this);\n    _this.dependencies = dependencies;\n    _this.name = name;\n    return _this;\n  }\n  _createClass(MultiEntryDependency, [{\n    key: \"type\",\n    get: function get() {\n      return \"multi entry\";\n    }\n  }]);\n  return MultiEntryDependency;\n}(Dependency);\nmodule.exports = MultiEntryDependency;","map":{"version":3,"names":["Dependency","require","MultiEntryDependency","dependencies","name","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/dependencies/MultiEntryDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./SingleEntryDependency\")} SingleEntryDependency */\nconst Dependency = require(\"../Dependency\");\n\nclass MultiEntryDependency extends Dependency {\n\t/**\n\t * @param {SingleEntryDependency[]} dependencies an array of SingleEntryDependencies\n\t * @param {string} name entry name\n\t */\n\tconstructor(dependencies, name) {\n\t\tsuper();\n\t\tthis.dependencies = dependencies;\n\t\tthis.name = name;\n\t}\n\n\tget type() {\n\t\treturn \"multi entry\";\n\t}\n}\n\nmodule.exports = MultiEntryDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AACZ;AAAA;AAAA;AAAA;AAAA;AACA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAAC,IAEtCC,oBAAoB;EAAA;EAAA;EACzB;AACD;AACA;AACA;EACC,8BAAYC,YAAY,EAAEC,IAAI,EAAE;IAAA;IAAA;IAC/B;IACA,MAAKD,YAAY,GAAGA,YAAY;IAChC,MAAKC,IAAI,GAAGA,IAAI;IAAC;EAClB;EAAC;IAAA;IAAA,KAED,eAAW;MACV,OAAO,aAAa;IACrB;EAAC;EAAA;AAAA,EAbiCJ,UAAU;AAgB7CK,MAAM,CAACC,OAAO,GAAGJ,oBAAoB"},"metadata":{},"sourceType":"script"}