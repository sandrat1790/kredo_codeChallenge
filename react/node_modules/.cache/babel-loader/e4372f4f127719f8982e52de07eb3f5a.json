{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar ConstDependency = require(\"./dependencies/ConstDependency\");\nvar NullFactory = require(\"./NullFactory\");\nvar ParserHelpers = require(\"./ParserHelpers\");\nvar getQuery = function getQuery(request) {\n  var i = request.indexOf(\"?\");\n  return i !== -1 ? request.substr(i) : \"\";\n};\nvar collectDeclaration = function collectDeclaration(declarations, pattern) {\n  var stack = [pattern];\n  while (stack.length > 0) {\n    var node = stack.pop();\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n      case \"ArrayPattern\":\n        var _iterator = _createForOfIteratorHelper(node.elements),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var element = _step.value;\n            if (element) {\n              stack.push(element);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        break;\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n      case \"ObjectPattern\":\n        var _iterator2 = _createForOfIteratorHelper(node.properties),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var property = _step2.value;\n            stack.push(property.value);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        break;\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\nvar getHoistedDeclarations = function getHoistedDeclarations(branch, includeFunctionDeclarations) {\n  var declarations = new Set();\n  var stack = [branch];\n  while (stack.length > 0) {\n    var node = stack.pop();\n    // Some node could be `null` or `undefined`.\n    if (!node) continue;\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        var _iterator3 = _createForOfIteratorHelper(node.body),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var stmt = _step3.value;\n            stack.push(stmt);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        break;\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n      case \"SwitchStatement\":\n        var _iterator4 = _createForOfIteratorHelper(node.cases),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var cs = _step4.value;\n            var _iterator5 = _createForOfIteratorHelper(cs.consequent),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var consequent = _step5.value;\n                stack.push(consequent);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        break;\n      case \"TryStatement\":\n        stack.push(node.block);\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n        stack.push(node.finalizer);\n        break;\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n        break;\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          var _iterator6 = _createForOfIteratorHelper(node.declarations),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var decl = _step6.value;\n              collectDeclaration(declarations, decl.id);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n        break;\n    }\n  }\n  return Array.from(declarations);\n};\nvar ConstPlugin = /*#__PURE__*/function () {\n  function ConstPlugin() {\n    _classCallCheck(this, ConstPlugin);\n  }\n  _createClass(ConstPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"ConstPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n        compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n        var handler = function handler(parser) {\n          parser.hooks.statementIf.tap(\"ConstPlugin\", function (statement) {\n            if (parser.scope.isAsmJs) return;\n            var param = parser.evaluateExpression(statement.test);\n            var bool = param.asBool();\n            if (typeof bool === \"boolean\") {\n              if (statement.test.type !== \"Literal\") {\n                var dep = new ConstDependency(\"\".concat(bool), param.range);\n                dep.loc = statement.loc;\n                parser.state.current.addDependency(dep);\n              }\n              var branchToRemove = bool ? statement.alternate : statement.consequent;\n              if (branchToRemove) {\n                // Before removing the dead branch, the hoisted declarations\n                // must be collected.\n                //\n                // Given the following code:\n                //\n                //     if (true) f() else g()\n                //     if (false) {\n                //       function f() {}\n                //       const g = function g() {}\n                //       if (someTest) {\n                //         let a = 1\n                //         var x, {y, z} = obj\n                //       }\n                //     } else {\n                //       …\n                //     }\n                //\n                // the generated code is:\n                //\n                //     if (true) f() else {}\n                //     if (false) {\n                //       var f, x, y, z;   (in loose mode)\n                //       var x, y, z;      (in strict mode)\n                //     } else {\n                //       …\n                //     }\n                //\n                // NOTE: When code runs in strict mode, `var` declarations\n                // are hoisted but `function` declarations don't.\n                //\n                var declarations;\n                if (parser.scope.isStrict) {\n                  // If the code runs in strict mode, variable declarations\n                  // using `var` must be hoisted.\n                  declarations = getHoistedDeclarations(branchToRemove, false);\n                } else {\n                  // Otherwise, collect all hoisted declaration.\n                  declarations = getHoistedDeclarations(branchToRemove, true);\n                }\n                var replacement;\n                if (declarations.length > 0) {\n                  replacement = \"{ var \".concat(declarations.join(\", \"), \"; }\");\n                } else {\n                  replacement = \"{}\";\n                }\n                var _dep = new ConstDependency(replacement, branchToRemove.range);\n                _dep.loc = branchToRemove.loc;\n                parser.state.current.addDependency(_dep);\n              }\n              return bool;\n            }\n          });\n          parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", function (expression) {\n            if (parser.scope.isAsmJs) return;\n            var param = parser.evaluateExpression(expression.test);\n            var bool = param.asBool();\n            if (typeof bool === \"boolean\") {\n              if (expression.test.type !== \"Literal\") {\n                var _dep2 = new ConstDependency(\" \".concat(bool), param.range);\n                _dep2.loc = expression.loc;\n                parser.state.current.addDependency(_dep2);\n              }\n              // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // Given the following code:\n              //\n              //   false ? someExpression() : otherExpression();\n              //\n              // the generated code is:\n              //\n              //   false ? undefined : otherExpression();\n              //\n              var branchToRemove = bool ? expression.alternate : expression.consequent;\n              var dep = new ConstDependency(\"undefined\", branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.current.addDependency(dep);\n              return bool;\n            }\n          });\n          parser.hooks.expressionLogicalOperator.tap(\"ConstPlugin\", function (expression) {\n            if (parser.scope.isAsmJs) return;\n            if (expression.operator === \"&&\" || expression.operator === \"||\") {\n              var param = parser.evaluateExpression(expression.left);\n              var bool = param.asBool();\n              if (typeof bool === \"boolean\") {\n                // Expressions do not hoist.\n                // It is safe to remove the dead branch.\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   falsyExpression() && someExpression();\n                //\n                // the generated code is:\n                //\n                //   falsyExpression() && false;\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   truthyExpression() && someExpression();\n                //\n                // the generated code is:\n                //\n                //   true && someExpression();\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   truthyExpression() || someExpression();\n                //\n                // the generated code is:\n                //\n                //   truthyExpression() || false;\n                //\n                // ------------------------------------------\n                //\n                // Given the following code:\n                //\n                //   falsyExpression() || someExpression();\n                //\n                // the generated code is:\n                //\n                //   false && someExpression();\n                //\n                var keepRight = expression.operator === \"&&\" && bool || expression.operator === \"||\" && !bool;\n                if (param.isBoolean() || keepRight) {\n                  // for case like\n                  //\n                  //   return'development'===process.env.NODE_ENV&&'foo'\n                  //\n                  // we need a space before the bool to prevent result like\n                  //\n                  //   returnfalse&&'foo'\n                  //\n                  var dep = new ConstDependency(\" \".concat(bool), param.range);\n                  dep.loc = expression.loc;\n                  parser.state.current.addDependency(dep);\n                } else {\n                  parser.walkExpression(expression.left);\n                }\n                if (!keepRight) {\n                  var _dep3 = new ConstDependency(\"false\", expression.right.range);\n                  _dep3.loc = expression.loc;\n                  parser.state.current.addDependency(_dep3);\n                }\n                return keepRight;\n              }\n            }\n          });\n          parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", function (expr) {\n            if (parser.scope.isAsmJs) return;\n            if (!parser.state.module) return;\n            return ParserHelpers.evaluateToString(getQuery(parser.state.module.resource))(expr);\n          });\n          parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", function () {\n            if (parser.scope.isAsmJs) return;\n            if (!parser.state.module) return;\n            parser.state.current.addVariable(\"__resourceQuery\", JSON.stringify(getQuery(parser.state.module.resource)));\n            return true;\n          });\n        };\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n      });\n    }\n  }]);\n  return ConstPlugin;\n}();\nmodule.exports = ConstPlugin;","map":{"version":3,"names":["ConstDependency","require","NullFactory","ParserHelpers","getQuery","request","i","indexOf","substr","collectDeclaration","declarations","pattern","stack","length","node","pop","type","add","name","elements","element","push","left","properties","property","value","argument","getHoistedDeclarations","branch","includeFunctionDeclarations","Set","body","stmt","consequent","alternate","init","cases","cs","block","handler","finalizer","id","kind","decl","Array","from","ConstPlugin","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","parser","statementIf","statement","scope","isAsmJs","param","evaluateExpression","test","bool","asBool","dep","range","loc","state","current","addDependency","branchToRemove","isStrict","replacement","join","expressionConditionalOperator","expression","expressionLogicalOperator","operator","keepRight","isBoolean","walkExpression","right","evaluateIdentifier","for","expr","module","evaluateToString","resource","addVariable","JSON","stringify","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/ConstPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst ParserHelpers = require(\"./ParserHelpers\");\n\nconst getQuery = request => {\n\tconst i = request.indexOf(\"?\");\n\treturn i !== -1 ? request.substr(i) : \"\";\n};\n\nconst collectDeclaration = (declarations, pattern) => {\n\tconst stack = [pattern];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\tswitch (node.type) {\n\t\t\tcase \"Identifier\":\n\t\t\t\tdeclarations.add(node.name);\n\t\t\t\tbreak;\n\t\t\tcase \"ArrayPattern\":\n\t\t\t\tfor (const element of node.elements) {\n\t\t\t\t\tif (element) {\n\t\t\t\t\t\tstack.push(element);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"AssignmentPattern\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectPattern\":\n\t\t\t\tfor (const property of node.properties) {\n\t\t\t\t\tstack.push(property.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"RestElement\":\n\t\t\t\tstack.push(node.argument);\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n\tconst declarations = new Set();\n\tconst stack = [branch];\n\twhile (stack.length > 0) {\n\t\tconst node = stack.pop();\n\t\t// Some node could be `null` or `undefined`.\n\t\tif (!node) continue;\n\t\tswitch (node.type) {\n\t\t\t// Walk through control statements to look for hoisted declarations.\n\t\t\t// Some branches are skipped since they do not allow declarations.\n\t\t\tcase \"BlockStatement\":\n\t\t\t\tfor (const stmt of node.body) {\n\t\t\t\t\tstack.push(stmt);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"IfStatement\":\n\t\t\t\tstack.push(node.consequent);\n\t\t\t\tstack.push(node.alternate);\n\t\t\t\tbreak;\n\t\t\tcase \"ForStatement\":\n\t\t\t\tstack.push(node.init);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"ForInStatement\":\n\t\t\tcase \"ForOfStatement\":\n\t\t\t\tstack.push(node.left);\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"DoWhileStatement\":\n\t\t\tcase \"WhileStatement\":\n\t\t\tcase \"LabeledStatement\":\n\t\t\t\tstack.push(node.body);\n\t\t\t\tbreak;\n\t\t\tcase \"SwitchStatement\":\n\t\t\t\tfor (const cs of node.cases) {\n\t\t\t\t\tfor (const consequent of cs.consequent) {\n\t\t\t\t\t\tstack.push(consequent);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"TryStatement\":\n\t\t\t\tstack.push(node.block);\n\t\t\t\tif (node.handler) {\n\t\t\t\t\tstack.push(node.handler.body);\n\t\t\t\t}\n\t\t\t\tstack.push(node.finalizer);\n\t\t\t\tbreak;\n\t\t\tcase \"FunctionDeclaration\":\n\t\t\t\tif (includeFunctionDeclarations) {\n\t\t\t\t\tcollectDeclaration(declarations, node.id);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"VariableDeclaration\":\n\t\t\t\tif (node.kind === \"var\") {\n\t\t\t\t\tfor (const decl of node.declarations) {\n\t\t\t\t\t\tcollectDeclaration(declarations, decl.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn Array.from(declarations);\n};\n\nclass ConstPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"ConstPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(ConstDependency, new NullFactory());\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tConstDependency,\n\t\t\t\t\tnew ConstDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = parser => {\n\t\t\t\t\tparser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\tconst param = parser.evaluateExpression(statement.test);\n\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\tif (statement.test.type !== \"Literal\") {\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(`${bool}`, param.range);\n\t\t\t\t\t\t\t\tdep.loc = statement.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t? statement.alternate\n\t\t\t\t\t\t\t\t: statement.consequent;\n\t\t\t\t\t\t\tif (branchToRemove) {\n\t\t\t\t\t\t\t\t// Before removing the dead branch, the hoisted declarations\n\t\t\t\t\t\t\t\t// must be collected.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else g()\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       function f() {}\n\t\t\t\t\t\t\t\t//       const g = function g() {}\n\t\t\t\t\t\t\t\t//       if (someTest) {\n\t\t\t\t\t\t\t\t//         let a = 1\n\t\t\t\t\t\t\t\t//         var x, {y, z} = obj\n\t\t\t\t\t\t\t\t//       }\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//     if (true) f() else {}\n\t\t\t\t\t\t\t\t//     if (false) {\n\t\t\t\t\t\t\t\t//       var f, x, y, z;   (in loose mode)\n\t\t\t\t\t\t\t\t//       var x, y, z;      (in strict mode)\n\t\t\t\t\t\t\t\t//     } else {\n\t\t\t\t\t\t\t\t//       …\n\t\t\t\t\t\t\t\t//     }\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// NOTE: When code runs in strict mode, `var` declarations\n\t\t\t\t\t\t\t\t// are hoisted but `function` declarations don't.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tlet declarations;\n\t\t\t\t\t\t\t\tif (parser.scope.isStrict) {\n\t\t\t\t\t\t\t\t\t// If the code runs in strict mode, variable declarations\n\t\t\t\t\t\t\t\t\t// using `var` must be hoisted.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// Otherwise, collect all hoisted declaration.\n\t\t\t\t\t\t\t\t\tdeclarations = getHoistedDeclarations(branchToRemove, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet replacement;\n\t\t\t\t\t\t\t\tif (declarations.length > 0) {\n\t\t\t\t\t\t\t\t\treplacement = `{ var ${declarations.join(\", \")}; }`;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treplacement = \"{}\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\treplacement,\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expressionConditionalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.test);\n\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\tif (expression.test.type !== \"Literal\") {\n\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? someExpression() : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t//   false ? undefined : otherExpression();\n\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\tconst branchToRemove = bool\n\t\t\t\t\t\t\t\t\t? expression.alternate\n\t\t\t\t\t\t\t\t\t: expression.consequent;\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\"undefined\",\n\t\t\t\t\t\t\t\t\tbranchToRemove.range\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tdep.loc = branchToRemove.loc;\n\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\treturn bool;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.expressionLogicalOperator.tap(\n\t\t\t\t\t\t\"ConstPlugin\",\n\t\t\t\t\t\texpression => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\texpression.operator === \"&&\" ||\n\t\t\t\t\t\t\t\texpression.operator === \"||\"\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst param = parser.evaluateExpression(expression.left);\n\t\t\t\t\t\t\t\tconst bool = param.asBool();\n\t\t\t\t\t\t\t\tif (typeof bool === \"boolean\") {\n\t\t\t\t\t\t\t\t\t// Expressions do not hoist.\n\t\t\t\t\t\t\t\t\t// It is safe to remove the dead branch.\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() && false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   true && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   truthyExpression() || false;\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// ------------------------------------------\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// Given the following code:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   falsyExpression() || someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t// the generated code is:\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t//   false && someExpression();\n\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\tconst keepRight =\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"&&\" && bool) ||\n\t\t\t\t\t\t\t\t\t\t(expression.operator === \"||\" && !bool);\n\n\t\t\t\t\t\t\t\t\tif (param.isBoolean() || keepRight) {\n\t\t\t\t\t\t\t\t\t\t// for case like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   return'development'===process.env.NODE_ENV&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t// we need a space before the bool to prevent result like\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\t//   returnfalse&&'foo'\n\t\t\t\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(` ${bool}`, param.range);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tparser.walkExpression(expression.left);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (!keepRight) {\n\t\t\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\n\t\t\t\t\t\t\t\t\t\t\t\"false\",\n\t\t\t\t\t\t\t\t\t\t\texpression.right.range\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tdep.loc = expression.loc;\n\t\t\t\t\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn keepRight;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.evaluateIdentifier\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", expr => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\treturn ParserHelpers.evaluateToString(\n\t\t\t\t\t\t\t\tgetQuery(parser.state.module.resource)\n\t\t\t\t\t\t\t)(expr);\n\t\t\t\t\t\t});\n\t\t\t\t\tparser.hooks.expression\n\t\t\t\t\t\t.for(\"__resourceQuery\")\n\t\t\t\t\t\t.tap(\"ConstPlugin\", () => {\n\t\t\t\t\t\t\tif (parser.scope.isAsmJs) return;\n\t\t\t\t\t\t\tif (!parser.state.module) return;\n\t\t\t\t\t\t\tparser.state.current.addVariable(\n\t\t\t\t\t\t\t\t\"__resourceQuery\",\n\t\t\t\t\t\t\t\tJSON.stringify(getQuery(parser.state.module.resource))\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/esm\")\n\t\t\t\t\t.tap(\"ConstPlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = ConstPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}