{"ast":null,"code":"/*\n  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\"use strict\";\n\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-undefined */\nvar _get = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Syntax = require(\"estraverse\").Syntax;\nvar Reference = require(\"./reference\");\nvar Variable = require(\"./variable\");\nvar Definition = require(\"./definition\").Definition;\nvar assert = require(\"assert\");\n\n/**\n * Test if scope is struct\n * @param {Scope} scope - scope\n * @param {Block} block - block\n * @param {boolean} isMethodDefinition - is method definiton\n * @param {boolean} useDirective - use directive\n * @returns {boolean} is strict scope\n */\nfunction isStrictScope(scope, block, isMethodDefinition, useDirective) {\n  var body;\n\n  // When upper scope is exists and strict, inner scope is also strict.\n  if (scope.upper && scope.upper.isStrict) {\n    return true;\n  }\n  if (isMethodDefinition) {\n    return true;\n  }\n  if (scope.type === \"class\" || scope.type === \"module\") {\n    return true;\n  }\n  if (scope.type === \"block\" || scope.type === \"switch\") {\n    return false;\n  }\n  if (scope.type === \"function\") {\n    if (block.type === Syntax.ArrowFunctionExpression && block.body.type !== Syntax.BlockStatement) {\n      return false;\n    }\n    if (block.type === Syntax.Program) {\n      body = block;\n    } else {\n      body = block.body;\n    }\n    if (!body) {\n      return false;\n    }\n  } else if (scope.type === \"global\") {\n    body = block;\n  } else {\n    return false;\n  }\n\n  // Search 'use strict' directive.\n  if (useDirective) {\n    for (var i = 0, iz = body.body.length; i < iz; ++i) {\n      var stmt = body.body[i];\n      if (stmt.type !== Syntax.DirectiveStatement) {\n        break;\n      }\n      if (stmt.raw === \"\\\"use strict\\\"\" || stmt.raw === \"'use strict'\") {\n        return true;\n      }\n    }\n  } else {\n    for (var _i = 0, _iz = body.body.length; _i < _iz; ++_i) {\n      var _stmt = body.body[_i];\n      if (_stmt.type !== Syntax.ExpressionStatement) {\n        break;\n      }\n      var expr = _stmt.expression;\n      if (expr.type !== Syntax.Literal || typeof expr.value !== \"string\") {\n        break;\n      }\n      if (expr.raw !== null && expr.raw !== undefined) {\n        if (expr.raw === \"\\\"use strict\\\"\" || expr.raw === \"'use strict'\") {\n          return true;\n        }\n      } else {\n        if (expr.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Register scope\n * @param {ScopeManager} scopeManager - scope manager\n * @param {Scope} scope - scope\n * @returns {void}\n */\nfunction registerScope(scopeManager, scope) {\n  scopeManager.scopes.push(scope);\n  var scopes = scopeManager.__nodeToScope.get(scope.block);\n  if (scopes) {\n    scopes.push(scope);\n  } else {\n    scopeManager.__nodeToScope.set(scope.block, [scope]);\n  }\n}\n\n/**\n * Should be statically\n * @param {Object} def - def\n * @returns {boolean} should be statically\n */\nfunction shouldBeStatically(def) {\n  return def.type === Variable.ClassName || def.type === Variable.Variable && def.parent.kind !== \"var\";\n}\n\n/**\n * @class Scope\n */\nvar Scope = /*#__PURE__*/function () {\n  function Scope(scopeManager, type, upperScope, block, isMethodDefinition) {\n    _classCallCheck(this, Scope);\n    /**\n     * One of 'module', 'block', 'switch', 'function', 'catch', 'with', 'function', 'class', 'global'.\n     * @member {String} Scope#type\n     */\n    this.type = type;\n\n    /**\n    * The scoped {@link Variable}s of this scope, as <code>{ Variable.name\n    * : Variable }</code>.\n    * @member {Map} Scope#set\n    */\n    this.set = new Map();\n\n    /**\n     * The tainted variables of this scope, as <code>{ Variable.name :\n     * boolean }</code>.\n     * @member {Map} Scope#taints */\n    this.taints = new Map();\n\n    /**\n     * Generally, through the lexical scoping of JS you can always know\n     * which variable an identifier in the source code refers to. There are\n     * a few exceptions to this rule. With 'global' and 'with' scopes you\n     * can only decide at runtime which variable a reference refers to.\n     * Moreover, if 'eval()' is used in a scope, it might introduce new\n     * bindings in this or its parent scopes.\n     * All those scopes are considered 'dynamic'.\n     * @member {boolean} Scope#dynamic\n     */\n    this.dynamic = this.type === \"global\" || this.type === \"with\";\n\n    /**\n     * A reference to the scope-defining syntax node.\n     * @member {espree.Node} Scope#block\n     */\n    this.block = block;\n\n    /**\n    * The {@link Reference|references} that are not resolved with this scope.\n    * @member {Reference[]} Scope#through\n    */\n    this.through = [];\n\n    /**\n    * The scoped {@link Variable}s of this scope. In the case of a\n    * 'function' scope this includes the automatic argument <em>arguments</em> as\n    * its first element, as well as all further formal arguments.\n    * @member {Variable[]} Scope#variables\n    */\n    this.variables = [];\n\n    /**\n    * Any variable {@link Reference|reference} found in this scope. This\n    * includes occurrences of local variables as well as variables from\n    * parent scopes (including the global scope). For local variables\n    * this also includes defining occurrences (like in a 'var' statement).\n    * In a 'function' scope this does not include the occurrences of the\n    * formal parameter in the parameter list.\n    * @member {Reference[]} Scope#references\n    */\n    this.references = [];\n\n    /**\n    * For 'global' and 'function' scopes, this is a self-reference. For\n    * other scope types this is the <em>variableScope</em> value of the\n    * parent scope.\n    * @member {Scope} Scope#variableScope\n    */\n    this.variableScope = this.type === \"global\" || this.type === \"function\" || this.type === \"module\" ? this : upperScope.variableScope;\n\n    /**\n    * Whether this scope is created by a FunctionExpression.\n    * @member {boolean} Scope#functionExpressionScope\n    */\n    this.functionExpressionScope = false;\n\n    /**\n    * Whether this is a scope that contains an 'eval()' invocation.\n    * @member {boolean} Scope#directCallToEvalScope\n    */\n    this.directCallToEvalScope = false;\n\n    /**\n    * @member {boolean} Scope#thisFound\n    */\n    this.thisFound = false;\n    this.__left = [];\n\n    /**\n    * Reference to the parent {@link Scope|scope}.\n    * @member {Scope} Scope#upper\n    */\n    this.upper = upperScope;\n\n    /**\n    * Whether 'use strict' is in effect in this scope.\n    * @member {boolean} Scope#isStrict\n    */\n    this.isStrict = isStrictScope(this, block, isMethodDefinition, scopeManager.__useDirective());\n\n    /**\n    * List of nested {@link Scope}s.\n    * @member {Scope[]} Scope#childScopes\n    */\n    this.childScopes = [];\n    if (this.upper) {\n      this.upper.childScopes.push(this);\n    }\n    this.__declaredVariables = scopeManager.__declaredVariables;\n    registerScope(scopeManager, this);\n  }\n  _createClass(Scope, [{\n    key: \"__shouldStaticallyClose\",\n    value: function __shouldStaticallyClose(scopeManager) {\n      return !this.dynamic || scopeManager.__isOptimistic();\n    }\n  }, {\n    key: \"__shouldStaticallyCloseForGlobal\",\n    value: function __shouldStaticallyCloseForGlobal(ref) {\n      // On global scope, let/const/class declarations should be resolved statically.\n      var name = ref.identifier.name;\n      if (!this.set.has(name)) {\n        return false;\n      }\n      var variable = this.set.get(name);\n      var defs = variable.defs;\n      return defs.length > 0 && defs.every(shouldBeStatically);\n    }\n  }, {\n    key: \"__staticCloseRef\",\n    value: function __staticCloseRef(ref) {\n      if (!this.__resolve(ref)) {\n        this.__delegateToUpperScope(ref);\n      }\n    }\n  }, {\n    key: \"__dynamicCloseRef\",\n    value: function __dynamicCloseRef(ref) {\n      // notify all names are through to global\n      var current = this;\n      do {\n        current.through.push(ref);\n        current = current.upper;\n      } while (current);\n    }\n  }, {\n    key: \"__globalCloseRef\",\n    value: function __globalCloseRef(ref) {\n      // let/const/class declarations should be resolved statically.\n      // others should be resolved dynamically.\n      if (this.__shouldStaticallyCloseForGlobal(ref)) {\n        this.__staticCloseRef(ref);\n      } else {\n        this.__dynamicCloseRef(ref);\n      }\n    }\n  }, {\n    key: \"__close\",\n    value: function __close(scopeManager) {\n      var closeRef;\n      if (this.__shouldStaticallyClose(scopeManager)) {\n        closeRef = this.__staticCloseRef;\n      } else if (this.type !== \"global\") {\n        closeRef = this.__dynamicCloseRef;\n      } else {\n        closeRef = this.__globalCloseRef;\n      }\n\n      // Try Resolving all references in this scope.\n      for (var i = 0, iz = this.__left.length; i < iz; ++i) {\n        var ref = this.__left[i];\n        closeRef.call(this, ref);\n      }\n      this.__left = null;\n      return this.upper;\n    }\n\n    // To override by function scopes.\n    // References in default parameters isn't resolved to variables which are in their function body.\n  }, {\n    key: \"__isValidResolution\",\n    value: function __isValidResolution(ref, variable) {\n      // eslint-disable-line class-methods-use-this, no-unused-vars\n      return true;\n    }\n  }, {\n    key: \"__resolve\",\n    value: function __resolve(ref) {\n      var name = ref.identifier.name;\n      if (!this.set.has(name)) {\n        return false;\n      }\n      var variable = this.set.get(name);\n      if (!this.__isValidResolution(ref, variable)) {\n        return false;\n      }\n      variable.references.push(ref);\n      variable.stack = variable.stack && ref.from.variableScope === this.variableScope;\n      if (ref.tainted) {\n        variable.tainted = true;\n        this.taints.set(variable.name, true);\n      }\n      ref.resolved = variable;\n      return true;\n    }\n  }, {\n    key: \"__delegateToUpperScope\",\n    value: function __delegateToUpperScope(ref) {\n      if (this.upper) {\n        this.upper.__left.push(ref);\n      }\n      this.through.push(ref);\n    }\n  }, {\n    key: \"__addDeclaredVariablesOfNode\",\n    value: function __addDeclaredVariablesOfNode(variable, node) {\n      if (node === null || node === undefined) {\n        return;\n      }\n      var variables = this.__declaredVariables.get(node);\n      if (variables === null || variables === undefined) {\n        variables = [];\n        this.__declaredVariables.set(node, variables);\n      }\n      if (variables.indexOf(variable) === -1) {\n        variables.push(variable);\n      }\n    }\n  }, {\n    key: \"__defineGeneric\",\n    value: function __defineGeneric(name, set, variables, node, def) {\n      var variable;\n      variable = set.get(name);\n      if (!variable) {\n        variable = new Variable(name, this);\n        set.set(name, variable);\n        variables.push(variable);\n      }\n      if (def) {\n        variable.defs.push(def);\n        this.__addDeclaredVariablesOfNode(variable, def.node);\n        this.__addDeclaredVariablesOfNode(variable, def.parent);\n      }\n      if (node) {\n        variable.identifiers.push(node);\n      }\n    }\n  }, {\n    key: \"__define\",\n    value: function __define(node, def) {\n      if (node && node.type === Syntax.Identifier) {\n        this.__defineGeneric(node.name, this.set, this.variables, node, def);\n      }\n    }\n  }, {\n    key: \"__referencing\",\n    value: function __referencing(node, assign, writeExpr, maybeImplicitGlobal, partial, init) {\n      // because Array element may be null\n      if (!node || node.type !== Syntax.Identifier) {\n        return;\n      }\n\n      // Specially handle like `this`.\n      if (node.name === \"super\") {\n        return;\n      }\n      var ref = new Reference(node, this, assign || Reference.READ, writeExpr, maybeImplicitGlobal, !!partial, !!init);\n      this.references.push(ref);\n      this.__left.push(ref);\n    }\n  }, {\n    key: \"__detectEval\",\n    value: function __detectEval() {\n      var current = this;\n      this.directCallToEvalScope = true;\n      do {\n        current.dynamic = true;\n        current = current.upper;\n      } while (current);\n    }\n  }, {\n    key: \"__detectThis\",\n    value: function __detectThis() {\n      this.thisFound = true;\n    }\n  }, {\n    key: \"__isClosed\",\n    value: function __isClosed() {\n      return this.__left === null;\n    }\n\n    /**\n     * returns resolved {Reference}\n     * @method Scope#resolve\n     * @param {Espree.Identifier} ident - identifier to be resolved.\n     * @returns {Reference} reference\n     */\n  }, {\n    key: \"resolve\",\n    value: function resolve(ident) {\n      var ref, i, iz;\n      assert(this.__isClosed(), \"Scope should be closed.\");\n      assert(ident.type === Syntax.Identifier, \"Target should be identifier.\");\n      for (i = 0, iz = this.references.length; i < iz; ++i) {\n        ref = this.references[i];\n        if (ref.identifier === ident) {\n          return ref;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * returns this scope is static\n     * @method Scope#isStatic\n     * @returns {boolean} static\n     */\n  }, {\n    key: \"isStatic\",\n    value: function isStatic() {\n      return !this.dynamic;\n    }\n\n    /**\n     * returns this scope has materialized arguments\n     * @method Scope#isArgumentsMaterialized\n     * @returns {boolean} arguemnts materialized\n     */\n  }, {\n    key: \"isArgumentsMaterialized\",\n    value: function isArgumentsMaterialized() {\n      // eslint-disable-line class-methods-use-this\n      return true;\n    }\n\n    /**\n     * returns this scope has materialized `this` reference\n     * @method Scope#isThisMaterialized\n     * @returns {boolean} this materialized\n     */\n  }, {\n    key: \"isThisMaterialized\",\n    value: function isThisMaterialized() {\n      // eslint-disable-line class-methods-use-this\n      return true;\n    }\n  }, {\n    key: \"isUsedName\",\n    value: function isUsedName(name) {\n      if (this.set.has(name)) {\n        return true;\n      }\n      for (var i = 0, iz = this.through.length; i < iz; ++i) {\n        if (this.through[i].identifier.name === name) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }]);\n  return Scope;\n}();\nvar GlobalScope = /*#__PURE__*/function (_Scope) {\n  _inherits(GlobalScope, _Scope);\n  var _super = _createSuper(GlobalScope);\n  function GlobalScope(scopeManager, block) {\n    var _this;\n    _classCallCheck(this, GlobalScope);\n    _this = _super.call(this, scopeManager, \"global\", null, block, false);\n    _this.implicit = {\n      set: new Map(),\n      variables: [],\n      /**\n      * List of {@link Reference}s that are left to be resolved (i.e. which\n      * need to be linked to the variable they refer to).\n      * @member {Reference[]} Scope#implicit#left\n      */\n      left: []\n    };\n    return _this;\n  }\n  _createClass(GlobalScope, [{\n    key: \"__close\",\n    value: function __close(scopeManager) {\n      var implicit = [];\n      for (var i = 0, iz = this.__left.length; i < iz; ++i) {\n        var ref = this.__left[i];\n        if (ref.__maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {\n          implicit.push(ref.__maybeImplicitGlobal);\n        }\n      }\n\n      // create an implicit global variable from assignment expression\n      for (var _i2 = 0, _iz2 = implicit.length; _i2 < _iz2; ++_i2) {\n        var info = implicit[_i2];\n        this.__defineImplicit(info.pattern, new Definition(Variable.ImplicitGlobalVariable, info.pattern, info.node, null, null, null));\n      }\n      this.implicit.left = this.__left;\n      return _get(_getPrototypeOf(GlobalScope.prototype), \"__close\", this).call(this, scopeManager);\n    }\n  }, {\n    key: \"__defineImplicit\",\n    value: function __defineImplicit(node, def) {\n      if (node && node.type === Syntax.Identifier) {\n        this.__defineGeneric(node.name, this.implicit.set, this.implicit.variables, node, def);\n      }\n    }\n  }]);\n  return GlobalScope;\n}(Scope);\nvar ModuleScope = /*#__PURE__*/function (_Scope2) {\n  _inherits(ModuleScope, _Scope2);\n  var _super2 = _createSuper(ModuleScope);\n  function ModuleScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, ModuleScope);\n    return _super2.call(this, scopeManager, \"module\", upperScope, block, false);\n  }\n  return _createClass(ModuleScope);\n}(Scope);\nvar FunctionExpressionNameScope = /*#__PURE__*/function (_Scope3) {\n  _inherits(FunctionExpressionNameScope, _Scope3);\n  var _super3 = _createSuper(FunctionExpressionNameScope);\n  function FunctionExpressionNameScope(scopeManager, upperScope, block) {\n    var _this2;\n    _classCallCheck(this, FunctionExpressionNameScope);\n    _this2 = _super3.call(this, scopeManager, \"function-expression-name\", upperScope, block, false);\n    _this2.__define(block.id, new Definition(Variable.FunctionName, block.id, block, null, null, null));\n    _this2.functionExpressionScope = true;\n    return _this2;\n  }\n  return _createClass(FunctionExpressionNameScope);\n}(Scope);\nvar CatchScope = /*#__PURE__*/function (_Scope4) {\n  _inherits(CatchScope, _Scope4);\n  var _super4 = _createSuper(CatchScope);\n  function CatchScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, CatchScope);\n    return _super4.call(this, scopeManager, \"catch\", upperScope, block, false);\n  }\n  return _createClass(CatchScope);\n}(Scope);\nvar WithScope = /*#__PURE__*/function (_Scope5) {\n  _inherits(WithScope, _Scope5);\n  var _super5 = _createSuper(WithScope);\n  function WithScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, WithScope);\n    return _super5.call(this, scopeManager, \"with\", upperScope, block, false);\n  }\n  _createClass(WithScope, [{\n    key: \"__close\",\n    value: function __close(scopeManager) {\n      if (this.__shouldStaticallyClose(scopeManager)) {\n        return _get(_getPrototypeOf(WithScope.prototype), \"__close\", this).call(this, scopeManager);\n      }\n      for (var i = 0, iz = this.__left.length; i < iz; ++i) {\n        var ref = this.__left[i];\n        ref.tainted = true;\n        this.__delegateToUpperScope(ref);\n      }\n      this.__left = null;\n      return this.upper;\n    }\n  }]);\n  return WithScope;\n}(Scope);\nvar BlockScope = /*#__PURE__*/function (_Scope6) {\n  _inherits(BlockScope, _Scope6);\n  var _super6 = _createSuper(BlockScope);\n  function BlockScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, BlockScope);\n    return _super6.call(this, scopeManager, \"block\", upperScope, block, false);\n  }\n  return _createClass(BlockScope);\n}(Scope);\nvar SwitchScope = /*#__PURE__*/function (_Scope7) {\n  _inherits(SwitchScope, _Scope7);\n  var _super7 = _createSuper(SwitchScope);\n  function SwitchScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, SwitchScope);\n    return _super7.call(this, scopeManager, \"switch\", upperScope, block, false);\n  }\n  return _createClass(SwitchScope);\n}(Scope);\nvar FunctionScope = /*#__PURE__*/function (_Scope8) {\n  _inherits(FunctionScope, _Scope8);\n  var _super8 = _createSuper(FunctionScope);\n  function FunctionScope(scopeManager, upperScope, block, isMethodDefinition) {\n    var _this3;\n    _classCallCheck(this, FunctionScope);\n    _this3 = _super8.call(this, scopeManager, \"function\", upperScope, block, isMethodDefinition);\n\n    // section 9.2.13, FunctionDeclarationInstantiation.\n    // NOTE Arrow functions never have an arguments objects.\n    if (_this3.block.type !== Syntax.ArrowFunctionExpression) {\n      _this3.__defineArguments();\n    }\n    return _this3;\n  }\n  _createClass(FunctionScope, [{\n    key: \"isArgumentsMaterialized\",\n    value: function isArgumentsMaterialized() {\n      // TODO(Constellation)\n      // We can more aggressive on this condition like this.\n      //\n      // function t() {\n      //     // arguments of t is always hidden.\n      //     function arguments() {\n      //     }\n      // }\n      if (this.block.type === Syntax.ArrowFunctionExpression) {\n        return false;\n      }\n      if (!this.isStatic()) {\n        return true;\n      }\n      var variable = this.set.get(\"arguments\");\n      assert(variable, \"Always have arguments variable.\");\n      return variable.tainted || variable.references.length !== 0;\n    }\n  }, {\n    key: \"isThisMaterialized\",\n    value: function isThisMaterialized() {\n      if (!this.isStatic()) {\n        return true;\n      }\n      return this.thisFound;\n    }\n  }, {\n    key: \"__defineArguments\",\n    value: function __defineArguments() {\n      this.__defineGeneric(\"arguments\", this.set, this.variables, null, null);\n      this.taints.set(\"arguments\", true);\n    }\n\n    // References in default parameters isn't resolved to variables which are in their function body.\n    //     const x = 1\n    //     function f(a = x) { // This `x` is resolved to the `x` in the outer scope.\n    //         const x = 2\n    //         console.log(a)\n    //     }\n  }, {\n    key: \"__isValidResolution\",\n    value: function __isValidResolution(ref, variable) {\n      // If `options.nodejsScope` is true, `this.block` becomes a Program node.\n      if (this.block.type === \"Program\") {\n        return true;\n      }\n      var bodyStart = this.block.body.range[0];\n\n      // It's invalid resolution in the following case:\n      return !(variable.scope === this && ref.identifier.range[0] < bodyStart &&\n      // the reference is in the parameter part.\n      variable.defs.every(function (d) {\n        return d.name.range[0] >= bodyStart;\n      }) // the variable is in the body.\n      );\n    }\n  }]);\n  return FunctionScope;\n}(Scope);\nvar ForScope = /*#__PURE__*/function (_Scope9) {\n  _inherits(ForScope, _Scope9);\n  var _super9 = _createSuper(ForScope);\n  function ForScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, ForScope);\n    return _super9.call(this, scopeManager, \"for\", upperScope, block, false);\n  }\n  return _createClass(ForScope);\n}(Scope);\nvar ClassScope = /*#__PURE__*/function (_Scope10) {\n  _inherits(ClassScope, _Scope10);\n  var _super10 = _createSuper(ClassScope);\n  function ClassScope(scopeManager, upperScope, block) {\n    _classCallCheck(this, ClassScope);\n    return _super10.call(this, scopeManager, \"class\", upperScope, block, false);\n  }\n  return _createClass(ClassScope);\n}(Scope);\nmodule.exports = {\n  Scope: Scope,\n  GlobalScope: GlobalScope,\n  ModuleScope: ModuleScope,\n  FunctionExpressionNameScope: FunctionExpressionNameScope,\n  CatchScope: CatchScope,\n  WithScope: WithScope,\n  BlockScope: BlockScope,\n  SwitchScope: SwitchScope,\n  FunctionScope: FunctionScope,\n  ForScope: ForScope,\n  ClassScope: ClassScope\n};\n\n/* vim: set sw=4 ts=4 et tw=80 : */","map":{"version":3,"names":["Syntax","require","Reference","Variable","Definition","assert","isStrictScope","scope","block","isMethodDefinition","useDirective","body","upper","isStrict","type","ArrowFunctionExpression","BlockStatement","Program","i","iz","length","stmt","DirectiveStatement","raw","ExpressionStatement","expr","expression","Literal","value","undefined","registerScope","scopeManager","scopes","push","__nodeToScope","get","set","shouldBeStatically","def","ClassName","parent","kind","Scope","upperScope","Map","taints","dynamic","through","variables","references","variableScope","functionExpressionScope","directCallToEvalScope","thisFound","__left","__useDirective","childScopes","__declaredVariables","__isOptimistic","ref","name","identifier","has","variable","defs","every","__resolve","__delegateToUpperScope","current","__shouldStaticallyCloseForGlobal","__staticCloseRef","__dynamicCloseRef","closeRef","__shouldStaticallyClose","__globalCloseRef","call","__isValidResolution","stack","from","tainted","resolved","node","indexOf","__addDeclaredVariablesOfNode","identifiers","Identifier","__defineGeneric","assign","writeExpr","maybeImplicitGlobal","partial","init","READ","ident","__isClosed","GlobalScope","implicit","left","__maybeImplicitGlobal","info","__defineImplicit","pattern","ImplicitGlobalVariable","ModuleScope","FunctionExpressionNameScope","__define","id","FunctionName","CatchScope","WithScope","BlockScope","SwitchScope","FunctionScope","__defineArguments","isStatic","bodyStart","range","d","ForScope","ClassScope","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/node_modules/eslint-scope/lib/scope.js"],"sourcesContent":["/*\n  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\"use strict\";\n\n/* eslint-disable no-underscore-dangle */\n/* eslint-disable no-undefined */\n\nconst Syntax = require(\"estraverse\").Syntax;\n\nconst Reference = require(\"./reference\");\nconst Variable = require(\"./variable\");\nconst Definition = require(\"./definition\").Definition;\nconst assert = require(\"assert\");\n\n/**\n * Test if scope is struct\n * @param {Scope} scope - scope\n * @param {Block} block - block\n * @param {boolean} isMethodDefinition - is method definiton\n * @param {boolean} useDirective - use directive\n * @returns {boolean} is strict scope\n */\nfunction isStrictScope(scope, block, isMethodDefinition, useDirective) {\n    let body;\n\n    // When upper scope is exists and strict, inner scope is also strict.\n    if (scope.upper && scope.upper.isStrict) {\n        return true;\n    }\n\n    if (isMethodDefinition) {\n        return true;\n    }\n\n    if (scope.type === \"class\" || scope.type === \"module\") {\n        return true;\n    }\n\n    if (scope.type === \"block\" || scope.type === \"switch\") {\n        return false;\n    }\n\n    if (scope.type === \"function\") {\n        if (block.type === Syntax.ArrowFunctionExpression && block.body.type !== Syntax.BlockStatement) {\n            return false;\n        }\n\n        if (block.type === Syntax.Program) {\n            body = block;\n        } else {\n            body = block.body;\n        }\n\n        if (!body) {\n            return false;\n        }\n    } else if (scope.type === \"global\") {\n        body = block;\n    } else {\n        return false;\n    }\n\n    // Search 'use strict' directive.\n    if (useDirective) {\n        for (let i = 0, iz = body.body.length; i < iz; ++i) {\n            const stmt = body.body[i];\n\n            if (stmt.type !== Syntax.DirectiveStatement) {\n                break;\n            }\n            if (stmt.raw === \"\\\"use strict\\\"\" || stmt.raw === \"'use strict'\") {\n                return true;\n            }\n        }\n    } else {\n        for (let i = 0, iz = body.body.length; i < iz; ++i) {\n            const stmt = body.body[i];\n\n            if (stmt.type !== Syntax.ExpressionStatement) {\n                break;\n            }\n            const expr = stmt.expression;\n\n            if (expr.type !== Syntax.Literal || typeof expr.value !== \"string\") {\n                break;\n            }\n            if (expr.raw !== null && expr.raw !== undefined) {\n                if (expr.raw === \"\\\"use strict\\\"\" || expr.raw === \"'use strict'\") {\n                    return true;\n                }\n            } else {\n                if (expr.value === \"use strict\") {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * Register scope\n * @param {ScopeManager} scopeManager - scope manager\n * @param {Scope} scope - scope\n * @returns {void}\n */\nfunction registerScope(scopeManager, scope) {\n    scopeManager.scopes.push(scope);\n\n    const scopes = scopeManager.__nodeToScope.get(scope.block);\n\n    if (scopes) {\n        scopes.push(scope);\n    } else {\n        scopeManager.__nodeToScope.set(scope.block, [scope]);\n    }\n}\n\n/**\n * Should be statically\n * @param {Object} def - def\n * @returns {boolean} should be statically\n */\nfunction shouldBeStatically(def) {\n    return (\n        (def.type === Variable.ClassName) ||\n        (def.type === Variable.Variable && def.parent.kind !== \"var\")\n    );\n}\n\n/**\n * @class Scope\n */\nclass Scope {\n    constructor(scopeManager, type, upperScope, block, isMethodDefinition) {\n\n        /**\n         * One of 'module', 'block', 'switch', 'function', 'catch', 'with', 'function', 'class', 'global'.\n         * @member {String} Scope#type\n         */\n        this.type = type;\n\n         /**\n         * The scoped {@link Variable}s of this scope, as <code>{ Variable.name\n         * : Variable }</code>.\n         * @member {Map} Scope#set\n         */\n        this.set = new Map();\n\n        /**\n         * The tainted variables of this scope, as <code>{ Variable.name :\n         * boolean }</code>.\n         * @member {Map} Scope#taints */\n        this.taints = new Map();\n\n        /**\n         * Generally, through the lexical scoping of JS you can always know\n         * which variable an identifier in the source code refers to. There are\n         * a few exceptions to this rule. With 'global' and 'with' scopes you\n         * can only decide at runtime which variable a reference refers to.\n         * Moreover, if 'eval()' is used in a scope, it might introduce new\n         * bindings in this or its parent scopes.\n         * All those scopes are considered 'dynamic'.\n         * @member {boolean} Scope#dynamic\n         */\n        this.dynamic = this.type === \"global\" || this.type === \"with\";\n\n        /**\n         * A reference to the scope-defining syntax node.\n         * @member {espree.Node} Scope#block\n         */\n        this.block = block;\n\n         /**\n         * The {@link Reference|references} that are not resolved with this scope.\n         * @member {Reference[]} Scope#through\n         */\n        this.through = [];\n\n         /**\n         * The scoped {@link Variable}s of this scope. In the case of a\n         * 'function' scope this includes the automatic argument <em>arguments</em> as\n         * its first element, as well as all further formal arguments.\n         * @member {Variable[]} Scope#variables\n         */\n        this.variables = [];\n\n         /**\n         * Any variable {@link Reference|reference} found in this scope. This\n         * includes occurrences of local variables as well as variables from\n         * parent scopes (including the global scope). For local variables\n         * this also includes defining occurrences (like in a 'var' statement).\n         * In a 'function' scope this does not include the occurrences of the\n         * formal parameter in the parameter list.\n         * @member {Reference[]} Scope#references\n         */\n        this.references = [];\n\n         /**\n         * For 'global' and 'function' scopes, this is a self-reference. For\n         * other scope types this is the <em>variableScope</em> value of the\n         * parent scope.\n         * @member {Scope} Scope#variableScope\n         */\n        this.variableScope =\n            (this.type === \"global\" || this.type === \"function\" || this.type === \"module\") ? this : upperScope.variableScope;\n\n         /**\n         * Whether this scope is created by a FunctionExpression.\n         * @member {boolean} Scope#functionExpressionScope\n         */\n        this.functionExpressionScope = false;\n\n         /**\n         * Whether this is a scope that contains an 'eval()' invocation.\n         * @member {boolean} Scope#directCallToEvalScope\n         */\n        this.directCallToEvalScope = false;\n\n         /**\n         * @member {boolean} Scope#thisFound\n         */\n        this.thisFound = false;\n\n        this.__left = [];\n\n         /**\n         * Reference to the parent {@link Scope|scope}.\n         * @member {Scope} Scope#upper\n         */\n        this.upper = upperScope;\n\n         /**\n         * Whether 'use strict' is in effect in this scope.\n         * @member {boolean} Scope#isStrict\n         */\n        this.isStrict = isStrictScope(this, block, isMethodDefinition, scopeManager.__useDirective());\n\n         /**\n         * List of nested {@link Scope}s.\n         * @member {Scope[]} Scope#childScopes\n         */\n        this.childScopes = [];\n        if (this.upper) {\n            this.upper.childScopes.push(this);\n        }\n\n        this.__declaredVariables = scopeManager.__declaredVariables;\n\n        registerScope(scopeManager, this);\n    }\n\n    __shouldStaticallyClose(scopeManager) {\n        return (!this.dynamic || scopeManager.__isOptimistic());\n    }\n\n    __shouldStaticallyCloseForGlobal(ref) {\n\n        // On global scope, let/const/class declarations should be resolved statically.\n        const name = ref.identifier.name;\n\n        if (!this.set.has(name)) {\n            return false;\n        }\n\n        const variable = this.set.get(name);\n        const defs = variable.defs;\n\n        return defs.length > 0 && defs.every(shouldBeStatically);\n    }\n\n    __staticCloseRef(ref) {\n        if (!this.__resolve(ref)) {\n            this.__delegateToUpperScope(ref);\n        }\n    }\n\n    __dynamicCloseRef(ref) {\n\n        // notify all names are through to global\n        let current = this;\n\n        do {\n            current.through.push(ref);\n            current = current.upper;\n        } while (current);\n    }\n\n    __globalCloseRef(ref) {\n\n        // let/const/class declarations should be resolved statically.\n        // others should be resolved dynamically.\n        if (this.__shouldStaticallyCloseForGlobal(ref)) {\n            this.__staticCloseRef(ref);\n        } else {\n            this.__dynamicCloseRef(ref);\n        }\n    }\n\n    __close(scopeManager) {\n        let closeRef;\n\n        if (this.__shouldStaticallyClose(scopeManager)) {\n            closeRef = this.__staticCloseRef;\n        } else if (this.type !== \"global\") {\n            closeRef = this.__dynamicCloseRef;\n        } else {\n            closeRef = this.__globalCloseRef;\n        }\n\n        // Try Resolving all references in this scope.\n        for (let i = 0, iz = this.__left.length; i < iz; ++i) {\n            const ref = this.__left[i];\n\n            closeRef.call(this, ref);\n        }\n        this.__left = null;\n\n        return this.upper;\n    }\n\n    // To override by function scopes.\n    // References in default parameters isn't resolved to variables which are in their function body.\n    __isValidResolution(ref, variable) { // eslint-disable-line class-methods-use-this, no-unused-vars\n        return true;\n    }\n\n    __resolve(ref) {\n        const name = ref.identifier.name;\n\n        if (!this.set.has(name)) {\n            return false;\n        }\n        const variable = this.set.get(name);\n\n        if (!this.__isValidResolution(ref, variable)) {\n            return false;\n        }\n        variable.references.push(ref);\n        variable.stack = variable.stack && ref.from.variableScope === this.variableScope;\n        if (ref.tainted) {\n            variable.tainted = true;\n            this.taints.set(variable.name, true);\n        }\n        ref.resolved = variable;\n\n        return true;\n    }\n\n    __delegateToUpperScope(ref) {\n        if (this.upper) {\n            this.upper.__left.push(ref);\n        }\n        this.through.push(ref);\n    }\n\n    __addDeclaredVariablesOfNode(variable, node) {\n        if (node === null || node === undefined) {\n            return;\n        }\n\n        let variables = this.__declaredVariables.get(node);\n\n        if (variables === null || variables === undefined) {\n            variables = [];\n            this.__declaredVariables.set(node, variables);\n        }\n        if (variables.indexOf(variable) === -1) {\n            variables.push(variable);\n        }\n    }\n\n    __defineGeneric(name, set, variables, node, def) {\n        let variable;\n\n        variable = set.get(name);\n        if (!variable) {\n            variable = new Variable(name, this);\n            set.set(name, variable);\n            variables.push(variable);\n        }\n\n        if (def) {\n            variable.defs.push(def);\n            this.__addDeclaredVariablesOfNode(variable, def.node);\n            this.__addDeclaredVariablesOfNode(variable, def.parent);\n        }\n        if (node) {\n            variable.identifiers.push(node);\n        }\n    }\n\n    __define(node, def) {\n        if (node && node.type === Syntax.Identifier) {\n            this.__defineGeneric(\n                    node.name,\n                    this.set,\n                    this.variables,\n                    node,\n                    def);\n        }\n    }\n\n    __referencing(node, assign, writeExpr, maybeImplicitGlobal, partial, init) {\n\n        // because Array element may be null\n        if (!node || node.type !== Syntax.Identifier) {\n            return;\n        }\n\n        // Specially handle like `this`.\n        if (node.name === \"super\") {\n            return;\n        }\n\n        const ref = new Reference(node, this, assign || Reference.READ, writeExpr, maybeImplicitGlobal, !!partial, !!init);\n\n        this.references.push(ref);\n        this.__left.push(ref);\n    }\n\n    __detectEval() {\n        let current = this;\n\n        this.directCallToEvalScope = true;\n        do {\n            current.dynamic = true;\n            current = current.upper;\n        } while (current);\n    }\n\n    __detectThis() {\n        this.thisFound = true;\n    }\n\n    __isClosed() {\n        return this.__left === null;\n    }\n\n    /**\n     * returns resolved {Reference}\n     * @method Scope#resolve\n     * @param {Espree.Identifier} ident - identifier to be resolved.\n     * @returns {Reference} reference\n     */\n    resolve(ident) {\n        let ref, i, iz;\n\n        assert(this.__isClosed(), \"Scope should be closed.\");\n        assert(ident.type === Syntax.Identifier, \"Target should be identifier.\");\n        for (i = 0, iz = this.references.length; i < iz; ++i) {\n            ref = this.references[i];\n            if (ref.identifier === ident) {\n                return ref;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * returns this scope is static\n     * @method Scope#isStatic\n     * @returns {boolean} static\n     */\n    isStatic() {\n        return !this.dynamic;\n    }\n\n    /**\n     * returns this scope has materialized arguments\n     * @method Scope#isArgumentsMaterialized\n     * @returns {boolean} arguemnts materialized\n     */\n    isArgumentsMaterialized() { // eslint-disable-line class-methods-use-this\n        return true;\n    }\n\n    /**\n     * returns this scope has materialized `this` reference\n     * @method Scope#isThisMaterialized\n     * @returns {boolean} this materialized\n     */\n    isThisMaterialized() { // eslint-disable-line class-methods-use-this\n        return true;\n    }\n\n    isUsedName(name) {\n        if (this.set.has(name)) {\n            return true;\n        }\n        for (let i = 0, iz = this.through.length; i < iz; ++i) {\n            if (this.through[i].identifier.name === name) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nclass GlobalScope extends Scope {\n    constructor(scopeManager, block) {\n        super(scopeManager, \"global\", null, block, false);\n        this.implicit = {\n            set: new Map(),\n            variables: [],\n\n            /**\n            * List of {@link Reference}s that are left to be resolved (i.e. which\n            * need to be linked to the variable they refer to).\n            * @member {Reference[]} Scope#implicit#left\n            */\n            left: []\n        };\n    }\n\n    __close(scopeManager) {\n        const implicit = [];\n\n        for (let i = 0, iz = this.__left.length; i < iz; ++i) {\n            const ref = this.__left[i];\n\n            if (ref.__maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {\n                implicit.push(ref.__maybeImplicitGlobal);\n            }\n        }\n\n        // create an implicit global variable from assignment expression\n        for (let i = 0, iz = implicit.length; i < iz; ++i) {\n            const info = implicit[i];\n\n            this.__defineImplicit(info.pattern,\n                    new Definition(\n                        Variable.ImplicitGlobalVariable,\n                        info.pattern,\n                        info.node,\n                        null,\n                        null,\n                        null\n                    ));\n\n        }\n\n        this.implicit.left = this.__left;\n\n        return super.__close(scopeManager);\n    }\n\n    __defineImplicit(node, def) {\n        if (node && node.type === Syntax.Identifier) {\n            this.__defineGeneric(\n                    node.name,\n                    this.implicit.set,\n                    this.implicit.variables,\n                    node,\n                    def);\n        }\n    }\n}\n\nclass ModuleScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"module\", upperScope, block, false);\n    }\n}\n\nclass FunctionExpressionNameScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"function-expression-name\", upperScope, block, false);\n        this.__define(block.id,\n                new Definition(\n                    Variable.FunctionName,\n                    block.id,\n                    block,\n                    null,\n                    null,\n                    null\n                ));\n        this.functionExpressionScope = true;\n    }\n}\n\nclass CatchScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"catch\", upperScope, block, false);\n    }\n}\n\nclass WithScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"with\", upperScope, block, false);\n    }\n\n    __close(scopeManager) {\n        if (this.__shouldStaticallyClose(scopeManager)) {\n            return super.__close(scopeManager);\n        }\n\n        for (let i = 0, iz = this.__left.length; i < iz; ++i) {\n            const ref = this.__left[i];\n\n            ref.tainted = true;\n            this.__delegateToUpperScope(ref);\n        }\n        this.__left = null;\n\n        return this.upper;\n    }\n}\n\nclass BlockScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"block\", upperScope, block, false);\n    }\n}\n\nclass SwitchScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"switch\", upperScope, block, false);\n    }\n}\n\nclass FunctionScope extends Scope {\n    constructor(scopeManager, upperScope, block, isMethodDefinition) {\n        super(scopeManager, \"function\", upperScope, block, isMethodDefinition);\n\n        // section 9.2.13, FunctionDeclarationInstantiation.\n        // NOTE Arrow functions never have an arguments objects.\n        if (this.block.type !== Syntax.ArrowFunctionExpression) {\n            this.__defineArguments();\n        }\n    }\n\n    isArgumentsMaterialized() {\n\n        // TODO(Constellation)\n        // We can more aggressive on this condition like this.\n        //\n        // function t() {\n        //     // arguments of t is always hidden.\n        //     function arguments() {\n        //     }\n        // }\n        if (this.block.type === Syntax.ArrowFunctionExpression) {\n            return false;\n        }\n\n        if (!this.isStatic()) {\n            return true;\n        }\n\n        const variable = this.set.get(\"arguments\");\n\n        assert(variable, \"Always have arguments variable.\");\n        return variable.tainted || variable.references.length !== 0;\n    }\n\n    isThisMaterialized() {\n        if (!this.isStatic()) {\n            return true;\n        }\n        return this.thisFound;\n    }\n\n    __defineArguments() {\n        this.__defineGeneric(\n                \"arguments\",\n                this.set,\n                this.variables,\n                null,\n                null);\n        this.taints.set(\"arguments\", true);\n    }\n\n    // References in default parameters isn't resolved to variables which are in their function body.\n    //     const x = 1\n    //     function f(a = x) { // This `x` is resolved to the `x` in the outer scope.\n    //         const x = 2\n    //         console.log(a)\n    //     }\n    __isValidResolution(ref, variable) {\n\n        // If `options.nodejsScope` is true, `this.block` becomes a Program node.\n        if (this.block.type === \"Program\") {\n            return true;\n        }\n\n        const bodyStart = this.block.body.range[0];\n\n        // It's invalid resolution in the following case:\n        return !(\n            variable.scope === this &&\n            ref.identifier.range[0] < bodyStart &&                 // the reference is in the parameter part.\n            variable.defs.every(d => d.name.range[0] >= bodyStart) // the variable is in the body.\n        );\n    }\n}\n\nclass ForScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"for\", upperScope, block, false);\n    }\n}\n\nclass ClassScope extends Scope {\n    constructor(scopeManager, upperScope, block) {\n        super(scopeManager, \"class\", upperScope, block, false);\n    }\n}\n\nmodule.exports = {\n    Scope,\n    GlobalScope,\n    ModuleScope,\n    FunctionExpressionNameScope,\n    CatchScope,\n    WithScope,\n    BlockScope,\n    SwitchScope,\n    FunctionScope,\n    ForScope,\n    ClassScope\n};\n\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAMA,MAAM,GAAGC,OAAO,CAAC,YAAY,CAAC,CAACD,MAAM;AAE3C,IAAME,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,IAAME,QAAQ,GAAGF,OAAO,CAAC,YAAY,CAAC;AACtC,IAAMG,UAAU,GAAGH,OAAO,CAAC,cAAc,CAAC,CAACG,UAAU;AACrD,IAAMC,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,aAAa,CAACC,KAAK,EAAEC,KAAK,EAAEC,kBAAkB,EAAEC,YAAY,EAAE;EACnE,IAAIC,IAAI;;EAER;EACA,IAAIJ,KAAK,CAACK,KAAK,IAAIL,KAAK,CAACK,KAAK,CAACC,QAAQ,EAAE;IACrC,OAAO,IAAI;EACf;EAEA,IAAIJ,kBAAkB,EAAE;IACpB,OAAO,IAAI;EACf;EAEA,IAAIF,KAAK,CAACO,IAAI,KAAK,OAAO,IAAIP,KAAK,CAACO,IAAI,KAAK,QAAQ,EAAE;IACnD,OAAO,IAAI;EACf;EAEA,IAAIP,KAAK,CAACO,IAAI,KAAK,OAAO,IAAIP,KAAK,CAACO,IAAI,KAAK,QAAQ,EAAE;IACnD,OAAO,KAAK;EAChB;EAEA,IAAIP,KAAK,CAACO,IAAI,KAAK,UAAU,EAAE;IAC3B,IAAIN,KAAK,CAACM,IAAI,KAAKd,MAAM,CAACe,uBAAuB,IAAIP,KAAK,CAACG,IAAI,CAACG,IAAI,KAAKd,MAAM,CAACgB,cAAc,EAAE;MAC5F,OAAO,KAAK;IAChB;IAEA,IAAIR,KAAK,CAACM,IAAI,KAAKd,MAAM,CAACiB,OAAO,EAAE;MAC/BN,IAAI,GAAGH,KAAK;IAChB,CAAC,MAAM;MACHG,IAAI,GAAGH,KAAK,CAACG,IAAI;IACrB;IAEA,IAAI,CAACA,IAAI,EAAE;MACP,OAAO,KAAK;IAChB;EACJ,CAAC,MAAM,IAAIJ,KAAK,CAACO,IAAI,KAAK,QAAQ,EAAE;IAChCH,IAAI,GAAGH,KAAK;EAChB,CAAC,MAAM;IACH,OAAO,KAAK;EAChB;;EAEA;EACA,IAAIE,YAAY,EAAE;IACd,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGR,IAAI,CAACA,IAAI,CAACS,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAChD,IAAMG,IAAI,GAAGV,IAAI,CAACA,IAAI,CAACO,CAAC,CAAC;MAEzB,IAAIG,IAAI,CAACP,IAAI,KAAKd,MAAM,CAACsB,kBAAkB,EAAE;QACzC;MACJ;MACA,IAAID,IAAI,CAACE,GAAG,KAAK,gBAAgB,IAAIF,IAAI,CAACE,GAAG,KAAK,cAAc,EAAE;QAC9D,OAAO,IAAI;MACf;IACJ;EACJ,CAAC,MAAM;IACH,KAAK,IAAIL,EAAC,GAAG,CAAC,EAAEC,GAAE,GAAGR,IAAI,CAACA,IAAI,CAACS,MAAM,EAAEF,EAAC,GAAGC,GAAE,EAAE,EAAED,EAAC,EAAE;MAChD,IAAMG,KAAI,GAAGV,IAAI,CAACA,IAAI,CAACO,EAAC,CAAC;MAEzB,IAAIG,KAAI,CAACP,IAAI,KAAKd,MAAM,CAACwB,mBAAmB,EAAE;QAC1C;MACJ;MACA,IAAMC,IAAI,GAAGJ,KAAI,CAACK,UAAU;MAE5B,IAAID,IAAI,CAACX,IAAI,KAAKd,MAAM,CAAC2B,OAAO,IAAI,OAAOF,IAAI,CAACG,KAAK,KAAK,QAAQ,EAAE;QAChE;MACJ;MACA,IAAIH,IAAI,CAACF,GAAG,KAAK,IAAI,IAAIE,IAAI,CAACF,GAAG,KAAKM,SAAS,EAAE;QAC7C,IAAIJ,IAAI,CAACF,GAAG,KAAK,gBAAgB,IAAIE,IAAI,CAACF,GAAG,KAAK,cAAc,EAAE;UAC9D,OAAO,IAAI;QACf;MACJ,CAAC,MAAM;QACH,IAAIE,IAAI,CAACG,KAAK,KAAK,YAAY,EAAE;UAC7B,OAAO,IAAI;QACf;MACJ;IACJ;EACJ;EACA,OAAO,KAAK;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAa,CAACC,YAAY,EAAExB,KAAK,EAAE;EACxCwB,YAAY,CAACC,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC;EAE/B,IAAMyB,MAAM,GAAGD,YAAY,CAACG,aAAa,CAACC,GAAG,CAAC5B,KAAK,CAACC,KAAK,CAAC;EAE1D,IAAIwB,MAAM,EAAE;IACRA,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC;EACtB,CAAC,MAAM;IACHwB,YAAY,CAACG,aAAa,CAACE,GAAG,CAAC7B,KAAK,CAACC,KAAK,EAAE,CAACD,KAAK,CAAC,CAAC;EACxD;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS8B,kBAAkB,CAACC,GAAG,EAAE;EAC7B,OACKA,GAAG,CAACxB,IAAI,KAAKX,QAAQ,CAACoC,SAAS,IAC/BD,GAAG,CAACxB,IAAI,KAAKX,QAAQ,CAACA,QAAQ,IAAImC,GAAG,CAACE,MAAM,CAACC,IAAI,KAAK,KAAM;AAErE;;AAEA;AACA;AACA;AAFA,IAGMC,KAAK;EACP,eAAYX,YAAY,EAAEjB,IAAI,EAAE6B,UAAU,EAAEnC,KAAK,EAAEC,kBAAkB,EAAE;IAAA;IAEnE;AACR;AACA;AACA;IACQ,IAAI,CAACK,IAAI,GAAGA,IAAI;;IAEf;AACT;AACA;AACA;AACA;IACQ,IAAI,CAACsB,GAAG,GAAG,IAAIQ,GAAG,EAAE;;IAEpB;AACR;AACA;AACA;IACQ,IAAI,CAACC,MAAM,GAAG,IAAID,GAAG,EAAE;;IAEvB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACE,OAAO,GAAG,IAAI,CAAChC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAACA,IAAI,KAAK,MAAM;;IAE7D;AACR;AACA;AACA;IACQ,IAAI,CAACN,KAAK,GAAGA,KAAK;;IAEjB;AACT;AACA;AACA;IACQ,IAAI,CAACuC,OAAO,GAAG,EAAE;;IAEhB;AACT;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,EAAE;;IAElB;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,UAAU,GAAG,EAAE;;IAEnB;AACT;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,aAAa,GACb,IAAI,CAACpC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAACA,IAAI,KAAK,UAAU,IAAI,IAAI,CAACA,IAAI,KAAK,QAAQ,GAAI,IAAI,GAAG6B,UAAU,CAACO,aAAa;;IAEnH;AACT;AACA;AACA;IACQ,IAAI,CAACC,uBAAuB,GAAG,KAAK;;IAEnC;AACT;AACA;AACA;IACQ,IAAI,CAACC,qBAAqB,GAAG,KAAK;;IAEjC;AACT;AACA;IACQ,IAAI,CAACC,SAAS,GAAG,KAAK;IAEtB,IAAI,CAACC,MAAM,GAAG,EAAE;;IAEf;AACT;AACA;AACA;IACQ,IAAI,CAAC1C,KAAK,GAAG+B,UAAU;;IAEtB;AACT;AACA;AACA;IACQ,IAAI,CAAC9B,QAAQ,GAAGP,aAAa,CAAC,IAAI,EAAEE,KAAK,EAAEC,kBAAkB,EAAEsB,YAAY,CAACwB,cAAc,EAAE,CAAC;;IAE5F;AACT;AACA;AACA;IACQ,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,IAAI,CAAC5C,KAAK,EAAE;MACZ,IAAI,CAACA,KAAK,CAAC4C,WAAW,CAACvB,IAAI,CAAC,IAAI,CAAC;IACrC;IAEA,IAAI,CAACwB,mBAAmB,GAAG1B,YAAY,CAAC0B,mBAAmB;IAE3D3B,aAAa,CAACC,YAAY,EAAE,IAAI,CAAC;EACrC;EAAC;IAAA;IAAA,OAED,iCAAwBA,YAAY,EAAE;MAClC,OAAQ,CAAC,IAAI,CAACe,OAAO,IAAIf,YAAY,CAAC2B,cAAc,EAAE;IAC1D;EAAC;IAAA;IAAA,OAED,0CAAiCC,GAAG,EAAE;MAElC;MACA,IAAMC,IAAI,GAAGD,GAAG,CAACE,UAAU,CAACD,IAAI;MAEhC,IAAI,CAAC,IAAI,CAACxB,GAAG,CAAC0B,GAAG,CAACF,IAAI,CAAC,EAAE;QACrB,OAAO,KAAK;MAChB;MAEA,IAAMG,QAAQ,GAAG,IAAI,CAAC3B,GAAG,CAACD,GAAG,CAACyB,IAAI,CAAC;MACnC,IAAMI,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAE1B,OAAOA,IAAI,CAAC5C,MAAM,GAAG,CAAC,IAAI4C,IAAI,CAACC,KAAK,CAAC5B,kBAAkB,CAAC;IAC5D;EAAC;IAAA;IAAA,OAED,0BAAiBsB,GAAG,EAAE;MAClB,IAAI,CAAC,IAAI,CAACO,SAAS,CAACP,GAAG,CAAC,EAAE;QACtB,IAAI,CAACQ,sBAAsB,CAACR,GAAG,CAAC;MACpC;IACJ;EAAC;IAAA;IAAA,OAED,2BAAkBA,GAAG,EAAE;MAEnB;MACA,IAAIS,OAAO,GAAG,IAAI;MAElB,GAAG;QACCA,OAAO,CAACrB,OAAO,CAACd,IAAI,CAAC0B,GAAG,CAAC;QACzBS,OAAO,GAAGA,OAAO,CAACxD,KAAK;MAC3B,CAAC,QAAQwD,OAAO;IACpB;EAAC;IAAA;IAAA,OAED,0BAAiBT,GAAG,EAAE;MAElB;MACA;MACA,IAAI,IAAI,CAACU,gCAAgC,CAACV,GAAG,CAAC,EAAE;QAC5C,IAAI,CAACW,gBAAgB,CAACX,GAAG,CAAC;MAC9B,CAAC,MAAM;QACH,IAAI,CAACY,iBAAiB,CAACZ,GAAG,CAAC;MAC/B;IACJ;EAAC;IAAA;IAAA,OAED,iBAAQ5B,YAAY,EAAE;MAClB,IAAIyC,QAAQ;MAEZ,IAAI,IAAI,CAACC,uBAAuB,CAAC1C,YAAY,CAAC,EAAE;QAC5CyC,QAAQ,GAAG,IAAI,CAACF,gBAAgB;MACpC,CAAC,MAAM,IAAI,IAAI,CAACxD,IAAI,KAAK,QAAQ,EAAE;QAC/B0D,QAAQ,GAAG,IAAI,CAACD,iBAAiB;MACrC,CAAC,MAAM;QACHC,QAAQ,GAAG,IAAI,CAACE,gBAAgB;MACpC;;MAEA;MACA,KAAK,IAAIxD,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACmC,MAAM,CAAClC,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QAClD,IAAMyC,GAAG,GAAG,IAAI,CAACL,MAAM,CAACpC,CAAC,CAAC;QAE1BsD,QAAQ,CAACG,IAAI,CAAC,IAAI,EAAEhB,GAAG,CAAC;MAC5B;MACA,IAAI,CAACL,MAAM,GAAG,IAAI;MAElB,OAAO,IAAI,CAAC1C,KAAK;IACrB;;IAEA;IACA;EAAA;IAAA;IAAA,OACA,6BAAoB+C,GAAG,EAAEI,QAAQ,EAAE;MAAE;MACjC,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAED,mBAAUJ,GAAG,EAAE;MACX,IAAMC,IAAI,GAAGD,GAAG,CAACE,UAAU,CAACD,IAAI;MAEhC,IAAI,CAAC,IAAI,CAACxB,GAAG,CAAC0B,GAAG,CAACF,IAAI,CAAC,EAAE;QACrB,OAAO,KAAK;MAChB;MACA,IAAMG,QAAQ,GAAG,IAAI,CAAC3B,GAAG,CAACD,GAAG,CAACyB,IAAI,CAAC;MAEnC,IAAI,CAAC,IAAI,CAACgB,mBAAmB,CAACjB,GAAG,EAAEI,QAAQ,CAAC,EAAE;QAC1C,OAAO,KAAK;MAChB;MACAA,QAAQ,CAACd,UAAU,CAAChB,IAAI,CAAC0B,GAAG,CAAC;MAC7BI,QAAQ,CAACc,KAAK,GAAGd,QAAQ,CAACc,KAAK,IAAIlB,GAAG,CAACmB,IAAI,CAAC5B,aAAa,KAAK,IAAI,CAACA,aAAa;MAChF,IAAIS,GAAG,CAACoB,OAAO,EAAE;QACbhB,QAAQ,CAACgB,OAAO,GAAG,IAAI;QACvB,IAAI,CAAClC,MAAM,CAACT,GAAG,CAAC2B,QAAQ,CAACH,IAAI,EAAE,IAAI,CAAC;MACxC;MACAD,GAAG,CAACqB,QAAQ,GAAGjB,QAAQ;MAEvB,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAED,gCAAuBJ,GAAG,EAAE;MACxB,IAAI,IAAI,CAAC/C,KAAK,EAAE;QACZ,IAAI,CAACA,KAAK,CAAC0C,MAAM,CAACrB,IAAI,CAAC0B,GAAG,CAAC;MAC/B;MACA,IAAI,CAACZ,OAAO,CAACd,IAAI,CAAC0B,GAAG,CAAC;IAC1B;EAAC;IAAA;IAAA,OAED,sCAA6BI,QAAQ,EAAEkB,IAAI,EAAE;MACzC,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAKpD,SAAS,EAAE;QACrC;MACJ;MAEA,IAAImB,SAAS,GAAG,IAAI,CAACS,mBAAmB,CAACtB,GAAG,CAAC8C,IAAI,CAAC;MAElD,IAAIjC,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKnB,SAAS,EAAE;QAC/CmB,SAAS,GAAG,EAAE;QACd,IAAI,CAACS,mBAAmB,CAACrB,GAAG,CAAC6C,IAAI,EAAEjC,SAAS,CAAC;MACjD;MACA,IAAIA,SAAS,CAACkC,OAAO,CAACnB,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;QACpCf,SAAS,CAACf,IAAI,CAAC8B,QAAQ,CAAC;MAC5B;IACJ;EAAC;IAAA;IAAA,OAED,yBAAgBH,IAAI,EAAExB,GAAG,EAAEY,SAAS,EAAEiC,IAAI,EAAE3C,GAAG,EAAE;MAC7C,IAAIyB,QAAQ;MAEZA,QAAQ,GAAG3B,GAAG,CAACD,GAAG,CAACyB,IAAI,CAAC;MACxB,IAAI,CAACG,QAAQ,EAAE;QACXA,QAAQ,GAAG,IAAI5D,QAAQ,CAACyD,IAAI,EAAE,IAAI,CAAC;QACnCxB,GAAG,CAACA,GAAG,CAACwB,IAAI,EAAEG,QAAQ,CAAC;QACvBf,SAAS,CAACf,IAAI,CAAC8B,QAAQ,CAAC;MAC5B;MAEA,IAAIzB,GAAG,EAAE;QACLyB,QAAQ,CAACC,IAAI,CAAC/B,IAAI,CAACK,GAAG,CAAC;QACvB,IAAI,CAAC6C,4BAA4B,CAACpB,QAAQ,EAAEzB,GAAG,CAAC2C,IAAI,CAAC;QACrD,IAAI,CAACE,4BAA4B,CAACpB,QAAQ,EAAEzB,GAAG,CAACE,MAAM,CAAC;MAC3D;MACA,IAAIyC,IAAI,EAAE;QACNlB,QAAQ,CAACqB,WAAW,CAACnD,IAAI,CAACgD,IAAI,CAAC;MACnC;IACJ;EAAC;IAAA;IAAA,OAED,kBAASA,IAAI,EAAE3C,GAAG,EAAE;MAChB,IAAI2C,IAAI,IAAIA,IAAI,CAACnE,IAAI,KAAKd,MAAM,CAACqF,UAAU,EAAE;QACzC,IAAI,CAACC,eAAe,CACZL,IAAI,CAACrB,IAAI,EACT,IAAI,CAACxB,GAAG,EACR,IAAI,CAACY,SAAS,EACdiC,IAAI,EACJ3C,GAAG,CAAC;MAChB;IACJ;EAAC;IAAA;IAAA,OAED,uBAAc2C,IAAI,EAAEM,MAAM,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,OAAO,EAAEC,IAAI,EAAE;MAEvE;MACA,IAAI,CAACV,IAAI,IAAIA,IAAI,CAACnE,IAAI,KAAKd,MAAM,CAACqF,UAAU,EAAE;QAC1C;MACJ;;MAEA;MACA,IAAIJ,IAAI,CAACrB,IAAI,KAAK,OAAO,EAAE;QACvB;MACJ;MAEA,IAAMD,GAAG,GAAG,IAAIzD,SAAS,CAAC+E,IAAI,EAAE,IAAI,EAAEM,MAAM,IAAIrF,SAAS,CAAC0F,IAAI,EAAEJ,SAAS,EAAEC,mBAAmB,EAAE,CAAC,CAACC,OAAO,EAAE,CAAC,CAACC,IAAI,CAAC;MAElH,IAAI,CAAC1C,UAAU,CAAChB,IAAI,CAAC0B,GAAG,CAAC;MACzB,IAAI,CAACL,MAAM,CAACrB,IAAI,CAAC0B,GAAG,CAAC;IACzB;EAAC;IAAA;IAAA,OAED,wBAAe;MACX,IAAIS,OAAO,GAAG,IAAI;MAElB,IAAI,CAAChB,qBAAqB,GAAG,IAAI;MACjC,GAAG;QACCgB,OAAO,CAACtB,OAAO,GAAG,IAAI;QACtBsB,OAAO,GAAGA,OAAO,CAACxD,KAAK;MAC3B,CAAC,QAAQwD,OAAO;IACpB;EAAC;IAAA;IAAA,OAED,wBAAe;MACX,IAAI,CAACf,SAAS,GAAG,IAAI;IACzB;EAAC;IAAA;IAAA,OAED,sBAAa;MACT,OAAO,IAAI,CAACC,MAAM,KAAK,IAAI;IAC/B;;IAEA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,iBAAQuC,KAAK,EAAE;MACX,IAAIlC,GAAG,EAAEzC,CAAC,EAAEC,EAAE;MAEdd,MAAM,CAAC,IAAI,CAACyF,UAAU,EAAE,EAAE,yBAAyB,CAAC;MACpDzF,MAAM,CAACwF,KAAK,CAAC/E,IAAI,KAAKd,MAAM,CAACqF,UAAU,EAAE,8BAA8B,CAAC;MACxE,KAAKnE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAAC8B,UAAU,CAAC7B,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QAClDyC,GAAG,GAAG,IAAI,CAACV,UAAU,CAAC/B,CAAC,CAAC;QACxB,IAAIyC,GAAG,CAACE,UAAU,KAAKgC,KAAK,EAAE;UAC1B,OAAOlC,GAAG;QACd;MACJ;MACA,OAAO,IAAI;IACf;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,oBAAW;MACP,OAAO,CAAC,IAAI,CAACb,OAAO;IACxB;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,mCAA0B;MAAE;MACxB,OAAO,IAAI;IACf;;IAEA;AACJ;AACA;AACA;AACA;EAJI;IAAA;IAAA,OAKA,8BAAqB;MAAE;MACnB,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAED,oBAAWc,IAAI,EAAE;MACb,IAAI,IAAI,CAACxB,GAAG,CAAC0B,GAAG,CAACF,IAAI,CAAC,EAAE;QACpB,OAAO,IAAI;MACf;MACA,KAAK,IAAI1C,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAAC4B,OAAO,CAAC3B,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACnD,IAAI,IAAI,CAAC6B,OAAO,CAAC7B,CAAC,CAAC,CAAC2C,UAAU,CAACD,IAAI,KAAKA,IAAI,EAAE;UAC1C,OAAO,IAAI;QACf;MACJ;MACA,OAAO,KAAK;IAChB;EAAC;EAAA;AAAA;AAAA,IAGCmC,WAAW;EAAA;EAAA;EACb,qBAAYhE,YAAY,EAAEvB,KAAK,EAAE;IAAA;IAAA;IAC7B,0BAAMuB,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAEvB,KAAK,EAAE,KAAK;IAChD,MAAKwF,QAAQ,GAAG;MACZ5D,GAAG,EAAE,IAAIQ,GAAG,EAAE;MACdI,SAAS,EAAE,EAAE;MAEb;AACZ;AACA;AACA;AACA;MACYiD,IAAI,EAAE;IACV,CAAC;IAAC;EACN;EAAC;IAAA;IAAA,OAED,iBAAQlE,YAAY,EAAE;MAClB,IAAMiE,QAAQ,GAAG,EAAE;MAEnB,KAAK,IAAI9E,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACmC,MAAM,CAAClC,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QAClD,IAAMyC,GAAG,GAAG,IAAI,CAACL,MAAM,CAACpC,CAAC,CAAC;QAE1B,IAAIyC,GAAG,CAACuC,qBAAqB,IAAI,CAAC,IAAI,CAAC9D,GAAG,CAAC0B,GAAG,CAACH,GAAG,CAACE,UAAU,CAACD,IAAI,CAAC,EAAE;UACjEoC,QAAQ,CAAC/D,IAAI,CAAC0B,GAAG,CAACuC,qBAAqB,CAAC;QAC5C;MACJ;;MAEA;MACA,KAAK,IAAIhF,GAAC,GAAG,CAAC,EAAEC,IAAE,GAAG6E,QAAQ,CAAC5E,MAAM,EAAEF,GAAC,GAAGC,IAAE,EAAE,EAAED,GAAC,EAAE;QAC/C,IAAMiF,IAAI,GAAGH,QAAQ,CAAC9E,GAAC,CAAC;QAExB,IAAI,CAACkF,gBAAgB,CAACD,IAAI,CAACE,OAAO,EAC1B,IAAIjG,UAAU,CACVD,QAAQ,CAACmG,sBAAsB,EAC/BH,IAAI,CAACE,OAAO,EACZF,IAAI,CAAClB,IAAI,EACT,IAAI,EACJ,IAAI,EACJ,IAAI,CACP,CAAC;MAEd;MAEA,IAAI,CAACe,QAAQ,CAACC,IAAI,GAAG,IAAI,CAAC3C,MAAM;MAEhC,gFAAqBvB,YAAY;IACrC;EAAC;IAAA;IAAA,OAED,0BAAiBkD,IAAI,EAAE3C,GAAG,EAAE;MACxB,IAAI2C,IAAI,IAAIA,IAAI,CAACnE,IAAI,KAAKd,MAAM,CAACqF,UAAU,EAAE;QACzC,IAAI,CAACC,eAAe,CACZL,IAAI,CAACrB,IAAI,EACT,IAAI,CAACoC,QAAQ,CAAC5D,GAAG,EACjB,IAAI,CAAC4D,QAAQ,CAAChD,SAAS,EACvBiC,IAAI,EACJ3C,GAAG,CAAC;MAChB;IACJ;EAAC;EAAA;AAAA,EAzDqBI,KAAK;AAAA,IA4DzB6D,WAAW;EAAA;EAAA;EACb,qBAAYxE,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,0BACnCuB,YAAY,EAAE,QAAQ,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EAC1D;EAAC;AAAA,EAHqBkC,KAAK;AAAA,IAMzB8D,2BAA2B;EAAA;EAAA;EAC7B,qCAAYzE,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA;IACzC,4BAAMuB,YAAY,EAAE,0BAA0B,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;IACxE,OAAKiG,QAAQ,CAACjG,KAAK,CAACkG,EAAE,EACd,IAAItG,UAAU,CACVD,QAAQ,CAACwG,YAAY,EACrBnG,KAAK,CAACkG,EAAE,EACRlG,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,IAAI,CACP,CAAC;IACV,OAAK2C,uBAAuB,GAAG,IAAI;IAAC;EACxC;EAAC;AAAA,EAbqCT,KAAK;AAAA,IAgBzCkE,UAAU;EAAA;EAAA;EACZ,oBAAY7E,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,0BACnCuB,YAAY,EAAE,OAAO,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EACzD;EAAC;AAAA,EAHoBkC,KAAK;AAAA,IAMxBmE,SAAS;EAAA;EAAA;EACX,mBAAY9E,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,0BACnCuB,YAAY,EAAE,MAAM,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EACxD;EAAC;IAAA;IAAA,OAED,iBAAQuB,YAAY,EAAE;MAClB,IAAI,IAAI,CAAC0C,uBAAuB,CAAC1C,YAAY,CAAC,EAAE;QAC5C,8EAAqBA,YAAY;MACrC;MAEA,KAAK,IAAIb,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACmC,MAAM,CAAClC,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QAClD,IAAMyC,GAAG,GAAG,IAAI,CAACL,MAAM,CAACpC,CAAC,CAAC;QAE1ByC,GAAG,CAACoB,OAAO,GAAG,IAAI;QAClB,IAAI,CAACZ,sBAAsB,CAACR,GAAG,CAAC;MACpC;MACA,IAAI,CAACL,MAAM,GAAG,IAAI;MAElB,OAAO,IAAI,CAAC1C,KAAK;IACrB;EAAC;EAAA;AAAA,EAnBmB8B,KAAK;AAAA,IAsBvBoE,UAAU;EAAA;EAAA;EACZ,oBAAY/E,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,0BACnCuB,YAAY,EAAE,OAAO,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EACzD;EAAC;AAAA,EAHoBkC,KAAK;AAAA,IAMxBqE,WAAW;EAAA;EAAA;EACb,qBAAYhF,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,0BACnCuB,YAAY,EAAE,QAAQ,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EAC1D;EAAC;AAAA,EAHqBkC,KAAK;AAAA,IAMzBsE,aAAa;EAAA;EAAA;EACf,uBAAYjF,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAEC,kBAAkB,EAAE;IAAA;IAAA;IAC7D,4BAAMsB,YAAY,EAAE,UAAU,EAAEY,UAAU,EAAEnC,KAAK,EAAEC,kBAAkB;;IAErE;IACA;IACA,IAAI,OAAKD,KAAK,CAACM,IAAI,KAAKd,MAAM,CAACe,uBAAuB,EAAE;MACpD,OAAKkG,iBAAiB,EAAE;IAC5B;IAAC;EACL;EAAC;IAAA;IAAA,OAED,mCAA0B;MAEtB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,IAAI,CAACzG,KAAK,CAACM,IAAI,KAAKd,MAAM,CAACe,uBAAuB,EAAE;QACpD,OAAO,KAAK;MAChB;MAEA,IAAI,CAAC,IAAI,CAACmG,QAAQ,EAAE,EAAE;QAClB,OAAO,IAAI;MACf;MAEA,IAAMnD,QAAQ,GAAG,IAAI,CAAC3B,GAAG,CAACD,GAAG,CAAC,WAAW,CAAC;MAE1C9B,MAAM,CAAC0D,QAAQ,EAAE,iCAAiC,CAAC;MACnD,OAAOA,QAAQ,CAACgB,OAAO,IAAIhB,QAAQ,CAACd,UAAU,CAAC7B,MAAM,KAAK,CAAC;IAC/D;EAAC;IAAA;IAAA,OAED,8BAAqB;MACjB,IAAI,CAAC,IAAI,CAAC8F,QAAQ,EAAE,EAAE;QAClB,OAAO,IAAI;MACf;MACA,OAAO,IAAI,CAAC7D,SAAS;IACzB;EAAC;IAAA;IAAA,OAED,6BAAoB;MAChB,IAAI,CAACiC,eAAe,CACZ,WAAW,EACX,IAAI,CAAClD,GAAG,EACR,IAAI,CAACY,SAAS,EACd,IAAI,EACJ,IAAI,CAAC;MACb,IAAI,CAACH,MAAM,CAACT,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;IACtC;;IAEA;IACA;IACA;IACA;IACA;IACA;EAAA;IAAA;IAAA,OACA,6BAAoBuB,GAAG,EAAEI,QAAQ,EAAE;MAE/B;MACA,IAAI,IAAI,CAACvD,KAAK,CAACM,IAAI,KAAK,SAAS,EAAE;QAC/B,OAAO,IAAI;MACf;MAEA,IAAMqG,SAAS,GAAG,IAAI,CAAC3G,KAAK,CAACG,IAAI,CAACyG,KAAK,CAAC,CAAC,CAAC;;MAE1C;MACA,OAAO,EACHrD,QAAQ,CAACxD,KAAK,KAAK,IAAI,IACvBoD,GAAG,CAACE,UAAU,CAACuD,KAAK,CAAC,CAAC,CAAC,GAAGD,SAAS;MAAoB;MACvDpD,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,UAAAoD,CAAC;QAAA,OAAIA,CAAC,CAACzD,IAAI,CAACwD,KAAK,CAAC,CAAC,CAAC,IAAID,SAAS;MAAA,EAAC,CAAC;MAAA,CAC1D;IACL;EAAC;EAAA;AAAA,EAzEuBzE,KAAK;AAAA,IA4E3B4E,QAAQ;EAAA;EAAA;EACV,kBAAYvF,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,0BACnCuB,YAAY,EAAE,KAAK,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EACvD;EAAC;AAAA,EAHkBkC,KAAK;AAAA,IAMtB6E,UAAU;EAAA;EAAA;EACZ,oBAAYxF,YAAY,EAAEY,UAAU,EAAEnC,KAAK,EAAE;IAAA;IAAA,2BACnCuB,YAAY,EAAE,OAAO,EAAEY,UAAU,EAAEnC,KAAK,EAAE,KAAK;EACzD;EAAC;AAAA,EAHoBkC,KAAK;AAM9B8E,MAAM,CAACC,OAAO,GAAG;EACb/E,KAAK,EAALA,KAAK;EACLqD,WAAW,EAAXA,WAAW;EACXQ,WAAW,EAAXA,WAAW;EACXC,2BAA2B,EAA3BA,2BAA2B;EAC3BI,UAAU,EAAVA,UAAU;EACVC,SAAS,EAATA,SAAS;EACTC,UAAU,EAAVA,UAAU;EACVC,WAAW,EAAXA,WAAW;EACXC,aAAa,EAAbA,aAAa;EACbM,QAAQ,EAARA,QAAQ;EACRC,UAAU,EAAVA;AACJ,CAAC;;AAED"},"metadata":{},"sourceType":"script"}