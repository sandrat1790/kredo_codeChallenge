{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar identifierUtils = require(\"./util/identifier\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {Record<number, number>=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\nvar RecordIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {Object} options Options object\n   * @param {boolean=} options.portableIds true, when ids need to be portable\n   */\n  function RecordIdsPlugin(options) {\n    _classCallCheck(this, RecordIdsPlugin);\n    this.options = options || {};\n  }\n\n  /**\n   * @param {Compiler} compiler the Compiler\n   * @returns {void}\n   */\n  _createClass(RecordIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var portableIds = this.options.portableIds;\n      compiler.hooks.compilation.tap(\"RecordIdsPlugin\", function (compilation) {\n        compilation.hooks.recordModules.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Module[]} modules the modules array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (modules, records) {\n          if (!records.modules) records.modules = {};\n          if (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n          if (!records.modules.usedIds) records.modules.usedIds = {};\n          var _iterator = _createForOfIteratorHelper(modules),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              if (typeof _module.id !== \"number\") continue;\n              var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module.identifier(), compilation.cache) : _module.identifier();\n              records.modules.byIdentifier[identifier] = _module.id;\n              records.modules.usedIds[_module.id] = _module.id;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n        compilation.hooks.reviveModules.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Module[]} modules the modules array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (modules, records) {\n          if (!records.modules) return;\n          if (records.modules.byIdentifier) {\n            /** @type {Set<number>} */\n            var usedIds = new Set();\n            var _iterator2 = _createForOfIteratorHelper(modules),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _module2 = _step2.value;\n                if (_module2.id !== null) continue;\n                var identifier = portableIds ? identifierUtils.makePathsRelative(compiler.context, _module2.identifier(), compilation.cache) : _module2.identifier();\n                var id = records.modules.byIdentifier[identifier];\n                if (id === undefined) continue;\n                if (usedIds.has(id)) continue;\n                usedIds.add(id);\n                _module2.id = id;\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n          if (Array.isArray(records.modules.usedIds)) {\n            compilation.usedModuleIds = new Set(records.modules.usedIds);\n          }\n        });\n\n        /**\n         * @param {Module} module the module\n         * @returns {string} the (portable) identifier\n         */\n        var getModuleIdentifier = function getModuleIdentifier(module) {\n          if (portableIds) {\n            return identifierUtils.makePathsRelative(compiler.context, module.identifier(), compilation.cache);\n          }\n          return module.identifier();\n        };\n\n        /**\n         * @param {Chunk} chunk the chunk\n         * @returns {string[]} sources of the chunk\n         */\n        var getChunkSources = function getChunkSources(chunk) {\n          /** @type {string[]} */\n          var sources = [];\n          var _iterator3 = _createForOfIteratorHelper(chunk.groupsIterable),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var chunkGroup = _step3.value;\n              var index = chunkGroup.chunks.indexOf(chunk);\n              if (chunkGroup.name) {\n                sources.push(\"\".concat(index, \" \").concat(chunkGroup.name));\n              } else {\n                var _iterator4 = _createForOfIteratorHelper(chunkGroup.origins),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var origin = _step4.value;\n                    if (origin.module) {\n                      if (origin.request) {\n                        sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(origin.request));\n                      } else if (typeof origin.loc === \"string\") {\n                        sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(origin.loc));\n                      } else if (origin.loc && typeof origin.loc === \"object\" && origin.loc.start) {\n                        sources.push(\"\".concat(index, \" \").concat(getModuleIdentifier(origin.module), \" \").concat(JSON.stringify(origin.loc.start)));\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          return sources;\n        };\n        compilation.hooks.recordChunks.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Chunk[]} chunks the chunks array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (chunks, records) {\n          if (!records.chunks) records.chunks = {};\n          if (!records.chunks.byName) records.chunks.byName = {};\n          if (!records.chunks.bySource) records.chunks.bySource = {};\n          /** @type {Set<number>} */\n          var usedIds = new Set();\n          var _iterator5 = _createForOfIteratorHelper(chunks),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var chunk = _step5.value;\n              if (typeof chunk.id !== \"number\") continue;\n              var name = chunk.name;\n              if (name) records.chunks.byName[name] = chunk.id;\n              var sources = getChunkSources(chunk);\n              var _iterator6 = _createForOfIteratorHelper(sources),\n                _step6;\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var source = _step6.value;\n                  records.chunks.bySource[source] = chunk.id;\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n              usedIds.add(chunk.id);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          records.chunks.usedIds = Array.from(usedIds).sort();\n        });\n        compilation.hooks.reviveChunks.tap(\"RecordIdsPlugin\",\n        /**\n         * @param {Chunk[]} chunks the chunks array\n         * @param {Records} records the records object\n         * @returns {void}\n         */\n        function (chunks, records) {\n          if (!records.chunks) return;\n          /** @type {Set<number>} */\n          var usedIds = new Set();\n          if (records.chunks.byName) {\n            var _iterator7 = _createForOfIteratorHelper(chunks),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var chunk = _step7.value;\n                if (chunk.id !== null) continue;\n                if (!chunk.name) continue;\n                var id = records.chunks.byName[chunk.name];\n                if (id === undefined) continue;\n                if (usedIds.has(id)) continue;\n                usedIds.add(id);\n                chunk.id = id;\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n          if (records.chunks.bySource) {\n            var _iterator8 = _createForOfIteratorHelper(chunks),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var _chunk = _step8.value;\n                var sources = getChunkSources(_chunk);\n                var _iterator9 = _createForOfIteratorHelper(sources),\n                  _step9;\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    var source = _step9.value;\n                    var _id = records.chunks.bySource[source];\n                    if (_id === undefined) continue;\n                    if (usedIds.has(_id)) continue;\n                    usedIds.add(_id);\n                    _chunk.id = _id;\n                    break;\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n          if (Array.isArray(records.chunks.usedIds)) {\n            compilation.usedChunkIds = new Set(records.chunks.usedIds);\n          }\n        });\n      });\n    }\n  }]);\n  return RecordIdsPlugin;\n}();\nmodule.exports = RecordIdsPlugin;","map":{"version":3,"names":["identifierUtils","require","RecordIdsPlugin","options","compiler","portableIds","hooks","compilation","tap","recordModules","modules","records","byIdentifier","usedIds","module","id","identifier","makePathsRelative","context","cache","reviveModules","Set","undefined","has","add","Array","isArray","usedModuleIds","getModuleIdentifier","getChunkSources","chunk","sources","groupsIterable","chunkGroup","index","chunks","indexOf","name","push","origins","origin","request","loc","start","JSON","stringify","recordChunks","byName","bySource","source","from","sort","reviveChunks","usedChunkIds","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/RecordIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst identifierUtils = require(\"./util/identifier\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Module\")} Module */\n\n/**\n * @typedef {Object} RecordsChunks\n * @property {Record<string, number>=} byName\n * @property {Record<string, number>=} bySource\n * @property {number[]=} usedIds\n */\n\n/**\n * @typedef {Object} RecordsModules\n * @property {Record<string, number>=} byIdentifier\n * @property {Record<string, number>=} bySource\n * @property {Record<number, number>=} usedIds\n */\n\n/**\n * @typedef {Object} Records\n * @property {RecordsChunks=} chunks\n * @property {RecordsModules=} modules\n */\n\nclass RecordIdsPlugin {\n\t/**\n\t * @param {Object} options Options object\n\t * @param {boolean=} options.portableIds true, when ids need to be portable\n\t */\n\tconstructor(options) {\n\t\tthis.options = options || {};\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the Compiler\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tconst portableIds = this.options.portableIds;\n\t\tcompiler.hooks.compilation.tap(\"RecordIdsPlugin\", compilation => {\n\t\t\tcompilation.hooks.recordModules.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Module[]} modules the modules array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(modules, records) => {\n\t\t\t\t\tif (!records.modules) records.modules = {};\n\t\t\t\t\tif (!records.modules.byIdentifier) records.modules.byIdentifier = {};\n\t\t\t\t\tif (!records.modules.usedIds) records.modules.usedIds = {};\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tif (typeof module.id !== \"number\") continue;\n\t\t\t\t\t\tconst identifier = portableIds\n\t\t\t\t\t\t\t? identifierUtils.makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\t\t\t\tmodule.identifier(),\n\t\t\t\t\t\t\t\t\tcompilation.cache\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: module.identifier();\n\t\t\t\t\t\trecords.modules.byIdentifier[identifier] = module.id;\n\t\t\t\t\t\trecords.modules.usedIds[module.id] = module.id;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.reviveModules.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Module[]} modules the modules array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(modules, records) => {\n\t\t\t\t\tif (!records.modules) return;\n\t\t\t\t\tif (records.modules.byIdentifier) {\n\t\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\t\tif (module.id !== null) continue;\n\t\t\t\t\t\t\tconst identifier = portableIds\n\t\t\t\t\t\t\t\t? identifierUtils.makePathsRelative(\n\t\t\t\t\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\t\t\t\t\tmodule.identifier(),\n\t\t\t\t\t\t\t\t\t\tcompilation.cache\n\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: module.identifier();\n\t\t\t\t\t\t\tconst id = records.modules.byIdentifier[identifier];\n\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\tmodule.id = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(records.modules.usedIds)) {\n\t\t\t\t\t\tcompilation.usedModuleIds = new Set(records.modules.usedIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * @param {Module} module the module\n\t\t\t * @returns {string} the (portable) identifier\n\t\t\t */\n\t\t\tconst getModuleIdentifier = module => {\n\t\t\t\tif (portableIds) {\n\t\t\t\t\treturn identifierUtils.makePathsRelative(\n\t\t\t\t\t\tcompiler.context,\n\t\t\t\t\t\tmodule.identifier(),\n\t\t\t\t\t\tcompilation.cache\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn module.identifier();\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * @param {Chunk} chunk the chunk\n\t\t\t * @returns {string[]} sources of the chunk\n\t\t\t */\n\t\t\tconst getChunkSources = chunk => {\n\t\t\t\t/** @type {string[]} */\n\t\t\t\tconst sources = [];\n\t\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\t\tconst index = chunkGroup.chunks.indexOf(chunk);\n\t\t\t\t\tif (chunkGroup.name) {\n\t\t\t\t\t\tsources.push(`${index} ${chunkGroup.name}`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (const origin of chunkGroup.origins) {\n\t\t\t\t\t\t\tif (origin.module) {\n\t\t\t\t\t\t\t\tif (origin.request) {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(origin.module)} ${\n\t\t\t\t\t\t\t\t\t\t\torigin.request\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (typeof origin.loc === \"string\") {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(origin.module)} ${\n\t\t\t\t\t\t\t\t\t\t\torigin.loc\n\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\torigin.loc &&\n\t\t\t\t\t\t\t\t\ttypeof origin.loc === \"object\" &&\n\t\t\t\t\t\t\t\t\torigin.loc.start\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tsources.push(\n\t\t\t\t\t\t\t\t\t\t`${index} ${getModuleIdentifier(\n\t\t\t\t\t\t\t\t\t\t\torigin.module\n\t\t\t\t\t\t\t\t\t\t)} ${JSON.stringify(origin.loc.start)}`\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn sources;\n\t\t\t};\n\n\t\t\tcompilation.hooks.recordChunks.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk[]} chunks the chunks array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(chunks, records) => {\n\t\t\t\t\tif (!records.chunks) records.chunks = {};\n\t\t\t\t\tif (!records.chunks.byName) records.chunks.byName = {};\n\t\t\t\t\tif (!records.chunks.bySource) records.chunks.bySource = {};\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tif (typeof chunk.id !== \"number\") continue;\n\t\t\t\t\t\tconst name = chunk.name;\n\t\t\t\t\t\tif (name) records.chunks.byName[name] = chunk.id;\n\t\t\t\t\t\tconst sources = getChunkSources(chunk);\n\t\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\t\trecords.chunks.bySource[source] = chunk.id;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tusedIds.add(chunk.id);\n\t\t\t\t\t}\n\t\t\t\t\trecords.chunks.usedIds = Array.from(usedIds).sort();\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.reviveChunks.tap(\n\t\t\t\t\"RecordIdsPlugin\",\n\t\t\t\t/**\n\t\t\t\t * @param {Chunk[]} chunks the chunks array\n\t\t\t\t * @param {Records} records the records object\n\t\t\t\t * @returns {void}\n\t\t\t\t */\n\t\t\t\t(chunks, records) => {\n\t\t\t\t\tif (!records.chunks) return;\n\t\t\t\t\t/** @type {Set<number>} */\n\t\t\t\t\tconst usedIds = new Set();\n\t\t\t\t\tif (records.chunks.byName) {\n\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\tif (chunk.id !== null) continue;\n\t\t\t\t\t\t\tif (!chunk.name) continue;\n\t\t\t\t\t\t\tconst id = records.chunks.byName[chunk.name];\n\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (records.chunks.bySource) {\n\t\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\t\tconst sources = getChunkSources(chunk);\n\t\t\t\t\t\t\tfor (const source of sources) {\n\t\t\t\t\t\t\t\tconst id = records.chunks.bySource[source];\n\t\t\t\t\t\t\t\tif (id === undefined) continue;\n\t\t\t\t\t\t\t\tif (usedIds.has(id)) continue;\n\t\t\t\t\t\t\t\tusedIds.add(id);\n\t\t\t\t\t\t\t\tchunk.id = id;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(records.chunks.usedIds)) {\n\t\t\t\t\t\tcompilation.usedChunkIds = new Set(records.chunks.usedIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = RecordIdsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}