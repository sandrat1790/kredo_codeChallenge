{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"webpack-sources\"),\n  RawSource = _require.RawSource,\n  ReplaceSource = _require.ReplaceSource;\n\n// TODO: clean up this file\n// replace with newer constructs\n\n// TODO: remove DependencyVariables and replace them with something better\nvar JavascriptGenerator = /*#__PURE__*/function () {\n  function JavascriptGenerator() {\n    _classCallCheck(this, JavascriptGenerator);\n  }\n  _createClass(JavascriptGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate) {\n      var originalSource = module.originalSource();\n      if (!originalSource) {\n        return new RawSource(\"throw new Error('No source available');\");\n      }\n      var source = new ReplaceSource(originalSource);\n      this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n      return source;\n    }\n  }, {\n    key: \"sourceBlock\",\n    value: function sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n      var _this = this;\n      var _iterator = _createForOfIteratorHelper(block.dependencies),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var dependency = _step.value;\n          this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n        }\n\n        /**\n         * Get the variables of all blocks that we need to inject.\n         * These will contain the variable name and its expression.\n         * The name will be added as a parameter in a IIFE the expression as its value.\n         */\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var vars = block.variables.reduce(function (result, value) {\n        var variable = _this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n        if (variable) {\n          result.push(variable);\n        }\n        return result;\n      }, []);\n\n      /**\n       * if we actually have variables\n       * this is important as how #splitVariablesInUniqueNamedChunks works\n       * it will always return an array in an array which would lead to a IIFE wrapper around\n       * a module if we do this with an empty vars array.\n       */\n      if (vars.length > 0) {\n        /**\n         * Split all variables up into chunks of unique names.\n         * e.g. imagine you have the following variable names that need to be injected:\n         * [foo, bar, baz, foo, some, more]\n         * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n         * (function(foo, bar, baz){\n         *   (function(foo, some, more){\n         *     …\n         *   }(…));\n         * }(…));\n         *\n         * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n         * [[foo, bar, baz], [foo, some, more]]\n         */\n        var injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars);\n\n        // create all the beginnings of IIFEs\n        var functionWrapperStarts = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperStartCode(variableChunk.map(function (variable) {\n            return variable.name;\n          }));\n        });\n\n        // and all the ends\n        var functionWrapperEnds = injectionVariableChunks.map(function (variableChunk) {\n          return _this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(function (variable) {\n            return variable.expression;\n          }), block);\n        });\n\n        // join them to one big string\n        var varStartCode = functionWrapperStarts.join(\"\");\n\n        // reverse the ends first before joining them, as the last added must be the inner most\n        var varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n        // if we have anything, add it to the source\n        if (varStartCode && varEndCode) {\n          var start = block.range ? block.range[0] : -10;\n          var end = block.range ? block.range[1] : module.originalSource().size() + 1;\n          source.insert(start + 0.5, varStartCode);\n          source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n        }\n      }\n      var _iterator2 = _createForOfIteratorHelper(block.blocks),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var childBlock = _step2.value;\n          this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"sourceDependency\",\n    value: function sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n      var template = dependencyTemplates.get(dependency.constructor);\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n      template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n    }\n  }, {\n    key: \"sourceVariables\",\n    value: function sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n      var name = variable.name;\n      var expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n      if (availableVars.some(function (v) {\n        return v.name === name && v.expression.source() === expr.source();\n      })) {\n        return;\n      }\n      return {\n        name: name,\n        expression: expr\n      };\n    }\n\n    /*\n     * creates the start part of a IIFE around the module to inject a variable name\n     * (function(…){   <- this part\n     * }.call(…))\n     */\n  }, {\n    key: \"variableInjectionFunctionWrapperStartCode\",\n    value: function variableInjectionFunctionWrapperStartCode(varNames) {\n      var args = varNames.join(\", \");\n      return \"/* WEBPACK VAR INJECTION */(function(\".concat(args, \") {\");\n    }\n  }, {\n    key: \"contextArgument\",\n    value: function contextArgument(module, block) {\n      if (this === block) {\n        return module.exportsArgument;\n      }\n      return \"this\";\n    }\n\n    /*\n     * creates the end part of a IIFE around the module to inject a variable name\n     * (function(…){\n     * }.call(…))   <- this part\n     */\n  }, {\n    key: \"variableInjectionFunctionWrapperEndCode\",\n    value: function variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n      var firstParam = this.contextArgument(module, block);\n      var furtherParams = varExpressions.map(function (e) {\n        return e.source();\n      }).join(\", \");\n      return \"}.call(\".concat(firstParam, \", \").concat(furtherParams, \"))\");\n    }\n  }, {\n    key: \"splitVariablesInUniqueNamedChunks\",\n    value: function splitVariablesInUniqueNamedChunks(vars) {\n      var startState = [[]];\n      return vars.reduce(function (chunks, variable) {\n        var current = chunks[chunks.length - 1];\n        // check if variable with same name exists already\n        // if so create a new chunk of variables.\n        var variableNameAlreadyExists = current.some(function (v) {\n          return v.name === variable.name;\n        });\n        if (variableNameAlreadyExists) {\n          // start new chunk with current variable\n          chunks.push([variable]);\n        } else {\n          // else add it to current chunk\n          current.push(variable);\n        }\n        return chunks;\n      }, startState);\n    }\n  }]);\n  return JavascriptGenerator;\n}();\nmodule.exports = JavascriptGenerator;","map":{"version":3,"names":["require","RawSource","ReplaceSource","JavascriptGenerator","module","dependencyTemplates","runtimeTemplate","originalSource","source","sourceBlock","block","availableVars","dependencies","dependency","sourceDependency","vars","variables","reduce","result","value","variable","sourceVariables","push","length","injectionVariableChunks","splitVariablesInUniqueNamedChunks","functionWrapperStarts","map","variableChunk","variableInjectionFunctionWrapperStartCode","name","functionWrapperEnds","variableInjectionFunctionWrapperEndCode","expression","varStartCode","join","varEndCode","reverse","start","range","end","size","insert","blocks","childBlock","concat","template","get","constructor","Error","apply","expr","expressionSource","some","v","varNames","args","exportsArgument","varExpressions","firstParam","contextArgument","furtherParams","e","startState","chunks","current","variableNameAlreadyExists","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/JavascriptGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { RawSource, ReplaceSource } = require(\"webpack-sources\");\n\n// TODO: clean up this file\n// replace with newer constructs\n\n// TODO: remove DependencyVariables and replace them with something better\n\nclass JavascriptGenerator {\n\tgenerate(module, dependencyTemplates, runtimeTemplate) {\n\t\tconst originalSource = module.originalSource();\n\t\tif (!originalSource) {\n\t\t\treturn new RawSource(\"throw new Error('No source available');\");\n\t\t}\n\n\t\tconst source = new ReplaceSource(originalSource);\n\n\t\tthis.sourceBlock(\n\t\t\tmodule,\n\t\t\tmodule,\n\t\t\t[],\n\t\t\tdependencyTemplates,\n\t\t\tsource,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\treturn source;\n\t}\n\n\tsourceBlock(\n\t\tmodule,\n\t\tblock,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\tsource,\n\t\truntimeTemplate\n\t) {\n\t\tfor (const dependency of block.dependencies) {\n\t\t\tthis.sourceDependency(\n\t\t\t\tdependency,\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Get the variables of all blocks that we need to inject.\n\t\t * These will contain the variable name and its expression.\n\t\t * The name will be added as a parameter in a IIFE the expression as its value.\n\t\t */\n\t\tconst vars = block.variables.reduce((result, value) => {\n\t\t\tconst variable = this.sourceVariables(\n\t\t\t\tvalue,\n\t\t\t\tavailableVars,\n\t\t\t\tdependencyTemplates,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\n\t\t\tif (variable) {\n\t\t\t\tresult.push(variable);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t/**\n\t\t * if we actually have variables\n\t\t * this is important as how #splitVariablesInUniqueNamedChunks works\n\t\t * it will always return an array in an array which would lead to a IIFE wrapper around\n\t\t * a module if we do this with an empty vars array.\n\t\t */\n\t\tif (vars.length > 0) {\n\t\t\t/**\n\t\t\t * Split all variables up into chunks of unique names.\n\t\t\t * e.g. imagine you have the following variable names that need to be injected:\n\t\t\t * [foo, bar, baz, foo, some, more]\n\t\t\t * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n\t\t\t * (function(foo, bar, baz){\n\t\t\t *   (function(foo, some, more){\n\t\t\t *     …\n\t\t\t *   }(…));\n\t\t\t * }(…));\n\t\t\t *\n\t\t\t * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n\t\t\t * [[foo, bar, baz], [foo, some, more]]\n\t\t\t */\n\t\t\tconst injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(\n\t\t\t\tvars\n\t\t\t);\n\n\t\t\t// create all the beginnings of IIFEs\n\t\t\tconst functionWrapperStarts = injectionVariableChunks.map(\n\t\t\t\tvariableChunk => {\n\t\t\t\t\treturn this.variableInjectionFunctionWrapperStartCode(\n\t\t\t\t\t\tvariableChunk.map(variable => variable.name)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// and all the ends\n\t\t\tconst functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n\t\t\t\treturn this.variableInjectionFunctionWrapperEndCode(\n\t\t\t\t\tmodule,\n\t\t\t\t\tvariableChunk.map(variable => variable.expression),\n\t\t\t\t\tblock\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// join them to one big string\n\t\t\tconst varStartCode = functionWrapperStarts.join(\"\");\n\n\t\t\t// reverse the ends first before joining them, as the last added must be the inner most\n\t\t\tconst varEndCode = functionWrapperEnds.reverse().join(\"\");\n\n\t\t\t// if we have anything, add it to the source\n\t\t\tif (varStartCode && varEndCode) {\n\t\t\t\tconst start = block.range ? block.range[0] : -10;\n\t\t\t\tconst end = block.range\n\t\t\t\t\t? block.range[1]\n\t\t\t\t\t: module.originalSource().size() + 1;\n\t\t\t\tsource.insert(start + 0.5, varStartCode);\n\t\t\t\tsource.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n\t\t\t}\n\t\t}\n\n\t\tfor (const childBlock of block.blocks) {\n\t\t\tthis.sourceBlock(\n\t\t\t\tmodule,\n\t\t\t\tchildBlock,\n\t\t\t\tavailableVars.concat(vars),\n\t\t\t\tdependencyTemplates,\n\t\t\t\tsource,\n\t\t\t\truntimeTemplate\n\t\t\t);\n\t\t}\n\t}\n\n\tsourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n\t\tconst template = dependencyTemplates.get(dependency.constructor);\n\t\tif (!template) {\n\t\t\tthrow new Error(\n\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\n\t\t\t);\n\t\t}\n\t\ttemplate.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n\t}\n\n\tsourceVariables(\n\t\tvariable,\n\t\tavailableVars,\n\t\tdependencyTemplates,\n\t\truntimeTemplate\n\t) {\n\t\tconst name = variable.name;\n\t\tconst expr = variable.expressionSource(\n\t\t\tdependencyTemplates,\n\t\t\truntimeTemplate\n\t\t);\n\n\t\tif (\n\t\t\tavailableVars.some(\n\t\t\t\tv => v.name === name && v.expression.source() === expr.source()\n\t\t\t)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn {\n\t\t\tname: name,\n\t\t\texpression: expr\n\t\t};\n\t}\n\n\t/*\n\t * creates the start part of a IIFE around the module to inject a variable name\n\t * (function(…){   <- this part\n\t * }.call(…))\n\t */\n\tvariableInjectionFunctionWrapperStartCode(varNames) {\n\t\tconst args = varNames.join(\", \");\n\t\treturn `/* WEBPACK VAR INJECTION */(function(${args}) {`;\n\t}\n\n\tcontextArgument(module, block) {\n\t\tif (this === block) {\n\t\t\treturn module.exportsArgument;\n\t\t}\n\t\treturn \"this\";\n\t}\n\n\t/*\n\t * creates the end part of a IIFE around the module to inject a variable name\n\t * (function(…){\n\t * }.call(…))   <- this part\n\t */\n\tvariableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n\t\tconst firstParam = this.contextArgument(module, block);\n\t\tconst furtherParams = varExpressions.map(e => e.source()).join(\", \");\n\t\treturn `}.call(${firstParam}, ${furtherParams}))`;\n\t}\n\n\tsplitVariablesInUniqueNamedChunks(vars) {\n\t\tconst startState = [[]];\n\t\treturn vars.reduce((chunks, variable) => {\n\t\t\tconst current = chunks[chunks.length - 1];\n\t\t\t// check if variable with same name exists already\n\t\t\t// if so create a new chunk of variables.\n\t\t\tconst variableNameAlreadyExists = current.some(\n\t\t\t\tv => v.name === variable.name\n\t\t\t);\n\n\t\t\tif (variableNameAlreadyExists) {\n\t\t\t\t// start new chunk with current variable\n\t\t\t\tchunks.push([variable]);\n\t\t\t} else {\n\t\t\t\t// else add it to current chunk\n\t\t\t\tcurrent.push(variable);\n\t\t\t}\n\t\t\treturn chunks;\n\t\t}, startState);\n\t}\n}\n\nmodule.exports = JavascriptGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}