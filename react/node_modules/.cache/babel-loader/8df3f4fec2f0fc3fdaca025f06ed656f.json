{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RequireContextDependency = require(\"./RequireContextDependency\");\nmodule.exports = /*#__PURE__*/function () {\n  function RequireContextDependencyParserPlugin() {\n    _classCallCheck(this, RequireContextDependencyParserPlugin);\n  }\n  _createClass(RequireContextDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.context\").tap(\"RequireContextDependencyParserPlugin\", function (expr) {\n        var regExp = /^\\.\\/.*$/;\n        var recursive = true;\n        var mode = \"sync\";\n        switch (expr.arguments.length) {\n          case 4:\n            {\n              var modeExpr = parser.evaluateExpression(expr.arguments[3]);\n              if (!modeExpr.isString()) return;\n              mode = modeExpr.string;\n            }\n          // falls through\n          case 3:\n            {\n              var regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n              if (!regExpExpr.isRegExp()) return;\n              regExp = regExpExpr.regExp;\n            }\n          // falls through\n          case 2:\n            {\n              var recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n              if (!recursiveExpr.isBoolean()) return;\n              recursive = recursiveExpr.bool;\n            }\n          // falls through\n          case 1:\n            {\n              var requestExpr = parser.evaluateExpression(expr.arguments[0]);\n              if (!requestExpr.isString()) return;\n              var dep = new RequireContextDependency({\n                request: requestExpr.string,\n                recursive: recursive,\n                regExp: regExp,\n                mode: mode\n              }, expr.range);\n              dep.loc = expr.loc;\n              dep.optional = parser.scope.inTry;\n              parser.state.current.addDependency(dep);\n              return true;\n            }\n        }\n      });\n    }\n  }]);\n  return RequireContextDependencyParserPlugin;\n}();","map":{"version":3,"names":["RequireContextDependency","require","module","exports","parser","hooks","call","for","tap","expr","regExp","recursive","mode","arguments","length","modeExpr","evaluateExpression","isString","string","regExpExpr","isRegExp","recursiveExpr","isBoolean","bool","requestExpr","dep","request","range","loc","optional","scope","inTry","state","current","addDependency"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/dependencies/RequireContextDependencyParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports = class RequireContextDependencyParserPlugin {\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"require.context\")\n\t\t\t.tap(\"RequireContextDependencyParserPlugin\", expr => {\n\t\t\t\tlet regExp = /^\\.\\/.*$/;\n\t\t\t\tlet recursive = true;\n\t\t\t\tlet mode = \"sync\";\n\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\tcase 4: {\n\t\t\t\t\t\tconst modeExpr = parser.evaluateExpression(expr.arguments[3]);\n\t\t\t\t\t\tif (!modeExpr.isString()) return;\n\t\t\t\t\t\tmode = modeExpr.string;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\tconst regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n\t\t\t\t\t\tif (!regExpExpr.isRegExp()) return;\n\t\t\t\t\t\tregExp = regExpExpr.regExp;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n\t\t\t\t\t\tif (!recursiveExpr.isBoolean()) return;\n\t\t\t\t\t\trecursive = recursiveExpr.bool;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 1: {\n\t\t\t\t\t\tconst requestExpr = parser.evaluateExpression(expr.arguments[0]);\n\t\t\t\t\t\tif (!requestExpr.isString()) return;\n\t\t\t\t\t\tconst dep = new RequireContextDependency(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequest: requestExpr.string,\n\t\t\t\t\t\t\t\trecursive,\n\t\t\t\t\t\t\t\tregExp,\n\t\t\t\t\t\t\t\tmode\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\texpr.range\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdep.loc = expr.loc;\n\t\t\t\t\t\tdep.optional = parser.scope.inTry;\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAEb,IAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAEtEC,MAAM,CAACC,OAAO;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACb,eAAMC,MAAM,EAAE;MACbA,MAAM,CAACC,KAAK,CAACC,IAAI,CACfC,GAAG,CAAC,iBAAiB,CAAC,CACtBC,GAAG,CAAC,sCAAsC,EAAE,UAAAC,IAAI,EAAI;QACpD,IAAIC,MAAM,GAAG,UAAU;QACvB,IAAIC,SAAS,GAAG,IAAI;QACpB,IAAIC,IAAI,GAAG,MAAM;QACjB,QAAQH,IAAI,CAACI,SAAS,CAACC,MAAM;UAC5B,KAAK,CAAC;YAAE;cACP,IAAMC,QAAQ,GAAGX,MAAM,CAACY,kBAAkB,CAACP,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;cAC7D,IAAI,CAACE,QAAQ,CAACE,QAAQ,EAAE,EAAE;cAC1BL,IAAI,GAAGG,QAAQ,CAACG,MAAM;YACvB;UACA;UACA,KAAK,CAAC;YAAE;cACP,IAAMC,UAAU,GAAGf,MAAM,CAACY,kBAAkB,CAACP,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;cAC/D,IAAI,CAACM,UAAU,CAACC,QAAQ,EAAE,EAAE;cAC5BV,MAAM,GAAGS,UAAU,CAACT,MAAM;YAC3B;UACA;UACA,KAAK,CAAC;YAAE;cACP,IAAMW,aAAa,GAAGjB,MAAM,CAACY,kBAAkB,CAACP,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;cAClE,IAAI,CAACQ,aAAa,CAACC,SAAS,EAAE,EAAE;cAChCX,SAAS,GAAGU,aAAa,CAACE,IAAI;YAC/B;UACA;UACA,KAAK,CAAC;YAAE;cACP,IAAMC,WAAW,GAAGpB,MAAM,CAACY,kBAAkB,CAACP,IAAI,CAACI,SAAS,CAAC,CAAC,CAAC,CAAC;cAChE,IAAI,CAACW,WAAW,CAACP,QAAQ,EAAE,EAAE;cAC7B,IAAMQ,GAAG,GAAG,IAAIzB,wBAAwB,CACvC;gBACC0B,OAAO,EAAEF,WAAW,CAACN,MAAM;gBAC3BP,SAAS,EAATA,SAAS;gBACTD,MAAM,EAANA,MAAM;gBACNE,IAAI,EAAJA;cACD,CAAC,EACDH,IAAI,CAACkB,KAAK,CACV;cACDF,GAAG,CAACG,GAAG,GAAGnB,IAAI,CAACmB,GAAG;cAClBH,GAAG,CAACI,QAAQ,GAAGzB,MAAM,CAAC0B,KAAK,CAACC,KAAK;cACjC3B,MAAM,CAAC4B,KAAK,CAACC,OAAO,CAACC,aAAa,CAACT,GAAG,CAAC;cACvC,OAAO,IAAI;YACZ;QAAC;MAEH,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script"}