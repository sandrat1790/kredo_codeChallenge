{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nvar Template = require(\"./Template\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\nvar AmdMainTemplatePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {AmdMainTemplatePluginOptions} options the plugin options\n   */\n  function AmdMainTemplatePlugin(options) {\n    _classCallCheck(this, AmdMainTemplatePlugin);\n    if (!options || typeof options === \"string\") {\n      this.name = options;\n      this.requireAsWrapper = false;\n    } else {\n      this.name = options.name;\n      this.requireAsWrapper = options.requireAsWrapper;\n    }\n  }\n\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n  _createClass(AmdMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(compilation) {\n      var _this = this;\n      var mainTemplate = compilation.mainTemplate,\n        chunkTemplate = compilation.chunkTemplate;\n      var onRenderWithEntry = function onRenderWithEntry(source, chunk, hash) {\n        var externals = chunk.getModules().filter(function (m) {\n          return m.external;\n        });\n        var externalsDepsArray = JSON.stringify(externals.map(function (m) {\n          return typeof m.request === \"object\" ? m.request.amd : m.request;\n        }));\n        var externalsArguments = externals.map(function (m) {\n          return \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(m.id)), \"__\");\n        }).join(\", \");\n        if (_this.requireAsWrapper) {\n          return new ConcatSource(\"require(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else if (_this.name) {\n          var name = mainTemplate.getAssetPath(_this.name, {\n            hash: hash,\n            chunk: chunk\n          });\n          return new ConcatSource(\"define(\".concat(JSON.stringify(name), \", \").concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else if (externalsArguments) {\n          return new ConcatSource(\"define(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n        } else {\n          return new ConcatSource(\"define(function() { return \", source, \"});\");\n        }\n      };\n      for (var _i = 0, _arr = [mainTemplate, chunkTemplate]; _i < _arr.length; _i++) {\n        var template = _arr[_i];\n        template.hooks.renderWithEntry.tap(\"AmdMainTemplatePlugin\", onRenderWithEntry);\n      }\n      mainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", function (paths) {\n        if (_this.name) {\n          paths.push(_this.name);\n        }\n        return paths;\n      });\n      mainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", function (hash) {\n        hash.update(\"exports amd\");\n        if (_this.name) {\n          hash.update(_this.name);\n        }\n      });\n    }\n  }]);\n  return AmdMainTemplatePlugin;\n}();\nmodule.exports = AmdMainTemplatePlugin;","map":{"version":3,"names":["require","ConcatSource","Template","AmdMainTemplatePlugin","options","name","requireAsWrapper","compilation","mainTemplate","chunkTemplate","onRenderWithEntry","source","chunk","hash","externals","getModules","filter","m","external","externalsDepsArray","JSON","stringify","map","request","amd","externalsArguments","toIdentifier","id","join","getAssetPath","template","hooks","renderWithEntry","tap","globalHashPaths","paths","push","update","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/AmdMainTemplatePlugin.js"],"sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst Template = require(\"./Template\");\n\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\nclass AmdMainTemplatePlugin {\n\t/**\n\t * @param {AmdMainTemplatePluginOptions} options the plugin options\n\t */\n\tconstructor(options) {\n\t\tif (!options || typeof options === \"string\") {\n\t\t\tthis.name = options;\n\t\t\tthis.requireAsWrapper = false;\n\t\t} else {\n\t\t\tthis.name = options.name;\n\t\t\tthis.requireAsWrapper = options.requireAsWrapper;\n\t\t}\n\t}\n\n\t/**\n\t * @param {Compilation} compilation the compilation instance\n\t * @returns {void}\n\t */\n\tapply(compilation) {\n\t\tconst { mainTemplate, chunkTemplate } = compilation;\n\n\t\tconst onRenderWithEntry = (source, chunk, hash) => {\n\t\t\tconst externals = chunk.getModules().filter(m => m.external);\n\t\t\tconst externalsDepsArray = JSON.stringify(\n\t\t\t\texternals.map(m =>\n\t\t\t\t\ttypeof m.request === \"object\" ? m.request.amd : m.request\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst externalsArguments = externals\n\t\t\t\t.map(\n\t\t\t\t\tm => `__WEBPACK_EXTERNAL_MODULE_${Template.toIdentifier(`${m.id}`)}__`\n\t\t\t\t)\n\t\t\t\t.join(\", \");\n\n\t\t\tif (this.requireAsWrapper) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`require(${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else if (this.name) {\n\t\t\t\tconst name = mainTemplate.getAssetPath(this.name, {\n\t\t\t\t\thash,\n\t\t\t\t\tchunk\n\t\t\t\t});\n\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`define(${JSON.stringify(\n\t\t\t\t\t\tname\n\t\t\t\t\t)}, ${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else if (externalsArguments) {\n\t\t\t\treturn new ConcatSource(\n\t\t\t\t\t`define(${externalsDepsArray}, function(${externalsArguments}) { return `,\n\t\t\t\t\tsource,\n\t\t\t\t\t\"});\"\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn new ConcatSource(\"define(function() { return \", source, \"});\");\n\t\t\t}\n\t\t};\n\n\t\tfor (const template of [mainTemplate, chunkTemplate]) {\n\t\t\ttemplate.hooks.renderWithEntry.tap(\n\t\t\t\t\"AmdMainTemplatePlugin\",\n\t\t\t\tonRenderWithEntry\n\t\t\t);\n\t\t}\n\n\t\tmainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", paths => {\n\t\t\tif (this.name) {\n\t\t\t\tpaths.push(this.name);\n\t\t\t}\n\t\t\treturn paths;\n\t\t});\n\n\t\tmainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"exports amd\");\n\t\t\tif (this.name) {\n\t\t\t\thash.update(this.name);\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = AmdMainTemplatePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}