{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RequireIncludeDependency = require(\"./RequireIncludeDependency\");\nmodule.exports = /*#__PURE__*/function () {\n  function RequireIncludeDependencyParserPlugin() {\n    _classCallCheck(this, RequireIncludeDependencyParserPlugin);\n  }\n  _createClass(RequireIncludeDependencyParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.include\").tap(\"RequireIncludeDependencyParserPlugin\", function (expr) {\n        if (expr.arguments.length !== 1) return;\n        var param = parser.evaluateExpression(expr.arguments[0]);\n        if (!param.isString()) return;\n        var dep = new RequireIncludeDependency(param.string, expr.range);\n        dep.loc = expr.loc;\n        parser.state.current.addDependency(dep);\n        return true;\n      });\n    }\n  }]);\n  return RequireIncludeDependencyParserPlugin;\n}();","map":{"version":3,"names":["RequireIncludeDependency","require","module","exports","parser","hooks","call","for","tap","expr","arguments","length","param","evaluateExpression","isString","dep","string","range","loc","state","current","addDependency"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/dependencies/RequireIncludeDependencyParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireIncludeDependency = require(\"./RequireIncludeDependency\");\n\nmodule.exports = class RequireIncludeDependencyParserPlugin {\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"require.include\")\n\t\t\t.tap(\"RequireIncludeDependencyParserPlugin\", expr => {\n\t\t\t\tif (expr.arguments.length !== 1) return;\n\t\t\t\tconst param = parser.evaluateExpression(expr.arguments[0]);\n\t\t\t\tif (!param.isString()) return;\n\t\t\t\tconst dep = new RequireIncludeDependency(param.string, expr.range);\n\t\t\t\tdep.loc = expr.loc;\n\t\t\t\tparser.state.current.addDependency(dep);\n\t\t\t\treturn true;\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAEb,IAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAEtEC,MAAM,CAACC,OAAO;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACb,eAAMC,MAAM,EAAE;MACbA,MAAM,CAACC,KAAK,CAACC,IAAI,CACfC,GAAG,CAAC,iBAAiB,CAAC,CACtBC,GAAG,CAAC,sCAAsC,EAAE,UAAAC,IAAI,EAAI;QACpD,IAAIA,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QACjC,IAAMC,KAAK,GAAGR,MAAM,CAACS,kBAAkB,CAACJ,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1D,IAAI,CAACE,KAAK,CAACE,QAAQ,EAAE,EAAE;QACvB,IAAMC,GAAG,GAAG,IAAIf,wBAAwB,CAACY,KAAK,CAACI,MAAM,EAAEP,IAAI,CAACQ,KAAK,CAAC;QAClEF,GAAG,CAACG,GAAG,GAAGT,IAAI,CAACS,GAAG;QAClBd,MAAM,CAACe,KAAK,CAACC,OAAO,CAACC,aAAa,CAACN,GAAG,CAAC;QACvC,OAAO,IAAI;MACZ,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script"}