{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar Template = require(\"../Template\");\nmodule.exports = /*#__PURE__*/function () {\n  function NodeMainTemplatePlugin(asyncChunkLoading) {\n    _classCallCheck(this, NodeMainTemplatePlugin);\n    this.asyncChunkLoading = asyncChunkLoading;\n  }\n  _createClass(NodeMainTemplatePlugin, [{\n    key: \"apply\",\n    value: function apply(mainTemplate) {\n      var needChunkOnDemandLoadingCode = function needChunkOnDemandLoadingCode(chunk) {\n        var _iterator = _createForOfIteratorHelper(chunk.groupsIterable),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var chunkGroup = _step.value;\n            if (chunkGroup.getNumberOfChildren() > 0) return true;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return false;\n      };\n      var asyncChunkLoading = this.asyncChunkLoading;\n      mainTemplate.hooks.localVars.tap(\"NodeMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// object to store loaded chunks\", '// \"0\" means \"already loaded\"', \"var installedChunks = {\", Template.indent(chunk.ids.map(function (id) {\n            return \"\".concat(JSON.stringify(id), \": 0\");\n          }).join(\",\\n\")), \"};\"]);\n        }\n        return source;\n      });\n      mainTemplate.hooks.requireExtensions.tap(\"NodeMainTemplatePlugin\", function (source, chunk) {\n        if (needChunkOnDemandLoadingCode(chunk)) {\n          return Template.asString([source, \"\", \"// uncaught error handler for webpack runtime\", \"\".concat(mainTemplate.requireFn, \".oe = function(err) {\"), Template.indent([\"process.nextTick(function() {\", Template.indent(\"throw err; // catch this error by using import().catch()\"), \"});\"]), \"};\"]);\n        }\n        return source;\n      });\n      mainTemplate.hooks.requireEnsure.tap(\"NodeMainTemplatePlugin\", function (source, chunk, hash) {\n        var chunkFilename = mainTemplate.outputOptions.chunkFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        var insertMoreModules = [\"var moreModules = chunk.modules, chunkIds = chunk.ids;\", \"for(var moduleId in moreModules) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\"];\n        if (asyncChunkLoading) {\n          return Template.asString([source, \"\", \"// ReadFile + VM.run chunk loading for javascript\", \"\", \"var installedChunkData = installedChunks[chunkId];\", 'if(installedChunkData !== 0) { // 0 means \"already installed\".', Template.indent(['// array of [resolve, reject, promise] means \"currently loading\"', \"if(installedChunkData) {\", Template.indent([\"promises.push(installedChunkData[2]);\"]), \"} else {\", Template.indent([\"// load the chunk and return promise to it\", \"var promise = new Promise(function(resolve, reject) {\", Template.indent([\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\", \"var filename = require('path').join(__dirname, \" + mainTemplate.getAssetPath(JSON.stringify(\"/\".concat(chunkFilename)), {\n            hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n            },\n            chunk: {\n              id: '\" + chunkId + \"',\n              hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n              hashWithLength: function hashWithLength(length) {\n                var shortChunkHashMap = {};\n                for (var _i = 0, _Object$keys = Object.keys(chunkMaps.hash); _i < _Object$keys.length; _i++) {\n                  var chunkId = _Object$keys[_i];\n                  if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                  }\n                }\n                return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n              },\n              contentHash: {\n                javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n              },\n              contentHashWithLength: {\n                javascript: function javascript(length) {\n                  var shortContentHashMap = {};\n                  var contentHash = chunkMaps.contentHash.javascript;\n                  for (var _i2 = 0, _Object$keys2 = Object.keys(contentHash); _i2 < _Object$keys2.length; _i2++) {\n                    var chunkId = _Object$keys2[_i2];\n                    if (typeof contentHash[chunkId] === \"string\") {\n                      shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                    }\n                  }\n                  return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n                }\n              },\n              name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n            },\n            contentHashType: \"javascript\"\n          }) + \");\", \"require('fs').readFile(filename, 'utf-8',  function(err, content) {\", Template.indent([\"if(err) return reject(err);\", \"var chunk = {};\", \"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\\\n})', filename)\" + \"(chunk, require, require('path').dirname(filename), filename);\"].concat(insertMoreModules).concat([\"var callbacks = [];\", \"for(var i = 0; i < chunkIds.length; i++) {\", Template.indent([\"if(installedChunks[chunkIds[i]])\", Template.indent([\"callbacks = callbacks.concat(installedChunks[chunkIds[i]][0]);\"]), \"installedChunks[chunkIds[i]] = 0;\"]), \"}\", \"for(i = 0; i < callbacks.length; i++)\", Template.indent(\"callbacks[i]();\")])), \"});\"]), \"});\", \"promises.push(installedChunkData[2] = promise);\"]), \"}\"]), \"}\"]);\n        } else {\n          var request = mainTemplate.getAssetPath(JSON.stringify(\"./\".concat(chunkFilename)), {\n            hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n            },\n            chunk: {\n              id: '\" + chunkId + \"',\n              hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n              hashWithLength: function hashWithLength(length) {\n                var shortChunkHashMap = {};\n                for (var _i3 = 0, _Object$keys3 = Object.keys(chunkMaps.hash); _i3 < _Object$keys3.length; _i3++) {\n                  var chunkId = _Object$keys3[_i3];\n                  if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                    shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                  }\n                }\n                return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n              },\n              contentHash: {\n                javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n              },\n              contentHashWithLength: {\n                javascript: function javascript(length) {\n                  var shortContentHashMap = {};\n                  var contentHash = chunkMaps.contentHash.javascript;\n                  for (var _i4 = 0, _Object$keys4 = Object.keys(contentHash); _i4 < _Object$keys4.length; _i4++) {\n                    var chunkId = _Object$keys4[_i4];\n                    if (typeof contentHash[chunkId] === \"string\") {\n                      shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                    }\n                  }\n                  return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n                }\n              },\n              name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n            },\n            contentHashType: \"javascript\"\n          });\n          return Template.asString([source, \"\", \"// require() chunk loading for javascript\", \"\", '// \"0\" is the signal for \"already loaded\"', \"if(installedChunks[chunkId] !== 0) {\", Template.indent([\"var chunk = require(\".concat(request, \");\")].concat(insertMoreModules).concat([\"for(var i = 0; i < chunkIds.length; i++)\", Template.indent(\"installedChunks[chunkIds[i]] = 0;\")])), \"}\"]);\n        }\n      });\n      mainTemplate.hooks.hotBootstrap.tap(\"NodeMainTemplatePlugin\", function (source, chunk, hash) {\n        var hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n        var hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n        var chunkMaps = chunk.getChunkMaps();\n        var currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          },\n          chunk: {\n            id: '\" + chunkId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n            hashWithLength: function hashWithLength(length) {\n              var shortChunkHashMap = {};\n              for (var _i5 = 0, _Object$keys5 = Object.keys(chunkMaps.hash); _i5 < _Object$keys5.length; _i5++) {\n                var chunkId = _Object$keys5[_i5];\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n          }\n        });\n        var currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: function hashWithLength(length) {\n            return \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\");\n          }\n        });\n        return Template.getFunctionContent(asyncChunkLoading ? require(\"./NodeMainTemplateAsync.runtime\") : require(\"./NodeMainTemplate.runtime\")).replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename);\n      });\n      mainTemplate.hooks.hash.tap(\"NodeMainTemplatePlugin\", function (hash) {\n        hash.update(\"node\");\n        hash.update(\"4\");\n      });\n    }\n  }]);\n  return NodeMainTemplatePlugin;\n}();","map":{"version":3,"names":["Template","require","module","exports","asyncChunkLoading","mainTemplate","needChunkOnDemandLoadingCode","chunk","groupsIterable","chunkGroup","getNumberOfChildren","hooks","localVars","tap","source","asString","indent","ids","map","id","JSON","stringify","join","requireExtensions","requireFn","requireEnsure","hash","chunkFilename","outputOptions","chunkMaps","getChunkMaps","insertMoreModules","renderAddModule","getAssetPath","renderCurrentHashCode","hashWithLength","length","shortChunkHashMap","Object","keys","chunkId","substr","contentHash","javascript","contentHashWithLength","shortContentHashMap","name","contentHashType","concat","request","hotBootstrap","hotUpdateChunkFilename","hotUpdateMainFilename","currentHotUpdateChunkFilename","currentHotUpdateMainFilename","getFunctionContent","replace","update"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/node/NodeMainTemplatePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\n\nmodule.exports = class NodeMainTemplatePlugin {\n\tconstructor(asyncChunkLoading) {\n\t\tthis.asyncChunkLoading = asyncChunkLoading;\n\t}\n\n\tapply(mainTemplate) {\n\t\tconst needChunkOnDemandLoadingCode = chunk => {\n\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\n\t\t\t\tif (chunkGroup.getNumberOfChildren() > 0) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tconst asyncChunkLoading = this.asyncChunkLoading;\n\t\tmainTemplate.hooks.localVars.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tif (needChunkOnDemandLoadingCode(chunk)) {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// object to store loaded chunks\",\n\t\t\t\t\t\t'// \"0\" means \"already loaded\"',\n\t\t\t\t\t\t\"var installedChunks = {\",\n\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\tchunk.ids.map(id => `${JSON.stringify(id)}: 0`).join(\",\\n\")\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"};\"\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\treturn source;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireExtensions.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk) => {\n\t\t\t\tif (needChunkOnDemandLoadingCode(chunk)) {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// uncaught error handler for webpack runtime\",\n\t\t\t\t\t\t`${mainTemplate.requireFn}.oe = function(err) {`,\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\"process.nextTick(function() {\",\n\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\"throw err; // catch this error by using import().catch()\"\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"};\"\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\treturn source;\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.requireEnsure.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk, hash) => {\n\t\t\t\tconst chunkFilename = mainTemplate.outputOptions.chunkFilename;\n\t\t\t\tconst chunkMaps = chunk.getChunkMaps();\n\t\t\t\tconst insertMoreModules = [\n\t\t\t\t\t\"var moreModules = chunk.modules, chunkIds = chunk.ids;\",\n\t\t\t\t\t\"for(var moduleId in moreModules) {\",\n\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\tmainTemplate.renderAddModule(\n\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\t\"moduleId\",\n\t\t\t\t\t\t\t\"moreModules[moduleId]\"\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t\"}\"\n\t\t\t\t];\n\t\t\t\tif (asyncChunkLoading) {\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// ReadFile + VM.run chunk loading for javascript\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"var installedChunkData = installedChunks[chunkId];\",\n\t\t\t\t\t\t'if(installedChunkData !== 0) { // 0 means \"already installed\".',\n\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t'// array of [resolve, reject, promise] means \"currently loading\"',\n\t\t\t\t\t\t\t\"if(installedChunkData) {\",\n\t\t\t\t\t\t\tTemplate.indent([\"promises.push(installedChunkData[2]);\"]),\n\t\t\t\t\t\t\t\"} else {\",\n\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\"// load the chunk and return promise to it\",\n\t\t\t\t\t\t\t\t\"var promise = new Promise(function(resolve, reject) {\",\n\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\",\n\t\t\t\t\t\t\t\t\t\"var filename = require('path').join(__dirname, \" +\n\t\t\t\t\t\t\t\t\t\tmainTemplate.getAssetPath(\n\t\t\t\t\t\t\t\t\t\t\tJSON.stringify(`/${chunkFilename}`),\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\thash\n\t\t\t\t\t\t\t\t\t\t\t\t)} + \"`,\n\t\t\t\t\t\t\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlength\n\t\t\t\t\t\t\t\t\t\t\t\t\t)} + \"`,\n\t\t\t\t\t\t\t\t\t\t\t\tchunk: {\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: '\" + chunkId + \"',\n\t\t\t\t\t\t\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.hash\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`,\n\t\t\t\t\t\t\t\t\t\t\t\t\thashWithLength: length => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst shortChunkHashMap = {};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(chunkMaps.hash)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof chunkMaps.hash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[chunkId] = chunkMaps.hash[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortChunkHashMap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontentHash: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.contentHash.javascript\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontentHashWithLength: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tjavascript: length => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst shortContentHashMap = {};\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst contentHash =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.contentHash.javascript;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(contentHash)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (typeof contentHash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap[chunkId] = contentHash[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: `\" + (${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchunkMaps.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}[chunkId]||chunkId) + \"`\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t\t\t\t\");\",\n\t\t\t\t\t\t\t\t\t\"require('fs').readFile(filename, 'utf-8',  function(err, content) {\",\n\t\t\t\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\"if(err) return reject(err);\",\n\t\t\t\t\t\t\t\t\t\t\t\"var chunk = {};\",\n\t\t\t\t\t\t\t\t\t\t\t\"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\\\n})', filename)\" +\n\t\t\t\t\t\t\t\t\t\t\t\t\"(chunk, require, require('path').dirname(filename), filename);\"\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t.concat(insertMoreModules)\n\t\t\t\t\t\t\t\t\t\t\t.concat([\n\t\t\t\t\t\t\t\t\t\t\t\t\"var callbacks = [];\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"for(var i = 0; i < chunkIds.length; i++) {\",\n\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"if(installedChunks[chunkIds[i]])\",\n\t\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"callbacks = callbacks.concat(installedChunks[chunkIds[i]][0]);\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"installedChunks[chunkIds[i]] = 0;\"\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\t\"}\",\n\t\t\t\t\t\t\t\t\t\t\t\t\"for(i = 0; i < callbacks.length; i++)\",\n\t\t\t\t\t\t\t\t\t\t\t\tTemplate.indent(\"callbacks[i]();\")\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\"});\"\n\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\"});\",\n\t\t\t\t\t\t\t\t\"promises.push(installedChunkData[2] = promise);\"\n\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\"}\"\n\t\t\t\t\t\t]),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tconst request = mainTemplate.getAssetPath(\n\t\t\t\t\t\tJSON.stringify(`./${chunkFilename}`),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n\t\t\t\t\t\t\tchunk: {\n\t\t\t\t\t\t\t\tid: '\" + chunkId + \"',\n\t\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(chunkMaps.hash)}[chunkId] + \"`,\n\t\t\t\t\t\t\t\thashWithLength: length => {\n\t\t\t\t\t\t\t\t\tconst shortChunkHashMap = {};\n\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(chunkMaps.hash)) {\n\t\t\t\t\t\t\t\t\t\tif (typeof chunkMaps.hash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[chunkId] = chunkMaps.hash[\n\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tshortChunkHashMap\n\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcontentHash: {\n\t\t\t\t\t\t\t\t\tjavascript: `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tchunkMaps.contentHash.javascript\n\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcontentHashWithLength: {\n\t\t\t\t\t\t\t\t\tjavascript: length => {\n\t\t\t\t\t\t\t\t\t\tconst shortContentHashMap = {};\n\t\t\t\t\t\t\t\t\t\tconst contentHash = chunkMaps.contentHash.javascript;\n\t\t\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(contentHash)) {\n\t\t\t\t\t\t\t\t\t\t\tif (typeof contentHash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap[chunkId] = contentHash[\n\t\t\t\t\t\t\t\t\t\t\t\t\tchunkId\n\t\t\t\t\t\t\t\t\t\t\t\t].substr(0, length);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\t\tshortContentHashMap\n\t\t\t\t\t\t\t\t\t\t)}[chunkId] + \"`;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tname: `\" + (${JSON.stringify(\n\t\t\t\t\t\t\t\t\tchunkMaps.name\n\t\t\t\t\t\t\t\t)}[chunkId]||chunkId) + \"`\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcontentHashType: \"javascript\"\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn Template.asString([\n\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\"// require() chunk loading for javascript\",\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t'// \"0\" is the signal for \"already loaded\"',\n\t\t\t\t\t\t\"if(installedChunks[chunkId] !== 0) {\",\n\t\t\t\t\t\tTemplate.indent(\n\t\t\t\t\t\t\t[`var chunk = require(${request});`]\n\t\t\t\t\t\t\t\t.concat(insertMoreModules)\n\t\t\t\t\t\t\t\t.concat([\n\t\t\t\t\t\t\t\t\t\"for(var i = 0; i < chunkIds.length; i++)\",\n\t\t\t\t\t\t\t\t\tTemplate.indent(\"installedChunks[chunkIds[i]] = 0;\")\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t),\n\t\t\t\t\t\t\"}\"\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hotBootstrap.tap(\n\t\t\t\"NodeMainTemplatePlugin\",\n\t\t\t(source, chunk, hash) => {\n\t\t\t\tconst hotUpdateChunkFilename =\n\t\t\t\t\tmainTemplate.outputOptions.hotUpdateChunkFilename;\n\t\t\t\tconst hotUpdateMainFilename =\n\t\t\t\t\tmainTemplate.outputOptions.hotUpdateMainFilename;\n\t\t\t\tconst chunkMaps = chunk.getChunkMaps();\n\t\t\t\tconst currentHotUpdateChunkFilename = mainTemplate.getAssetPath(\n\t\t\t\t\tJSON.stringify(hotUpdateChunkFilename),\n\t\t\t\t\t{\n\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`,\n\t\t\t\t\t\tchunk: {\n\t\t\t\t\t\t\tid: '\" + chunkId + \"',\n\t\t\t\t\t\t\thash: `\" + ${JSON.stringify(chunkMaps.hash)}[chunkId] + \"`,\n\t\t\t\t\t\t\thashWithLength: length => {\n\t\t\t\t\t\t\t\tconst shortChunkHashMap = {};\n\t\t\t\t\t\t\t\tfor (const chunkId of Object.keys(chunkMaps.hash)) {\n\t\t\t\t\t\t\t\t\tif (typeof chunkMaps.hash[chunkId] === \"string\") {\n\t\t\t\t\t\t\t\t\t\tshortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(\n\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\tlength\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn `\" + ${JSON.stringify(shortChunkHashMap)}[chunkId] + \"`;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tname: `\" + (${JSON.stringify(\n\t\t\t\t\t\t\t\tchunkMaps.name\n\t\t\t\t\t\t\t)}[chunkId]||chunkId) + \"`\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconst currentHotUpdateMainFilename = mainTemplate.getAssetPath(\n\t\t\t\t\tJSON.stringify(hotUpdateMainFilename),\n\t\t\t\t\t{\n\t\t\t\t\t\thash: `\" + ${mainTemplate.renderCurrentHashCode(hash)} + \"`,\n\t\t\t\t\t\thashWithLength: length =>\n\t\t\t\t\t\t\t`\" + ${mainTemplate.renderCurrentHashCode(hash, length)} + \"`\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\treturn Template.getFunctionContent(\n\t\t\t\t\tasyncChunkLoading\n\t\t\t\t\t\t? require(\"./NodeMainTemplateAsync.runtime\")\n\t\t\t\t\t\t: require(\"./NodeMainTemplate.runtime\")\n\t\t\t\t)\n\t\t\t\t\t.replace(/\\$require\\$/g, mainTemplate.requireFn)\n\t\t\t\t\t.replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename)\n\t\t\t\t\t.replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename);\n\t\t\t}\n\t\t);\n\t\tmainTemplate.hooks.hash.tap(\"NodeMainTemplatePlugin\", hash => {\n\t\t\thash.update(\"node\");\n\t\t\thash.update(\"4\");\n\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}