{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar createHash = require(\"./util/createHash\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\nvar HashedModuleIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  function HashedModuleIdsPlugin(options) {\n    _classCallCheck(this, HashedModuleIdsPlugin);\n    if (!options) options = {};\n    validateOptions(schema, options, \"Hashed Module Ids Plugin\");\n\n    /** @type {HashedModuleIdsPluginOptions} */\n    this.options = Object.assign({\n      context: null,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4\n    }, options);\n  }\n  _createClass(HashedModuleIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      var options = this.options;\n      compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", function (compilation) {\n        var usedIds = new Set();\n        compilation.hooks.beforeModuleIds.tap(\"HashedModuleIdsPlugin\", function (modules) {\n          var _iterator = _createForOfIteratorHelper(modules),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              if (_module.id === null && _module.libIdent) {\n                var id = _module.libIdent({\n                  context: _this.options.context || compiler.options.context\n                });\n                var hash = createHash(options.hashFunction);\n                hash.update(id);\n                var hashId = /** @type {string} */hash.digest(options.hashDigest);\n                var len = options.hashDigestLength;\n                while (usedIds.has(hashId.substr(0, len))) {\n                  len++;\n                }\n                _module.id = hashId.substr(0, len);\n                usedIds.add(_module.id);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n  return HashedModuleIdsPlugin;\n}();\nmodule.exports = HashedModuleIdsPlugin;","map":{"version":3,"names":["createHash","require","validateOptions","schema","HashedModuleIdsPlugin","options","Object","assign","context","hashFunction","hashDigest","hashDigestLength","compiler","hooks","compilation","tap","usedIds","Set","beforeModuleIds","modules","module","id","libIdent","hash","update","hashId","digest","len","has","substr","add","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/HashedModuleIdsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\nclass HashedModuleIdsPlugin {\n\t/**\n\t * @param {HashedModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options) {\n\t\tif (!options) options = {};\n\n\t\tvalidateOptions(schema, options, \"Hashed Module Ids Plugin\");\n\n\t\t/** @type {HashedModuleIdsPluginOptions} */\n\t\tthis.options = Object.assign(\n\t\t\t{\n\t\t\t\tcontext: null,\n\t\t\t\thashFunction: \"md4\",\n\t\t\t\thashDigest: \"base64\",\n\t\t\t\thashDigestLength: 4\n\t\t\t},\n\t\t\toptions\n\t\t);\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tcompiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n\t\t\tconst usedIds = new Set();\n\t\t\tcompilation.hooks.beforeModuleIds.tap(\n\t\t\t\t\"HashedModuleIdsPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tfor (const module of modules) {\n\t\t\t\t\t\tif (module.id === null && module.libIdent) {\n\t\t\t\t\t\t\tconst id = module.libIdent({\n\t\t\t\t\t\t\t\tcontext: this.options.context || compiler.options.context\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst hash = createHash(options.hashFunction);\n\t\t\t\t\t\t\thash.update(id);\n\t\t\t\t\t\t\tconst hashId = /** @type {string} */ (hash.digest(\n\t\t\t\t\t\t\t\toptions.hashDigest\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tlet len = options.hashDigestLength;\n\t\t\t\t\t\t\twhile (usedIds.has(hashId.substr(0, len))) len++;\n\t\t\t\t\t\t\tmodule.id = hashId.substr(0, len);\n\t\t\t\t\t\t\tusedIds.add(module.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = HashedModuleIdsPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AACb,IAAMA,UAAU,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAE/C,IAAMC,eAAe,GAAGD,OAAO,CAAC,cAAc,CAAC;AAC/C,IAAME,MAAM,GAAGF,OAAO,CAAC,+CAA+C,CAAC;;AAEvE;AAAA,IAEMG,qBAAqB;EAC1B;AACD;AACA;EACC,+BAAYC,OAAO,EAAE;IAAA;IACpB,IAAI,CAACA,OAAO,EAAEA,OAAO,GAAG,CAAC,CAAC;IAE1BH,eAAe,CAACC,MAAM,EAAEE,OAAO,EAAE,0BAA0B,CAAC;;IAE5D;IACA,IAAI,CAACA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAC3B;MACCC,OAAO,EAAE,IAAI;MACbC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,QAAQ;MACpBC,gBAAgB,EAAE;IACnB,CAAC,EACDN,OAAO,CACP;EACF;EAAC;IAAA;IAAA,OAED,eAAMO,QAAQ,EAAE;MAAA;MACf,IAAMP,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5BO,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,uBAAuB,EAAE,UAAAD,WAAW,EAAI;QACtE,IAAME,OAAO,GAAG,IAAIC,GAAG,EAAE;QACzBH,WAAW,CAACD,KAAK,CAACK,eAAe,CAACH,GAAG,CACpC,uBAAuB,EACvB,UAAAI,OAAO,EAAI;UAAA,2CACWA,OAAO;YAAA;UAAA;YAA5B,oDAA8B;cAAA,IAAnBC,OAAM;cAChB,IAAIA,OAAM,CAACC,EAAE,KAAK,IAAI,IAAID,OAAM,CAACE,QAAQ,EAAE;gBAC1C,IAAMD,EAAE,GAAGD,OAAM,CAACE,QAAQ,CAAC;kBAC1Bd,OAAO,EAAE,KAAI,CAACH,OAAO,CAACG,OAAO,IAAII,QAAQ,CAACP,OAAO,CAACG;gBACnD,CAAC,CAAC;gBACF,IAAMe,IAAI,GAAGvB,UAAU,CAACK,OAAO,CAACI,YAAY,CAAC;gBAC7Cc,IAAI,CAACC,MAAM,CAACH,EAAE,CAAC;gBACf,IAAMI,MAAM,GAAG,qBAAuBF,IAAI,CAACG,MAAM,CAChDrB,OAAO,CAACK,UAAU,CACjB;gBACF,IAAIiB,GAAG,GAAGtB,OAAO,CAACM,gBAAgB;gBAClC,OAAOK,OAAO,CAACY,GAAG,CAACH,MAAM,CAACI,MAAM,CAAC,CAAC,EAAEF,GAAG,CAAC,CAAC;kBAAEA,GAAG,EAAE;gBAAC;gBACjDP,OAAM,CAACC,EAAE,GAAGI,MAAM,CAACI,MAAM,CAAC,CAAC,EAAEF,GAAG,CAAC;gBACjCX,OAAO,CAACc,GAAG,CAACV,OAAM,CAACC,EAAE,CAAC;cACvB;YACD;UAAC;YAAA;UAAA;YAAA;UAAA;QACF,CAAC,CACD;MACF,CAAC,CAAC;IACH;EAAC;EAAA;AAAA;AAGFD,MAAM,CAACW,OAAO,GAAG3B,qBAAqB"},"metadata":{},"sourceType":"script"}