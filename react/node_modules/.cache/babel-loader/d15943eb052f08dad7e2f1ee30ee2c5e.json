{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n// TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar OccurrenceOrderPlugin = /*#__PURE__*/function () {\n  function OccurrenceOrderPlugin(preferEntry) {\n    _classCallCheck(this, OccurrenceOrderPlugin);\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n    this.preferEntry = preferEntry;\n  }\n  _createClass(OccurrenceOrderPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var preferEntry = this.preferEntry;\n      compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", function (compilation) {\n        compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", function (modules) {\n          var occursInInitialChunksMap = new Map();\n          var occursInAllChunksMap = new Map();\n          var initialChunkChunkMap = new Map();\n          var entryCountMap = new Map();\n          var _iterator = _createForOfIteratorHelper(modules),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _m = _step.value;\n              var initial = 0;\n              var entry = 0;\n              var _iterator4 = _createForOfIteratorHelper(_m.chunksIterable),\n                _step4;\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var c = _step4.value;\n                  if (c.canBeInitial()) initial++;\n                  if (c.entryModule === _m) entry++;\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              initialChunkChunkMap.set(_m, initial);\n              entryCountMap.set(_m, entry);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var countOccursInEntry = function countOccursInEntry(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n            return sum + initialChunkChunkMap.get(r.module);\n          };\n          var countOccurs = function countOccurs(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n            var factor = 1;\n            if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n              factor = r.dependency.getNumberOfIdOccurrences();\n            }\n            if (factor === 0) {\n              return sum;\n            }\n            return sum + factor * r.module.getNumberOfChunks();\n          };\n          if (preferEntry) {\n            var _iterator2 = _createForOfIteratorHelper(modules),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var m = _step2.value;\n                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n                occursInInitialChunksMap.set(m, result);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n          var originalOrder = new Map();\n          var i = 0;\n          var _iterator3 = _createForOfIteratorHelper(modules),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _m2 = _step3.value;\n              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);\n              occursInAllChunksMap.set(_m2, _result);\n              originalOrder.set(_m2, i++);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          modules.sort(function (a, b) {\n            if (preferEntry) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n            var aOccurs = occursInAllChunksMap.get(a);\n            var bOccurs = occursInAllChunksMap.get(b);\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n        compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", function (chunks) {\n          var occursInInitialChunksMap = new Map();\n          var originalOrder = new Map();\n          var i = 0;\n          var _iterator5 = _createForOfIteratorHelper(chunks),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var c = _step5.value;\n              var occurs = 0;\n              var _iterator6 = _createForOfIteratorHelper(c.groupsIterable),\n                _step6;\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var chunkGroup = _step6.value;\n                  var _iterator7 = _createForOfIteratorHelper(chunkGroup.parentsIterable),\n                    _step7;\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var parent = _step7.value;\n                      if (parent.isInitial()) occurs++;\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n              occursInInitialChunksMap.set(c, occurs);\n              originalOrder.set(c, i++);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          chunks.sort(function (a, b) {\n            var aEntryOccurs = occursInInitialChunksMap.get(a);\n            var bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n            var aOccurs = a.getNumberOfGroups();\n            var bOccurs = b.getNumberOfGroups();\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n      });\n    }\n  }]);\n  return OccurrenceOrderPlugin;\n}();\nmodule.exports = OccurrenceOrderPlugin;","map":{"version":3,"names":["OccurrenceOrderPlugin","preferEntry","undefined","Error","compiler","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","chunksIterable","c","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","optimizeChunkOrder","chunks","occurs","groupsIterable","chunkGroup","parentsIterable","parent","isInitial","getNumberOfGroups","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/optimize/OccurrenceOrderPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\n// TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\nclass OccurrenceOrderPlugin {\n\tconstructor(preferEntry) {\n\t\tif (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.preferEntry = preferEntry;\n\t}\n\tapply(compiler) {\n\t\tconst preferEntry = this.preferEntry;\n\t\tcompiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tmodules => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + initialChunkChunkMap.get(r.module);\n\t\t\t\t\t};\n\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t};\n\n\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\tif (preferEntry) {\n\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\tcompilation.hooks.optimizeChunkOrder.tap(\n\t\t\t\t\"OccurrenceOrderPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\tconst originalOrder = new Map();\n\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const c of chunks) {\n\t\t\t\t\t\tlet occurs = 0;\n\t\t\t\t\t\tfor (const chunkGroup of c.groupsIterable) {\n\t\t\t\t\t\t\tfor (const parent of chunkGroup.parentsIterable) {\n\t\t\t\t\t\t\t\tif (parent.isInitial()) occurs++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\toccursInInitialChunksMap.set(c, occurs);\n\t\t\t\t\t\toriginalOrder.set(c, i++);\n\t\t\t\t\t}\n\n\t\t\t\t\tchunks.sort((a, b) => {\n\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\tconst aOccurs = a.getNumberOfGroups();\n\t\t\t\t\t\tconst bOccurs = b.getNumberOfGroups();\n\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\n\nmodule.exports = OccurrenceOrderPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}