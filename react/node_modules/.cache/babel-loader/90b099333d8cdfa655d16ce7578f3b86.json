{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _assertThisInitialized = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar parseJson = require(\"json-parse-better-errors\");\nvar DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nvar DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nvar ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nvar DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nvar NullFactory = require(\"./NullFactory\");\nvar makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nvar WebpackError = require(\"./WebpackError\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\nvar DllReferencePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {DllReferencePluginOptions} options options object\n   */\n  function DllReferencePlugin(options) {\n    _classCallCheck(this, DllReferencePlugin);\n    validateOptions(schema, options, \"Dll Reference Plugin\");\n    this.options = options;\n  }\n  _createClass(DllReferencePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(DelegatedSourceDependency, normalModuleFactory);\n        compilation.dependencyFactories.set(DelegatedExportsDependency, new NullFactory());\n      });\n      compiler.hooks.beforeCompile.tapAsync(\"DllReferencePlugin\", function (params, callback) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n          if (typeof manifest === \"string\") {\n            params.compilationDependencies.add(manifest);\n            compiler.inputFileSystem.readFile(manifest, function (err, result) {\n              if (err) return callback(err);\n              // Catch errors parsing the manifest so that blank\n              // or malformed manifest files don't kill the process.\n              try {\n                params[\"dll reference \" + manifest] = parseJson(result.toString(\"utf-8\"));\n              } catch (e) {\n                // Store the error in the params so that it can\n                // be added as a compilation error later on.\n                var manifestPath = makePathsRelative(compiler.options.context, manifest);\n                params[\"dll reference parse error \" + manifest] = new DllManifestError(manifestPath, e.message);\n              }\n              return callback();\n            });\n            return;\n          }\n        }\n        return callback();\n      });\n      compiler.hooks.compile.tap(\"DllReferencePlugin\", function (params) {\n        var name = _this.options.name;\n        var sourceType = _this.options.sourceType;\n        var content = \"content\" in _this.options ? _this.options.content : undefined;\n        if (\"manifest\" in _this.options) {\n          var manifestParameter = _this.options.manifest;\n          var manifest;\n          if (typeof manifestParameter === \"string\") {\n            // If there was an error parsing the manifest\n            // file, exit now because the error will be added\n            // as a compilation error in the \"compilation\" hook.\n            if (params[\"dll reference parse error \" + manifestParameter]) {\n              return;\n            }\n            manifest = /** @type {DllReferencePluginOptionsManifest} */params[\"dll reference \" + manifestParameter];\n          } else {\n            manifest = manifestParameter;\n          }\n          if (manifest) {\n            if (!name) name = manifest.name;\n            if (!sourceType) sourceType = manifest.type;\n            if (!content) content = manifest.content;\n          }\n        }\n        var externals = {};\n        var source = \"dll-reference \" + name;\n        externals[source] = name;\n        var normalModuleFactory = params.normalModuleFactory;\n        new ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(normalModuleFactory);\n        new DelegatedModuleFactoryPlugin({\n          source: source,\n          type: _this.options.type,\n          scope: _this.options.scope,\n          context: _this.options.context || compiler.options.context,\n          content: content,\n          extensions: _this.options.extensions\n        }).apply(normalModuleFactory);\n      });\n      compiler.hooks.compilation.tap(\"DllReferencePlugin\", function (compilation, params) {\n        if (\"manifest\" in _this.options) {\n          var manifest = _this.options.manifest;\n          if (typeof manifest === \"string\") {\n            // If there was an error parsing the manifest file, add the\n            // error as a compilation error to make the compilation fail.\n            var e = params[\"dll reference parse error \" + manifest];\n            if (e) {\n              compilation.errors.push(e);\n            }\n          }\n        }\n      });\n    }\n  }]);\n  return DllReferencePlugin;\n}();\nvar DllManifestError = /*#__PURE__*/function (_WebpackError) {\n  _inherits(DllManifestError, _WebpackError);\n  var _super = _createSuper(DllManifestError);\n  function DllManifestError(filename, message) {\n    var _this2;\n    _classCallCheck(this, DllManifestError);\n    _this2 = _super.call(this);\n    _this2.name = \"DllManifestError\";\n    _this2.message = \"Dll manifest \".concat(filename, \"\\n\").concat(message);\n    Error.captureStackTrace(_assertThisInitialized(_this2), _this2.constructor);\n    return _this2;\n  }\n  return _createClass(DllManifestError);\n}(WebpackError);\nmodule.exports = DllReferencePlugin;","map":{"version":3,"names":["parseJson","require","DelegatedSourceDependency","DelegatedModuleFactoryPlugin","ExternalModuleFactoryPlugin","DelegatedExportsDependency","NullFactory","makePathsRelative","WebpackError","validateOptions","schema","DllReferencePlugin","options","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","beforeCompile","tapAsync","params","callback","manifest","compilationDependencies","add","inputFileSystem","readFile","err","result","toString","e","manifestPath","context","DllManifestError","message","compile","name","sourceType","content","undefined","manifestParameter","type","externals","source","apply","scope","extensions","errors","push","filename","Error","captureStackTrace","constructor","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/DllReferencePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst parseJson = require(\"json-parse-better-errors\");\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\nconst DelegatedModuleFactoryPlugin = require(\"./DelegatedModuleFactoryPlugin\");\nconst ExternalModuleFactoryPlugin = require(\"./ExternalModuleFactoryPlugin\");\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\nconst NullFactory = require(\"./NullFactory\");\nconst makePathsRelative = require(\"./util/identifier\").makePathsRelative;\nconst WebpackError = require(\"./WebpackError\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/DllReferencePlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptions} DllReferencePluginOptions */\n/** @typedef {import(\"../declarations/plugins/DllReferencePlugin\").DllReferencePluginOptionsManifest} DllReferencePluginOptionsManifest */\n\nclass DllReferencePlugin {\n\t/**\n\t * @param {DllReferencePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Dll Reference Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedSourceDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tDelegatedExportsDependency,\n\t\t\t\t\tnew NullFactory()\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.beforeCompile.tapAsync(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(params, callback) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tconst manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\tparams.compilationDependencies.add(manifest);\n\t\t\t\t\t\tcompiler.inputFileSystem.readFile(manifest, (err, result) => {\n\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t// Catch errors parsing the manifest so that blank\n\t\t\t\t\t\t\t// or malformed manifest files don't kill the process.\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tparams[\"dll reference \" + manifest] = parseJson(\n\t\t\t\t\t\t\t\t\tresult.toString(\"utf-8\")\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t// Store the error in the params so that it can\n\t\t\t\t\t\t\t\t// be added as a compilation error later on.\n\t\t\t\t\t\t\t\tconst manifestPath = makePathsRelative(\n\t\t\t\t\t\t\t\t\tcompiler.options.context,\n\t\t\t\t\t\t\t\t\tmanifest\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tparams[\n\t\t\t\t\t\t\t\t\t\"dll reference parse error \" + manifest\n\t\t\t\t\t\t\t\t] = new DllManifestError(manifestPath, e.message);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn callback();\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.compile.tap(\"DllReferencePlugin\", params => {\n\t\t\tlet name = this.options.name;\n\t\t\tlet sourceType = this.options.sourceType;\n\t\t\tlet content =\n\t\t\t\t\"content\" in this.options ? this.options.content : undefined;\n\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\tlet manifestParameter = this.options.manifest;\n\t\t\t\tlet manifest;\n\t\t\t\tif (typeof manifestParameter === \"string\") {\n\t\t\t\t\t// If there was an error parsing the manifest\n\t\t\t\t\t// file, exit now because the error will be added\n\t\t\t\t\t// as a compilation error in the \"compilation\" hook.\n\t\t\t\t\tif (params[\"dll reference parse error \" + manifestParameter]) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tmanifest =\n\t\t\t\t\t\t/** @type {DllReferencePluginOptionsManifest} */ (params[\n\t\t\t\t\t\t\t\"dll reference \" + manifestParameter\n\t\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tmanifest = manifestParameter;\n\t\t\t\t}\n\t\t\t\tif (manifest) {\n\t\t\t\t\tif (!name) name = manifest.name;\n\t\t\t\t\tif (!sourceType) sourceType = manifest.type;\n\t\t\t\t\tif (!content) content = manifest.content;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst externals = {};\n\t\t\tconst source = \"dll-reference \" + name;\n\t\t\texternals[source] = name;\n\t\t\tconst normalModuleFactory = params.normalModuleFactory;\n\t\t\tnew ExternalModuleFactoryPlugin(sourceType || \"var\", externals).apply(\n\t\t\t\tnormalModuleFactory\n\t\t\t);\n\t\t\tnew DelegatedModuleFactoryPlugin({\n\t\t\t\tsource: source,\n\t\t\t\ttype: this.options.type,\n\t\t\t\tscope: this.options.scope,\n\t\t\t\tcontext: this.options.context || compiler.options.context,\n\t\t\t\tcontent,\n\t\t\t\textensions: this.options.extensions\n\t\t\t}).apply(normalModuleFactory);\n\t\t});\n\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DllReferencePlugin\",\n\t\t\t(compilation, params) => {\n\t\t\t\tif (\"manifest\" in this.options) {\n\t\t\t\t\tlet manifest = this.options.manifest;\n\t\t\t\t\tif (typeof manifest === \"string\") {\n\t\t\t\t\t\t// If there was an error parsing the manifest file, add the\n\t\t\t\t\t\t// error as a compilation error to make the compilation fail.\n\t\t\t\t\t\tlet e = params[\"dll reference parse error \" + manifest];\n\t\t\t\t\t\tif (e) {\n\t\t\t\t\t\t\tcompilation.errors.push(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n}\n\nclass DllManifestError extends WebpackError {\n\tconstructor(filename, message) {\n\t\tsuper();\n\n\t\tthis.name = \"DllManifestError\";\n\t\tthis.message = `Dll manifest ${filename}\\n${message}`;\n\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nmodule.exports = DllReferencePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAEb,IAAMA,SAAS,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACrD,IAAMC,yBAAyB,GAAGD,OAAO,CAAC,0CAA0C,CAAC;AACrF,IAAME,4BAA4B,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAC9E,IAAMG,2BAA2B,GAAGH,OAAO,CAAC,+BAA+B,CAAC;AAC5E,IAAMI,0BAA0B,GAAGJ,OAAO,CAAC,2CAA2C,CAAC;AACvF,IAAMK,WAAW,GAAGL,OAAO,CAAC,eAAe,CAAC;AAC5C,IAAMM,iBAAiB,GAAGN,OAAO,CAAC,mBAAmB,CAAC,CAACM,iBAAiB;AACxE,IAAMC,YAAY,GAAGP,OAAO,CAAC,gBAAgB,CAAC;AAE9C,IAAMQ,eAAe,GAAGR,OAAO,CAAC,cAAc,CAAC;AAC/C,IAAMS,MAAM,GAAGT,OAAO,CAAC,4CAA4C,CAAC;;AAEpE;AACA;AAAA,IAEMU,kBAAkB;EACvB;AACD;AACA;EACC,4BAAYC,OAAO,EAAE;IAAA;IACpBH,eAAe,CAACC,MAAM,EAAEE,OAAO,EAAE,sBAAsB,CAAC;IACxD,IAAI,CAACA,OAAO,GAAGA,OAAO;EACvB;EAAC;IAAA;IAAA,OAED,eAAMC,QAAQ,EAAE;MAAA;MACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,oBAAoB,EACpB,UAACD,WAAW,QAA8B;QAAA,IAA1BE,mBAAmB,QAAnBA,mBAAmB;QAClCF,WAAW,CAACG,mBAAmB,CAACC,GAAG,CAClCjB,yBAAyB,EACzBe,mBAAmB,CACnB;QACDF,WAAW,CAACG,mBAAmB,CAACC,GAAG,CAClCd,0BAA0B,EAC1B,IAAIC,WAAW,EAAE,CACjB;MACF,CAAC,CACD;MAEDO,QAAQ,CAACC,KAAK,CAACM,aAAa,CAACC,QAAQ,CACpC,oBAAoB,EACpB,UAACC,MAAM,EAAEC,QAAQ,EAAK;QACrB,IAAI,UAAU,IAAI,KAAI,CAACX,OAAO,EAAE;UAC/B,IAAMY,QAAQ,GAAG,KAAI,CAACZ,OAAO,CAACY,QAAQ;UACtC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;YACjCF,MAAM,CAACG,uBAAuB,CAACC,GAAG,CAACF,QAAQ,CAAC;YAC5CX,QAAQ,CAACc,eAAe,CAACC,QAAQ,CAACJ,QAAQ,EAAE,UAACK,GAAG,EAAEC,MAAM,EAAK;cAC5D,IAAID,GAAG,EAAE,OAAON,QAAQ,CAACM,GAAG,CAAC;cAC7B;cACA;cACA,IAAI;gBACHP,MAAM,CAAC,gBAAgB,GAAGE,QAAQ,CAAC,GAAGxB,SAAS,CAC9C8B,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC,CACxB;cACF,CAAC,CAAC,OAAOC,CAAC,EAAE;gBACX;gBACA;gBACA,IAAMC,YAAY,GAAG1B,iBAAiB,CACrCM,QAAQ,CAACD,OAAO,CAACsB,OAAO,EACxBV,QAAQ,CACR;gBACDF,MAAM,CACL,4BAA4B,GAAGE,QAAQ,CACvC,GAAG,IAAIW,gBAAgB,CAACF,YAAY,EAAED,CAAC,CAACI,OAAO,CAAC;cAClD;cACA,OAAOb,QAAQ,EAAE;YAClB,CAAC,CAAC;YACF;UACD;QACD;QACA,OAAOA,QAAQ,EAAE;MAClB,CAAC,CACD;MAEDV,QAAQ,CAACC,KAAK,CAACuB,OAAO,CAACrB,GAAG,CAAC,oBAAoB,EAAE,UAAAM,MAAM,EAAI;QAC1D,IAAIgB,IAAI,GAAG,KAAI,CAAC1B,OAAO,CAAC0B,IAAI;QAC5B,IAAIC,UAAU,GAAG,KAAI,CAAC3B,OAAO,CAAC2B,UAAU;QACxC,IAAIC,OAAO,GACV,SAAS,IAAI,KAAI,CAAC5B,OAAO,GAAG,KAAI,CAACA,OAAO,CAAC4B,OAAO,GAAGC,SAAS;QAC7D,IAAI,UAAU,IAAI,KAAI,CAAC7B,OAAO,EAAE;UAC/B,IAAI8B,iBAAiB,GAAG,KAAI,CAAC9B,OAAO,CAACY,QAAQ;UAC7C,IAAIA,QAAQ;UACZ,IAAI,OAAOkB,iBAAiB,KAAK,QAAQ,EAAE;YAC1C;YACA;YACA;YACA,IAAIpB,MAAM,CAAC,4BAA4B,GAAGoB,iBAAiB,CAAC,EAAE;cAC7D;YACD;YACAlB,QAAQ,GACP,gDAAkDF,MAAM,CACvD,gBAAgB,GAAGoB,iBAAiB,CACnC;UACJ,CAAC,MAAM;YACNlB,QAAQ,GAAGkB,iBAAiB;UAC7B;UACA,IAAIlB,QAAQ,EAAE;YACb,IAAI,CAACc,IAAI,EAAEA,IAAI,GAAGd,QAAQ,CAACc,IAAI;YAC/B,IAAI,CAACC,UAAU,EAAEA,UAAU,GAAGf,QAAQ,CAACmB,IAAI;YAC3C,IAAI,CAACH,OAAO,EAAEA,OAAO,GAAGhB,QAAQ,CAACgB,OAAO;UACzC;QACD;QACA,IAAMI,SAAS,GAAG,CAAC,CAAC;QACpB,IAAMC,MAAM,GAAG,gBAAgB,GAAGP,IAAI;QACtCM,SAAS,CAACC,MAAM,CAAC,GAAGP,IAAI;QACxB,IAAMrB,mBAAmB,GAAGK,MAAM,CAACL,mBAAmB;QACtD,IAAIb,2BAA2B,CAACmC,UAAU,IAAI,KAAK,EAAEK,SAAS,CAAC,CAACE,KAAK,CACpE7B,mBAAmB,CACnB;QACD,IAAId,4BAA4B,CAAC;UAChC0C,MAAM,EAAEA,MAAM;UACdF,IAAI,EAAE,KAAI,CAAC/B,OAAO,CAAC+B,IAAI;UACvBI,KAAK,EAAE,KAAI,CAACnC,OAAO,CAACmC,KAAK;UACzBb,OAAO,EAAE,KAAI,CAACtB,OAAO,CAACsB,OAAO,IAAIrB,QAAQ,CAACD,OAAO,CAACsB,OAAO;UACzDM,OAAO,EAAPA,OAAO;UACPQ,UAAU,EAAE,KAAI,CAACpC,OAAO,CAACoC;QAC1B,CAAC,CAAC,CAACF,KAAK,CAAC7B,mBAAmB,CAAC;MAC9B,CAAC,CAAC;MAEFJ,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,oBAAoB,EACpB,UAACD,WAAW,EAAEO,MAAM,EAAK;QACxB,IAAI,UAAU,IAAI,KAAI,CAACV,OAAO,EAAE;UAC/B,IAAIY,QAAQ,GAAG,KAAI,CAACZ,OAAO,CAACY,QAAQ;UACpC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;YACjC;YACA;YACA,IAAIQ,CAAC,GAAGV,MAAM,CAAC,4BAA4B,GAAGE,QAAQ,CAAC;YACvD,IAAIQ,CAAC,EAAE;cACNjB,WAAW,CAACkC,MAAM,CAACC,IAAI,CAAClB,CAAC,CAAC;YAC3B;UACD;QACD;MACD,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAAA,IAGIG,gBAAgB;EAAA;EAAA;EACrB,0BAAYgB,QAAQ,EAAEf,OAAO,EAAE;IAAA;IAAA;IAC9B;IAEA,OAAKE,IAAI,GAAG,kBAAkB;IAC9B,OAAKF,OAAO,0BAAmBe,QAAQ,eAAKf,OAAO,CAAE;IAErDgB,KAAK,CAACC,iBAAiB,iCAAO,OAAKC,WAAW,CAAC;IAAC;EACjD;EAAC;AAAA,EAR6B9C,YAAY;AAW3C+C,MAAM,CAACC,OAAO,GAAG7C,kBAAkB"},"metadata":{},"sourceType":"script"}