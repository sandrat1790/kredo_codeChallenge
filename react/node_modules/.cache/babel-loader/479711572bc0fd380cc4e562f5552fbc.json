{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nvar MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\nvar MultiEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  function MultiEntryPlugin(context, entries, name) {\n    _classCallCheck(this, MultiEntryPlugin);\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(MultiEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"MultiEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var multiModuleFactory = new MultiModuleFactory();\n        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", function (compilation, callback) {\n        var context = _this.context,\n          entries = _this.entries,\n          name = _this.name;\n        var dep = MultiEntryPlugin.createDependency(entries, name);\n        compilation.addEntry(context, dep, name, callback);\n      });\n    }\n\n    /**\n     * @param {string[]} entries each entry path string\n     * @param {string} name name of the entry\n     * @returns {MultiEntryDependency} returns a constructed Dependency\n     */\n  }], [{\n    key: \"createDependency\",\n    value: function createDependency(entries, name) {\n      return new MultiEntryDependency(entries.map(function (e, idx) {\n        var dep = new SingleEntryDependency(e);\n        // Because entrypoints are not dependencies found in an\n        // existing module, we give it a synthetic id\n        dep.loc = {\n          name: name,\n          index: idx\n        };\n        return dep;\n      }), name);\n    }\n  }]);\n  return MultiEntryPlugin;\n}();\nmodule.exports = MultiEntryPlugin;","map":{"version":3,"names":["MultiEntryDependency","require","SingleEntryDependency","MultiModuleFactory","MultiEntryPlugin","context","entries","name","compiler","hooks","compilation","tap","normalModuleFactory","multiModuleFactory","dependencyFactories","set","make","tapAsync","callback","dep","createDependency","addEntry","map","e","idx","loc","index","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/MultiEntryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass MultiEntryPlugin {\n\t/**\n\t * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n\t * @param {string} context context path\n\t * @param {string[]} entries array of entry paths\n\t * @param {string} name entry key name\n\t */\n\tconstructor(context, entries, name) {\n\t\tthis.context = context;\n\t\tthis.entries = entries;\n\t\tthis.name = name;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst multiModuleFactory = new MultiModuleFactory();\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tMultiEntryDependency,\n\t\t\t\t\tmultiModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"MultiEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\tconst { context, entries, name } = this;\n\n\t\t\t\tconst dep = MultiEntryPlugin.createDependency(entries, name);\n\t\t\t\tcompilation.addEntry(context, dep, name, callback);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * @param {string[]} entries each entry path string\n\t * @param {string} name name of the entry\n\t * @returns {MultiEntryDependency} returns a constructed Dependency\n\t */\n\tstatic createDependency(entries, name) {\n\t\treturn new MultiEntryDependency(\n\t\t\tentries.map((e, idx) => {\n\t\t\t\tconst dep = new SingleEntryDependency(e);\n\t\t\t\t// Because entrypoints are not dependencies found in an\n\t\t\t\t// existing module, we give it a synthetic id\n\t\t\t\tdep.loc = {\n\t\t\t\t\tname,\n\t\t\t\t\tindex: idx\n\t\t\t\t};\n\t\t\t\treturn dep;\n\t\t\t}),\n\t\t\tname\n\t\t);\n\t}\n}\n\nmodule.exports = MultiEntryPlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAEb,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,qCAAqC,CAAC;AAC3E,IAAMC,qBAAqB,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AAC7E,IAAME,kBAAkB,GAAGF,OAAO,CAAC,sBAAsB,CAAC;;AAE1D;AAAA,IAEMG,gBAAgB;EACrB;AACD;AACA;AACA;AACA;AACA;EACC,0BAAYC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAE;IAAA;IACnC,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;EACjB;;EAEA;AACD;AACA;AACA;EAHC;IAAA;IAAA,OAIA,eAAMC,QAAQ,EAAE;MAAA;MACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,kBAAkB,EAClB,UAACD,WAAW,QAA8B;QAAA,IAA1BE,mBAAmB,QAAnBA,mBAAmB;QAClC,IAAMC,kBAAkB,GAAG,IAAIV,kBAAkB,EAAE;QAEnDO,WAAW,CAACI,mBAAmB,CAACC,GAAG,CAClCf,oBAAoB,EACpBa,kBAAkB,CAClB;QACDH,WAAW,CAACI,mBAAmB,CAACC,GAAG,CAClCb,qBAAqB,EACrBU,mBAAmB,CACnB;MACF,CAAC,CACD;MAEDJ,QAAQ,CAACC,KAAK,CAACO,IAAI,CAACC,QAAQ,CAC3B,kBAAkB,EAClB,UAACP,WAAW,EAAEQ,QAAQ,EAAK;QAC1B,IAAQb,OAAO,GAAoB,KAAI,CAA/BA,OAAO;UAAEC,OAAO,GAAW,KAAI,CAAtBA,OAAO;UAAEC,IAAI,GAAK,KAAI,CAAbA,IAAI;QAE9B,IAAMY,GAAG,GAAGf,gBAAgB,CAACgB,gBAAgB,CAACd,OAAO,EAAEC,IAAI,CAAC;QAC5DG,WAAW,CAACW,QAAQ,CAAChB,OAAO,EAAEc,GAAG,EAAEZ,IAAI,EAAEW,QAAQ,CAAC;MACnD,CAAC,CACD;IACF;;IAEA;AACD;AACA;AACA;AACA;EAJC;IAAA;IAAA,OAKA,0BAAwBZ,OAAO,EAAEC,IAAI,EAAE;MACtC,OAAO,IAAIP,oBAAoB,CAC9BM,OAAO,CAACgB,GAAG,CAAC,UAACC,CAAC,EAAEC,GAAG,EAAK;QACvB,IAAML,GAAG,GAAG,IAAIjB,qBAAqB,CAACqB,CAAC,CAAC;QACxC;QACA;QACAJ,GAAG,CAACM,GAAG,GAAG;UACTlB,IAAI,EAAJA,IAAI;UACJmB,KAAK,EAAEF;QACR,CAAC;QACD,OAAOL,GAAG;MACX,CAAC,CAAC,EACFZ,IAAI,CACJ;IACF;EAAC;EAAA;AAAA;AAGFoB,MAAM,CAACC,OAAO,GAAGxB,gBAAgB"},"metadata":{},"sourceType":"script"}