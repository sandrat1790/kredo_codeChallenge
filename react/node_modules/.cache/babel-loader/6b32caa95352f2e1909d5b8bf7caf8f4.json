{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar SortableSet = require(\"./util/SortableSet\");\nvar compareLocations = require(\"./compareLocations\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\nvar debugId = 5000;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\nvar getArray = function getArray(set) {\n  return Array.from(set);\n};\n\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\nvar sortById = function sortById(a, b) {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\nvar sortOrigin = function sortOrigin(a, b) {\n  var aIdent = a.module ? a.module.identifier() : \"\";\n  var bIdent = b.module ? b.module.identifier() : \"\";\n  if (aIdent < bIdent) return -1;\n  if (aIdent > bIdent) return 1;\n  return compareLocations(a.loc, b.loc);\n};\nvar ChunkGroup = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of ChunkGroup.\n   * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n   */\n  function ChunkGroup(options) {\n    _classCallCheck(this, ChunkGroup);\n    if (typeof options === \"string\") {\n      options = {\n        name: options\n      };\n    } else if (!options) {\n      options = {\n        name: undefined\n      };\n    }\n    /** @type {number} */\n    this.groupDebugId = debugId++;\n    this.options = options;\n    /** @type {SortableSet<ChunkGroup>} */\n    this._children = new SortableSet(undefined, sortById);\n    this._parents = new SortableSet(undefined, sortById);\n    this._blocks = new SortableSet();\n    /** @type {Chunk[]} */\n    this.chunks = [];\n    /** @type {OriginRecord[]} */\n    this.origins = [];\n    /** Indices in top-down order */\n    /** @private @type {Map<Module, number>} */\n    this._moduleIndices = new Map();\n    /** Indices in bottom-up order */\n    /** @private @type {Map<Module, number>} */\n    this._moduleIndices2 = new Map();\n  }\n\n  /**\n   * when a new chunk is added to a chunkGroup, addingOptions will occur.\n   * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n   * @returns {void}\n   */\n  _createClass(ChunkGroup, [{\n    key: \"addOptions\",\n    value: function addOptions(options) {\n      for (var _i = 0, _Object$keys = Object.keys(options); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        if (this.options[key] === undefined) {\n          this.options[key] = options[key];\n        } else if (this.options[key] !== options[key]) {\n          if (key.endsWith(\"Order\")) {\n            this.options[key] = Math.max(this.options[key], options[key]);\n          } else {\n            throw new Error(\"ChunkGroup.addOptions: No option merge strategy for \".concat(key));\n          }\n        }\n      }\n    }\n\n    /**\n     * returns the name of current ChunkGroup\n     * @returns {string|undefined} returns the ChunkGroup name\n     */\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.options.name;\n    }\n\n    /**\n     * sets a new name for current ChunkGroup\n     * @param {string} value the new name for ChunkGroup\n     * @returns {void}\n     */,\n    set: function set(value) {\n      this.options.name = value;\n    }\n\n    /**\n     * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n     * @returns {string} a unique concatenation of chunk debugId's\n     */\n  }, {\n    key: \"debugId\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.debugId;\n      }).join(\"+\");\n    }\n\n    /**\n     * get a unique id for ChunkGroup, made up of its member Chunk id's\n     * @returns {string} a unique concatenation of chunk ids\n     */\n  }, {\n    key: \"id\",\n    get: function get() {\n      return Array.from(this.chunks, function (x) {\n        return x.id;\n      }).join(\"+\");\n    }\n\n    /**\n     * Performs an unshift of a specific chunk\n     * @param {Chunk} chunk chunk being unshifted\n     * @returns {boolean} returns true if attempted chunk shift is accepted\n     */\n  }, {\n    key: \"unshiftChunk\",\n    value: function unshiftChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n      if (oldIdx > 0) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.unshift(chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.unshift(chunk);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * inserts a chunk before another existing chunk in group\n     * @param {Chunk} chunk Chunk being inserted\n     * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n     * @returns {boolean} return true if insertion was successful\n     */\n  }, {\n    key: \"insertChunk\",\n    value: function insertChunk(chunk, before) {\n      var oldIdx = this.chunks.indexOf(chunk);\n      var idx = this.chunks.indexOf(before);\n      if (idx < 0) {\n        throw new Error(\"before chunk not found\");\n      }\n      if (oldIdx >= 0 && oldIdx > idx) {\n        this.chunks.splice(oldIdx, 1);\n        this.chunks.splice(idx, 0, chunk);\n      } else if (oldIdx < 0) {\n        this.chunks.splice(idx, 0, chunk);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * add a chunk into ChunkGroup. Is pushed on or prepended\n     * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n     * @returns {boolean} returns true if chunk addition was successful.\n     */\n  }, {\n    key: \"pushChunk\",\n    value: function pushChunk(chunk) {\n      var oldIdx = this.chunks.indexOf(chunk);\n      if (oldIdx >= 0) {\n        return false;\n      }\n      this.chunks.push(chunk);\n      return true;\n    }\n\n    /**\n     * @param {Chunk} oldChunk chunk to be replaced\n     * @param {Chunk} newChunk New chunk that will be replaced with\n     * @returns {boolean} returns true if the replacement was successful\n     */\n  }, {\n    key: \"replaceChunk\",\n    value: function replaceChunk(oldChunk, newChunk) {\n      var oldIdx = this.chunks.indexOf(oldChunk);\n      if (oldIdx < 0) return false;\n      var newIdx = this.chunks.indexOf(newChunk);\n      if (newIdx < 0) {\n        this.chunks[oldIdx] = newChunk;\n        return true;\n      }\n      if (newIdx < oldIdx) {\n        this.chunks.splice(oldIdx, 1);\n        return true;\n      } else if (newIdx !== oldIdx) {\n        this.chunks[oldIdx] = newChunk;\n        this.chunks.splice(newIdx, 1);\n        return true;\n      }\n    }\n  }, {\n    key: \"removeChunk\",\n    value: function removeChunk(chunk) {\n      var idx = this.chunks.indexOf(chunk);\n      if (idx >= 0) {\n        this.chunks.splice(idx, 1);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"isInitial\",\n    value: function isInitial() {\n      return false;\n    }\n  }, {\n    key: \"addChild\",\n    value: function addChild(chunk) {\n      if (this._children.has(chunk)) {\n        return false;\n      }\n      this._children.add(chunk);\n      return true;\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      return this._children.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfChildren\",\n    value: function getNumberOfChildren() {\n      return this._children.size;\n    }\n  }, {\n    key: \"childrenIterable\",\n    get: function get() {\n      return this._children;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(chunk) {\n      if (!this._children.has(chunk)) {\n        return false;\n      }\n      this._children.delete(chunk);\n      chunk.removeParent(this);\n      return true;\n    }\n  }, {\n    key: \"addParent\",\n    value: function addParent(parentChunk) {\n      if (!this._parents.has(parentChunk)) {\n        this._parents.add(parentChunk);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"getParents\",\n    value: function getParents() {\n      return this._parents.getFromCache(getArray);\n    }\n  }, {\n    key: \"setParents\",\n    value: function setParents(newParents) {\n      this._parents.clear();\n      var _iterator = _createForOfIteratorHelper(newParents),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var p = _step.value;\n          this._parents.add(p);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"getNumberOfParents\",\n    value: function getNumberOfParents() {\n      return this._parents.size;\n    }\n  }, {\n    key: \"hasParent\",\n    value: function hasParent(parent) {\n      return this._parents.has(parent);\n    }\n  }, {\n    key: \"parentsIterable\",\n    get: function get() {\n      return this._parents;\n    }\n  }, {\n    key: \"removeParent\",\n    value: function removeParent(chunk) {\n      if (this._parents.delete(chunk)) {\n        chunk.removeChunk(this);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * @returns {Array} - an array containing the blocks\n     */\n  }, {\n    key: \"getBlocks\",\n    value: function getBlocks() {\n      return this._blocks.getFromCache(getArray);\n    }\n  }, {\n    key: \"getNumberOfBlocks\",\n    value: function getNumberOfBlocks() {\n      return this._blocks.size;\n    }\n  }, {\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      return this._blocks.has(block);\n    }\n  }, {\n    key: \"blocksIterable\",\n    get: function get() {\n      return this._blocks;\n    }\n  }, {\n    key: \"addBlock\",\n    value: function addBlock(block) {\n      if (!this._blocks.has(block)) {\n        this._blocks.add(block);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"addOrigin\",\n    value: function addOrigin(module, loc, request) {\n      this.origins.push({\n        module: module,\n        loc: loc,\n        request: request\n      });\n    }\n  }, {\n    key: \"containsModule\",\n    value: function containsModule(module) {\n      var _iterator2 = _createForOfIteratorHelper(this.chunks),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var chunk = _step2.value;\n          if (chunk.containsModule(module)) return true;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return false;\n    }\n  }, {\n    key: \"getFiles\",\n    value: function getFiles() {\n      var files = new Set();\n      var _iterator3 = _createForOfIteratorHelper(this.chunks),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var chunk = _step3.value;\n          var _iterator4 = _createForOfIteratorHelper(chunk.files),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var file = _step4.value;\n              files.add(file);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return Array.from(files);\n    }\n\n    /**\n     * @param {string=} reason reason for removing ChunkGroup\n     * @returns {void}\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(reason) {\n      // cleanup parents\n      var _iterator5 = _createForOfIteratorHelper(this._parents),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var parentChunkGroup = _step5.value;\n          // remove this chunk from its parents\n          parentChunkGroup._children.delete(this);\n\n          // cleanup \"sub chunks\"\n          var _iterator9 = _createForOfIteratorHelper(this._children),\n            _step9;\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var chunkGroup = _step9.value;\n              /**\n               * remove this chunk as \"intermediary\" and connect\n               * it \"sub chunks\" and parents directly\n               */\n              // add parent to each \"sub chunk\"\n              chunkGroup.addParent(parentChunkGroup);\n              // add \"sub chunk\" to parent\n              parentChunkGroup.addChild(chunkGroup);\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n\n        /**\n         * we need to iterate again over the children\n         * to remove this from the child's parents.\n         * This can not be done in the above loop\n         * as it is not guaranteed that `this._parents` contains anything.\n         */\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      var _iterator6 = _createForOfIteratorHelper(this._children),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _chunkGroup = _step6.value;\n          // remove this as parent of every \"sub chunk\"\n          _chunkGroup._parents.delete(this);\n        }\n\n        // cleanup blocks\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var _iterator7 = _createForOfIteratorHelper(this._blocks),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var block = _step7.value;\n          block.chunkGroup = null;\n        }\n\n        // remove chunks\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      var _iterator8 = _createForOfIteratorHelper(this.chunks),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var chunk = _step8.value;\n          chunk.removeGroup(this);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n  }, {\n    key: \"sortItems\",\n    value: function sortItems() {\n      this.origins.sort(sortOrigin);\n      this._parents.sort();\n      this._children.sort();\n    }\n\n    /**\n     * Sorting predicate which allows current ChunkGroup to be compared against another.\n     * Sorting values are based off of number of chunks in ChunkGroup.\n     *\n     * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n     * @returns {-1|0|1} sort position for comparison\n     */\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(otherGroup) {\n      if (this.chunks.length > otherGroup.chunks.length) return -1;\n      if (this.chunks.length < otherGroup.chunks.length) return 1;\n      var a = this.chunks[Symbol.iterator]();\n      var b = otherGroup.chunks[Symbol.iterator]();\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        var aItem = a.next();\n        var bItem = b.next();\n        if (aItem.done) return 0;\n        var cmp = aItem.value.compareTo(bItem.value);\n        if (cmp !== 0) return cmp;\n      }\n    }\n  }, {\n    key: \"getChildrenByOrders\",\n    value: function getChildrenByOrders() {\n      var lists = new Map();\n      var _iterator10 = _createForOfIteratorHelper(this._children),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var childGroup = _step10.value;\n          // TODO webpack 5 remove this check for options\n          if (typeof childGroup.options === \"object\") {\n            for (var _i2 = 0, _Object$keys2 = Object.keys(childGroup.options); _i2 < _Object$keys2.length; _i2++) {\n              var key = _Object$keys2[_i2];\n              if (key.endsWith(\"Order\")) {\n                var name = key.substr(0, key.length - \"Order\".length);\n                var list = lists.get(name);\n                if (list === undefined) {\n                  lists.set(name, list = []);\n                }\n                list.push({\n                  order: childGroup.options[key],\n                  group: childGroup\n                });\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      var result = Object.create(null);\n      var _iterator11 = _createForOfIteratorHelper(lists),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = _slicedToArray(_step11.value, 2),\n            _name = _step11$value[0],\n            _list = _step11$value[1];\n          _list.sort(function (a, b) {\n            var cmp = b.order - a.order;\n            if (cmp !== 0) return cmp;\n            // TODO webpack 5 remove this check of compareTo\n            if (a.group.compareTo) {\n              return a.group.compareTo(b.group);\n            }\n            return 0;\n          });\n          result[_name] = _list.map(function (i) {\n            return i.group;\n          });\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return result;\n    }\n\n    /**\n     * Sets the top-down index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n  }, {\n    key: \"setModuleIndex\",\n    value: function setModuleIndex(module, index) {\n      this._moduleIndices.set(module, index);\n    }\n\n    /**\n     * Gets the top-down index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n  }, {\n    key: \"getModuleIndex\",\n    value: function getModuleIndex(module) {\n      return this._moduleIndices.get(module);\n    }\n\n    /**\n     * Sets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module module for which the index should be set\n     * @param {number} index the index of the module\n     * @returns {void}\n     */\n  }, {\n    key: \"setModuleIndex2\",\n    value: function setModuleIndex2(module, index) {\n      this._moduleIndices2.set(module, index);\n    }\n\n    /**\n     * Gets the bottom-up index of a module in this ChunkGroup\n     * @param {Module} module the module\n     * @returns {number} index\n     */\n  }, {\n    key: \"getModuleIndex2\",\n    value: function getModuleIndex2(module) {\n      return this._moduleIndices2.get(module);\n    }\n  }, {\n    key: \"checkConstraints\",\n    value: function checkConstraints() {\n      var chunk = this;\n      var _iterator12 = _createForOfIteratorHelper(chunk._children),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var child = _step12.value;\n          if (!child._parents.has(chunk)) {\n            throw new Error(\"checkConstraints: child missing parent \".concat(chunk.debugId, \" -> \").concat(child.debugId));\n          }\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      var _iterator13 = _createForOfIteratorHelper(chunk._parents),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var parentChunk = _step13.value;\n          if (!parentChunk._children.has(chunk)) {\n            throw new Error(\"checkConstraints: parent missing child \".concat(parentChunk.debugId, \" <- \").concat(chunk.debugId));\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n  }]);\n  return ChunkGroup;\n}();\nmodule.exports = ChunkGroup;","map":{"version":3,"names":["SortableSet","require","compareLocations","debugId","getArray","set","Array","from","sortById","a","b","id","sortOrigin","aIdent","module","identifier","bIdent","loc","ChunkGroup","options","name","undefined","groupDebugId","_children","_parents","_blocks","chunks","origins","_moduleIndices","Map","_moduleIndices2","Object","keys","key","endsWith","Math","max","Error","value","x","join","chunk","oldIdx","indexOf","splice","unshift","before","idx","push","oldChunk","newChunk","newIdx","has","add","getFromCache","size","delete","removeParent","parentChunk","newParents","clear","p","parent","removeChunk","block","request","containsModule","files","Set","file","reason","parentChunkGroup","chunkGroup","addParent","addChild","removeGroup","sort","otherGroup","length","Symbol","iterator","aItem","next","bItem","done","cmp","compareTo","lists","childGroup","substr","list","get","order","group","result","create","map","i","index","child","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/ChunkGroup.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SortableSet = require(\"./util/SortableSet\");\nconst compareLocations = require(\"./compareLocations\");\n\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\nlet debugId = 5000;\n\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\nconst getArray = set => Array.from(set);\n\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\nconst sortById = (a, b) => {\n\tif (a.id < b.id) return -1;\n\tif (b.id < a.id) return 1;\n\treturn 0;\n};\n\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\nconst sortOrigin = (a, b) => {\n\tconst aIdent = a.module ? a.module.identifier() : \"\";\n\tconst bIdent = b.module ? b.module.identifier() : \"\";\n\tif (aIdent < bIdent) return -1;\n\tif (aIdent > bIdent) return 1;\n\treturn compareLocations(a.loc, b.loc);\n};\n\nclass ChunkGroup {\n\t/**\n\t * Creates an instance of ChunkGroup.\n\t * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n\t */\n\tconstructor(options) {\n\t\tif (typeof options === \"string\") {\n\t\t\toptions = { name: options };\n\t\t} else if (!options) {\n\t\t\toptions = { name: undefined };\n\t\t}\n\t\t/** @type {number} */\n\t\tthis.groupDebugId = debugId++;\n\t\tthis.options = options;\n\t\t/** @type {SortableSet<ChunkGroup>} */\n\t\tthis._children = new SortableSet(undefined, sortById);\n\t\tthis._parents = new SortableSet(undefined, sortById);\n\t\tthis._blocks = new SortableSet();\n\t\t/** @type {Chunk[]} */\n\t\tthis.chunks = [];\n\t\t/** @type {OriginRecord[]} */\n\t\tthis.origins = [];\n\t\t/** Indices in top-down order */\n\t\t/** @private @type {Map<Module, number>} */\n\t\tthis._moduleIndices = new Map();\n\t\t/** Indices in bottom-up order */\n\t\t/** @private @type {Map<Module, number>} */\n\t\tthis._moduleIndices2 = new Map();\n\t}\n\n\t/**\n\t * when a new chunk is added to a chunkGroup, addingOptions will occur.\n\t * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n\t * @returns {void}\n\t */\n\taddOptions(options) {\n\t\tfor (const key of Object.keys(options)) {\n\t\t\tif (this.options[key] === undefined) {\n\t\t\t\tthis.options[key] = options[key];\n\t\t\t} else if (this.options[key] !== options[key]) {\n\t\t\t\tif (key.endsWith(\"Order\")) {\n\t\t\t\t\tthis.options[key] = Math.max(this.options[key], options[key]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`ChunkGroup.addOptions: No option merge strategy for ${key}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * returns the name of current ChunkGroup\n\t * @returns {string|undefined} returns the ChunkGroup name\n\t */\n\tget name() {\n\t\treturn this.options.name;\n\t}\n\n\t/**\n\t * sets a new name for current ChunkGroup\n\t * @param {string} value the new name for ChunkGroup\n\t * @returns {void}\n\t */\n\tset name(value) {\n\t\tthis.options.name = value;\n\t}\n\n\t/**\n\t * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n\t * @returns {string} a unique concatenation of chunk debugId's\n\t */\n\tget debugId() {\n\t\treturn Array.from(this.chunks, x => x.debugId).join(\"+\");\n\t}\n\n\t/**\n\t * get a unique id for ChunkGroup, made up of its member Chunk id's\n\t * @returns {string} a unique concatenation of chunk ids\n\t */\n\tget id() {\n\t\treturn Array.from(this.chunks, x => x.id).join(\"+\");\n\t}\n\n\t/**\n\t * Performs an unshift of a specific chunk\n\t * @param {Chunk} chunk chunk being unshifted\n\t * @returns {boolean} returns true if attempted chunk shift is accepted\n\t */\n\tunshiftChunk(chunk) {\n\t\tconst oldIdx = this.chunks.indexOf(chunk);\n\t\tif (oldIdx > 0) {\n\t\t\tthis.chunks.splice(oldIdx, 1);\n\t\t\tthis.chunks.unshift(chunk);\n\t\t} else if (oldIdx < 0) {\n\t\t\tthis.chunks.unshift(chunk);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * inserts a chunk before another existing chunk in group\n\t * @param {Chunk} chunk Chunk being inserted\n\t * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n\t * @returns {boolean} return true if insertion was successful\n\t */\n\tinsertChunk(chunk, before) {\n\t\tconst oldIdx = this.chunks.indexOf(chunk);\n\t\tconst idx = this.chunks.indexOf(before);\n\t\tif (idx < 0) {\n\t\t\tthrow new Error(\"before chunk not found\");\n\t\t}\n\t\tif (oldIdx >= 0 && oldIdx > idx) {\n\t\t\tthis.chunks.splice(oldIdx, 1);\n\t\t\tthis.chunks.splice(idx, 0, chunk);\n\t\t} else if (oldIdx < 0) {\n\t\t\tthis.chunks.splice(idx, 0, chunk);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * add a chunk into ChunkGroup. Is pushed on or prepended\n\t * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n\t * @returns {boolean} returns true if chunk addition was successful.\n\t */\n\tpushChunk(chunk) {\n\t\tconst oldIdx = this.chunks.indexOf(chunk);\n\t\tif (oldIdx >= 0) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.chunks.push(chunk);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {Chunk} oldChunk chunk to be replaced\n\t * @param {Chunk} newChunk New chunk that will be replaced with\n\t * @returns {boolean} returns true if the replacement was successful\n\t */\n\treplaceChunk(oldChunk, newChunk) {\n\t\tconst oldIdx = this.chunks.indexOf(oldChunk);\n\t\tif (oldIdx < 0) return false;\n\t\tconst newIdx = this.chunks.indexOf(newChunk);\n\t\tif (newIdx < 0) {\n\t\t\tthis.chunks[oldIdx] = newChunk;\n\t\t\treturn true;\n\t\t}\n\t\tif (newIdx < oldIdx) {\n\t\t\tthis.chunks.splice(oldIdx, 1);\n\t\t\treturn true;\n\t\t} else if (newIdx !== oldIdx) {\n\t\t\tthis.chunks[oldIdx] = newChunk;\n\t\t\tthis.chunks.splice(newIdx, 1);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tremoveChunk(chunk) {\n\t\tconst idx = this.chunks.indexOf(chunk);\n\t\tif (idx >= 0) {\n\t\t\tthis.chunks.splice(idx, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tisInitial() {\n\t\treturn false;\n\t}\n\n\taddChild(chunk) {\n\t\tif (this._children.has(chunk)) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._children.add(chunk);\n\t\treturn true;\n\t}\n\n\tgetChildren() {\n\t\treturn this._children.getFromCache(getArray);\n\t}\n\n\tgetNumberOfChildren() {\n\t\treturn this._children.size;\n\t}\n\n\tget childrenIterable() {\n\t\treturn this._children;\n\t}\n\n\tremoveChild(chunk) {\n\t\tif (!this._children.has(chunk)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._children.delete(chunk);\n\t\tchunk.removeParent(this);\n\t\treturn true;\n\t}\n\n\taddParent(parentChunk) {\n\t\tif (!this._parents.has(parentChunk)) {\n\t\t\tthis._parents.add(parentChunk);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetParents() {\n\t\treturn this._parents.getFromCache(getArray);\n\t}\n\n\tsetParents(newParents) {\n\t\tthis._parents.clear();\n\t\tfor (const p of newParents) {\n\t\t\tthis._parents.add(p);\n\t\t}\n\t}\n\n\tgetNumberOfParents() {\n\t\treturn this._parents.size;\n\t}\n\n\thasParent(parent) {\n\t\treturn this._parents.has(parent);\n\t}\n\n\tget parentsIterable() {\n\t\treturn this._parents;\n\t}\n\n\tremoveParent(chunk) {\n\t\tif (this._parents.delete(chunk)) {\n\t\t\tchunk.removeChunk(this);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @returns {Array} - an array containing the blocks\n\t */\n\tgetBlocks() {\n\t\treturn this._blocks.getFromCache(getArray);\n\t}\n\n\tgetNumberOfBlocks() {\n\t\treturn this._blocks.size;\n\t}\n\n\thasBlock(block) {\n\t\treturn this._blocks.has(block);\n\t}\n\n\tget blocksIterable() {\n\t\treturn this._blocks;\n\t}\n\n\taddBlock(block) {\n\t\tif (!this._blocks.has(block)) {\n\t\t\tthis._blocks.add(block);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\taddOrigin(module, loc, request) {\n\t\tthis.origins.push({\n\t\t\tmodule,\n\t\t\tloc,\n\t\t\trequest\n\t\t});\n\t}\n\n\tcontainsModule(module) {\n\t\tfor (const chunk of this.chunks) {\n\t\t\tif (chunk.containsModule(module)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetFiles() {\n\t\tconst files = new Set();\n\n\t\tfor (const chunk of this.chunks) {\n\t\t\tfor (const file of chunk.files) {\n\t\t\t\tfiles.add(file);\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(files);\n\t}\n\n\t/**\n\t * @param {string=} reason reason for removing ChunkGroup\n\t * @returns {void}\n\t */\n\tremove(reason) {\n\t\t// cleanup parents\n\t\tfor (const parentChunkGroup of this._parents) {\n\t\t\t// remove this chunk from its parents\n\t\t\tparentChunkGroup._children.delete(this);\n\n\t\t\t// cleanup \"sub chunks\"\n\t\t\tfor (const chunkGroup of this._children) {\n\t\t\t\t/**\n\t\t\t\t * remove this chunk as \"intermediary\" and connect\n\t\t\t\t * it \"sub chunks\" and parents directly\n\t\t\t\t */\n\t\t\t\t// add parent to each \"sub chunk\"\n\t\t\t\tchunkGroup.addParent(parentChunkGroup);\n\t\t\t\t// add \"sub chunk\" to parent\n\t\t\t\tparentChunkGroup.addChild(chunkGroup);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * we need to iterate again over the children\n\t\t * to remove this from the child's parents.\n\t\t * This can not be done in the above loop\n\t\t * as it is not guaranteed that `this._parents` contains anything.\n\t\t */\n\t\tfor (const chunkGroup of this._children) {\n\t\t\t// remove this as parent of every \"sub chunk\"\n\t\t\tchunkGroup._parents.delete(this);\n\t\t}\n\n\t\t// cleanup blocks\n\t\tfor (const block of this._blocks) {\n\t\t\tblock.chunkGroup = null;\n\t\t}\n\n\t\t// remove chunks\n\t\tfor (const chunk of this.chunks) {\n\t\t\tchunk.removeGroup(this);\n\t\t}\n\t}\n\n\tsortItems() {\n\t\tthis.origins.sort(sortOrigin);\n\t\tthis._parents.sort();\n\t\tthis._children.sort();\n\t}\n\n\t/**\n\t * Sorting predicate which allows current ChunkGroup to be compared against another.\n\t * Sorting values are based off of number of chunks in ChunkGroup.\n\t *\n\t * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n\t * @returns {-1|0|1} sort position for comparison\n\t */\n\tcompareTo(otherGroup) {\n\t\tif (this.chunks.length > otherGroup.chunks.length) return -1;\n\t\tif (this.chunks.length < otherGroup.chunks.length) return 1;\n\t\tconst a = this.chunks[Symbol.iterator]();\n\t\tconst b = otherGroup.chunks[Symbol.iterator]();\n\t\t// eslint-disable-next-line no-constant-condition\n\t\twhile (true) {\n\t\t\tconst aItem = a.next();\n\t\t\tconst bItem = b.next();\n\t\t\tif (aItem.done) return 0;\n\t\t\tconst cmp = aItem.value.compareTo(bItem.value);\n\t\t\tif (cmp !== 0) return cmp;\n\t\t}\n\t}\n\n\tgetChildrenByOrders() {\n\t\tconst lists = new Map();\n\t\tfor (const childGroup of this._children) {\n\t\t\t// TODO webpack 5 remove this check for options\n\t\t\tif (typeof childGroup.options === \"object\") {\n\t\t\t\tfor (const key of Object.keys(childGroup.options)) {\n\t\t\t\t\tif (key.endsWith(\"Order\")) {\n\t\t\t\t\t\tconst name = key.substr(0, key.length - \"Order\".length);\n\t\t\t\t\t\tlet list = lists.get(name);\n\t\t\t\t\t\tif (list === undefined) {\n\t\t\t\t\t\t\tlists.set(name, (list = []));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlist.push({\n\t\t\t\t\t\t\torder: childGroup.options[key],\n\t\t\t\t\t\t\tgroup: childGroup\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst result = Object.create(null);\n\t\tfor (const [name, list] of lists) {\n\t\t\tlist.sort((a, b) => {\n\t\t\t\tconst cmp = b.order - a.order;\n\t\t\t\tif (cmp !== 0) return cmp;\n\t\t\t\t// TODO webpack 5 remove this check of compareTo\n\t\t\t\tif (a.group.compareTo) {\n\t\t\t\t\treturn a.group.compareTo(b.group);\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\tresult[name] = list.map(i => i.group);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Sets the top-down index of a module in this ChunkGroup\n\t * @param {Module} module module for which the index should be set\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetModuleIndex(module, index) {\n\t\tthis._moduleIndices.set(module, index);\n\t}\n\n\t/**\n\t * Gets the top-down index of a module in this ChunkGroup\n\t * @param {Module} module the module\n\t * @returns {number} index\n\t */\n\tgetModuleIndex(module) {\n\t\treturn this._moduleIndices.get(module);\n\t}\n\n\t/**\n\t * Sets the bottom-up index of a module in this ChunkGroup\n\t * @param {Module} module module for which the index should be set\n\t * @param {number} index the index of the module\n\t * @returns {void}\n\t */\n\tsetModuleIndex2(module, index) {\n\t\tthis._moduleIndices2.set(module, index);\n\t}\n\n\t/**\n\t * Gets the bottom-up index of a module in this ChunkGroup\n\t * @param {Module} module the module\n\t * @returns {number} index\n\t */\n\tgetModuleIndex2(module) {\n\t\treturn this._moduleIndices2.get(module);\n\t}\n\n\tcheckConstraints() {\n\t\tconst chunk = this;\n\t\tfor (const child of chunk._children) {\n\t\t\tif (!child._parents.has(chunk)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`checkConstraints: child missing parent ${chunk.debugId} -> ${child.debugId}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tfor (const parentChunk of chunk._parents) {\n\t\t\tif (!parentChunk._children.has(chunk)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`checkConstraints: parent missing child ${parentChunk.debugId} <- ${chunk.debugId}`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\nmodule.exports = ChunkGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}