{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\n\n/** @typedef {import(\"../ChunkTemplate\")} ChunkTemplate */\n\nvar getEntryInfo = function getEntryInfo(chunk) {\n  return [chunk.entryModule].filter(Boolean).map(function (m) {\n    return [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(function (c) {\n      return c !== chunk;\n    }).map(function (c) {\n      return c.id;\n    }));\n  });\n};\nvar JsonpChunkTemplatePlugin = /*#__PURE__*/function () {\n  function JsonpChunkTemplatePlugin() {\n    _classCallCheck(this, JsonpChunkTemplatePlugin);\n  }\n  _createClass(JsonpChunkTemplatePlugin, [{\n    key: \"apply\",\n    value:\n    /**\n     * @param {ChunkTemplate} chunkTemplate the chunk template\n     * @returns {void}\n     */\n    function apply(chunkTemplate) {\n      chunkTemplate.hooks.render.tap(\"JsonpChunkTemplatePlugin\", function (modules, chunk) {\n        var jsonpFunction = chunkTemplate.outputOptions.jsonpFunction;\n        var globalObject = chunkTemplate.outputOptions.globalObject;\n        var source = new ConcatSource();\n        var prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n        source.add(\"(\".concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] = \").concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] || []).push([\").concat(JSON.stringify(chunk.ids), \",\"));\n        source.add(modules);\n        var entries = getEntryInfo(chunk);\n        if (entries.length > 0) {\n          source.add(\",\".concat(JSON.stringify(entries)));\n        } else if (prefetchChunks && prefetchChunks.length) {\n          source.add(\",0\");\n        }\n        if (prefetchChunks && prefetchChunks.length) {\n          source.add(\",\".concat(JSON.stringify(prefetchChunks)));\n        }\n        source.add(\"])\");\n        return source;\n      });\n      chunkTemplate.hooks.hash.tap(\"JsonpChunkTemplatePlugin\", function (hash) {\n        hash.update(\"JsonpChunkTemplatePlugin\");\n        hash.update(\"4\");\n        hash.update(\"\".concat(chunkTemplate.outputOptions.jsonpFunction));\n        hash.update(\"\".concat(chunkTemplate.outputOptions.globalObject));\n      });\n      chunkTemplate.hooks.hashForChunk.tap(\"JsonpChunkTemplatePlugin\", function (hash, chunk) {\n        hash.update(JSON.stringify(getEntryInfo(chunk)));\n        hash.update(JSON.stringify(chunk.getChildIdsByOrders().prefetch) || \"\");\n      });\n    }\n  }]);\n  return JsonpChunkTemplatePlugin;\n}();\nmodule.exports = JsonpChunkTemplatePlugin;","map":{"version":3,"names":["require","ConcatSource","getEntryInfo","chunk","entryModule","filter","Boolean","map","m","id","concat","Array","from","groupsIterable","chunks","c","JsonpChunkTemplatePlugin","chunkTemplate","hooks","render","tap","modules","jsonpFunction","outputOptions","globalObject","source","prefetchChunks","getChildIdsByOrders","prefetch","add","JSON","stringify","ids","entries","length","hash","update","hashForChunk","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/web/JsonpChunkTemplatePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\n\n/** @typedef {import(\"../ChunkTemplate\")} ChunkTemplate */\n\nconst getEntryInfo = chunk => {\n\treturn [chunk.entryModule].filter(Boolean).map(m =>\n\t\t[m.id].concat(\n\t\t\tArray.from(chunk.groupsIterable)[0]\n\t\t\t\t.chunks.filter(c => c !== chunk)\n\t\t\t\t.map(c => c.id)\n\t\t)\n\t);\n};\n\nclass JsonpChunkTemplatePlugin {\n\t/**\n\t * @param {ChunkTemplate} chunkTemplate the chunk template\n\t * @returns {void}\n\t */\n\tapply(chunkTemplate) {\n\t\tchunkTemplate.hooks.render.tap(\n\t\t\t\"JsonpChunkTemplatePlugin\",\n\t\t\t(modules, chunk) => {\n\t\t\t\tconst jsonpFunction = chunkTemplate.outputOptions.jsonpFunction;\n\t\t\t\tconst globalObject = chunkTemplate.outputOptions.globalObject;\n\t\t\t\tconst source = new ConcatSource();\n\t\t\t\tconst prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n\t\t\t\tsource.add(\n\t\t\t\t\t`(${globalObject}[${JSON.stringify(\n\t\t\t\t\t\tjsonpFunction\n\t\t\t\t\t)}] = ${globalObject}[${JSON.stringify(\n\t\t\t\t\t\tjsonpFunction\n\t\t\t\t\t)}] || []).push([${JSON.stringify(chunk.ids)},`\n\t\t\t\t);\n\t\t\t\tsource.add(modules);\n\t\t\t\tconst entries = getEntryInfo(chunk);\n\t\t\t\tif (entries.length > 0) {\n\t\t\t\t\tsource.add(`,${JSON.stringify(entries)}`);\n\t\t\t\t} else if (prefetchChunks && prefetchChunks.length) {\n\t\t\t\t\tsource.add(`,0`);\n\t\t\t\t}\n\n\t\t\t\tif (prefetchChunks && prefetchChunks.length) {\n\t\t\t\t\tsource.add(`,${JSON.stringify(prefetchChunks)}`);\n\t\t\t\t}\n\t\t\t\tsource.add(\"])\");\n\t\t\t\treturn source;\n\t\t\t}\n\t\t);\n\t\tchunkTemplate.hooks.hash.tap(\"JsonpChunkTemplatePlugin\", hash => {\n\t\t\thash.update(\"JsonpChunkTemplatePlugin\");\n\t\t\thash.update(\"4\");\n\t\t\thash.update(`${chunkTemplate.outputOptions.jsonpFunction}`);\n\t\t\thash.update(`${chunkTemplate.outputOptions.globalObject}`);\n\t\t});\n\t\tchunkTemplate.hooks.hashForChunk.tap(\n\t\t\t\"JsonpChunkTemplatePlugin\",\n\t\t\t(hash, chunk) => {\n\t\t\t\thash.update(JSON.stringify(getEntryInfo(chunk)));\n\t\t\t\thash.update(JSON.stringify(chunk.getChildIdsByOrders().prefetch) || \"\");\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = JsonpChunkTemplatePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}