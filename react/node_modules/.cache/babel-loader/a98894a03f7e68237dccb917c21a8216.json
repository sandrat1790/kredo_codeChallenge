{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar AbstractMethodError = require(\"../AbstractMethodError\");\nvar BULK_SIZE = 1000;\nvar Hash = /*#__PURE__*/function () {\n  function Hash() {\n    _classCallCheck(this, Hash);\n  }\n  _createClass(Hash, [{\n    key: \"update\",\n    value:\n    /**\n     * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n     * @param {string|Buffer} data data\n     * @param {string=} inputEncoding data encoding\n     * @returns {this} updated hash\n     */\n    function update(data, inputEncoding) {\n      throw new AbstractMethodError();\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      throw new AbstractMethodError();\n    }\n  }]);\n  return Hash;\n}();\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\nvar BulkUpdateDecorator = /*#__PURE__*/function (_Hash) {\n  _inherits(BulkUpdateDecorator, _Hash);\n  var _super = _createSuper(BulkUpdateDecorator);\n  /**\n   * @param {Hash} hash hash\n   */\n  function BulkUpdateDecorator(hash) {\n    var _this;\n    _classCallCheck(this, BulkUpdateDecorator);\n    _this = _super.call(this);\n    _this.hash = hash;\n    _this.buffer = \"\";\n    return _this;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  _createClass(BulkUpdateDecorator, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (inputEncoding !== undefined || typeof data !== \"string\" || data.length > BULK_SIZE) {\n        if (this.buffer.length > 0) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n        this.hash.update(data, inputEncoding);\n      } else {\n        this.buffer += data;\n        if (this.buffer.length > BULK_SIZE) {\n          this.hash.update(this.buffer);\n          this.buffer = \"\";\n        }\n      }\n      return this;\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      if (this.buffer.length > 0) {\n        this.hash.update(this.buffer);\n      }\n      var digestResult = this.hash.digest(encoding);\n      return typeof digestResult === \"string\" ? digestResult : digestResult.toString();\n    }\n  }]);\n  return BulkUpdateDecorator;\n}(Hash);\n/**\n * istanbul ignore next\n */\nvar DebugHash = /*#__PURE__*/function (_Hash2) {\n  _inherits(DebugHash, _Hash2);\n  var _super2 = _createSuper(DebugHash);\n  function DebugHash() {\n    var _this2;\n    _classCallCheck(this, DebugHash);\n    _this2 = _super2.call(this);\n    _this2.string = \"\";\n    return _this2;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  _createClass(DebugHash, [{\n    key: \"update\",\n    value: function update(data, inputEncoding) {\n      if (typeof data !== \"string\") data = data.toString(\"utf-8\");\n      this.string += data;\n      return this;\n    }\n\n    /**\n     * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n     * @param {string=} encoding encoding of the return value\n     * @returns {string|Buffer} digest\n     */\n  }, {\n    key: \"digest\",\n    value: function digest(encoding) {\n      return this.string.replace(/[^a-z0-9]+/gi, function (m) {\n        return Buffer.from(m).toString(\"hex\");\n      });\n    }\n  }]);\n  return DebugHash;\n}(Hash);\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = function (algorithm) {\n  if (typeof algorithm === \"function\") {\n    return new BulkUpdateDecorator(new algorithm());\n  }\n  switch (algorithm) {\n    // TODO add non-cryptographic algorithm here\n    case \"debug\":\n      return new DebugHash();\n    default:\n      return new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n  }\n};","map":{"version":3,"names":["AbstractMethodError","require","BULK_SIZE","Hash","data","inputEncoding","encoding","exports","BulkUpdateDecorator","hash","buffer","undefined","length","update","digestResult","digest","toString","DebugHash","string","replace","m","Buffer","from","module","algorithm","createHash"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/util/createHash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AbstractMethodError = require(\"../AbstractMethodError\");\n\nconst BULK_SIZE = 1000;\n\nclass Hash {\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tthrow new AbstractMethodError();\n\t}\n}\n\nexports.Hash = Hash;\n/** @typedef {typeof Hash} HashConstructor */\n\nclass BulkUpdateDecorator extends Hash {\n\t/**\n\t * @param {Hash} hash hash\n\t */\n\tconstructor(hash) {\n\t\tsuper();\n\t\tthis.hash = hash;\n\t\tthis.buffer = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (\n\t\t\tinputEncoding !== undefined ||\n\t\t\ttypeof data !== \"string\" ||\n\t\t\tdata.length > BULK_SIZE\n\t\t) {\n\t\t\tif (this.buffer.length > 0) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t\tthis.hash.update(data, inputEncoding);\n\t\t} else {\n\t\t\tthis.buffer += data;\n\t\t\tif (this.buffer.length > BULK_SIZE) {\n\t\t\t\tthis.hash.update(this.buffer);\n\t\t\t\tthis.buffer = \"\";\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\tif (this.buffer.length > 0) {\n\t\t\tthis.hash.update(this.buffer);\n\t\t}\n\t\tvar digestResult = this.hash.digest(encoding);\n\t\treturn typeof digestResult === \"string\"\n\t\t\t? digestResult\n\t\t\t: digestResult.toString();\n\t}\n}\n\n/**\n * istanbul ignore next\n */\nclass DebugHash extends Hash {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.string = \"\";\n\t}\n\n\t/**\n\t * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n\t * @param {string|Buffer} data data\n\t * @param {string=} inputEncoding data encoding\n\t * @returns {this} updated hash\n\t */\n\tupdate(data, inputEncoding) {\n\t\tif (typeof data !== \"string\") data = data.toString(\"utf-8\");\n\t\tthis.string += data;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n\t * @param {string=} encoding encoding of the return value\n\t * @returns {string|Buffer} digest\n\t */\n\tdigest(encoding) {\n\t\treturn this.string.replace(/[^a-z0-9]+/gi, m =>\n\t\t\tBuffer.from(m).toString(\"hex\")\n\t\t);\n\t}\n}\n\n/**\n * Creates a hash by name or function\n * @param {string | HashConstructor} algorithm the algorithm name or a constructor creating a hash\n * @returns {Hash} the hash\n */\nmodule.exports = algorithm => {\n\tif (typeof algorithm === \"function\") {\n\t\treturn new BulkUpdateDecorator(new algorithm());\n\t}\n\tswitch (algorithm) {\n\t\t// TODO add non-cryptographic algorithm here\n\t\tcase \"debug\":\n\t\t\treturn new DebugHash();\n\t\tdefault:\n\t\t\treturn new BulkUpdateDecorator(require(\"crypto\").createHash(algorithm));\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}