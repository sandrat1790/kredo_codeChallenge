{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _toConsumableArray = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar Generator = require(\"../Generator\");\nvar Template = require(\"../Template\");\nvar WebAssemblyUtils = require(\"./WebAssemblyUtils\");\nvar _require = require(\"webpack-sources\"),\n  RawSource = _require.RawSource;\nvar _require2 = require(\"@webassemblyjs/wasm-edit\"),\n  editWithAST = _require2.editWithAST,\n  addWithAST = _require2.addWithAST;\nvar _require3 = require(\"@webassemblyjs/wasm-parser\"),\n  decode = _require3.decode;\nvar t = require(\"@webassemblyjs/ast\");\nvar _require4 = require(\"@webassemblyjs/helper-module-context\"),\n  moduleContextFromModuleAST = _require4.moduleContextFromModuleAST;\nvar WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"./WebAssemblyUtils\").UsedWasmDependency} UsedWasmDependency */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n * @typedef {(ArrayBuffer) => ArrayBuffer} ArrayBufferTransform\n */\n\n/**\n * @template T\n * @param {Function[]} fns transforms\n * @returns {Function} composed transform\n */\nvar compose = function compose() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n  return fns.reduce(function (prevFn, nextFn) {\n    return function (value) {\n      return nextFn(prevFn(value));\n    };\n  }, function (value) {\n    return value;\n  });\n};\n\n// TODO replace with @callback\n\n/**\n * Removes the start instruction\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\nvar removeStartFunc = function removeStartFunc(state) {\n  return function (bin) {\n    return editWithAST(state.ast, bin, {\n      Start: function Start(path) {\n        path.remove();\n      }\n    });\n  };\n};\n\n/**\n * Get imported globals\n *\n * @param {Object} ast Module's AST\n * @returns {Array<t.ModuleImport>} - nodes\n */\nvar getImportedGlobals = function getImportedGlobals(ast) {\n  var importedGlobals = [];\n  t.traverse(ast, {\n    ModuleImport: function ModuleImport(_ref) {\n      var node = _ref.node;\n      if (t.isGlobalType(node.descr)) {\n        importedGlobals.push(node);\n      }\n    }\n  });\n  return importedGlobals;\n};\n\n/**\n * Get the count for imported func\n *\n * @param {Object} ast Module's AST\n * @returns {Number} - count\n */\nvar getCountImportedFunc = function getCountImportedFunc(ast) {\n  var count = 0;\n  t.traverse(ast, {\n    ModuleImport: function ModuleImport(_ref2) {\n      var node = _ref2.node;\n      if (t.isFuncImportDescr(node.descr)) {\n        count++;\n      }\n    }\n  });\n  return count;\n};\n\n/**\n * Get next type index\n *\n * @param {Object} ast Module's AST\n * @returns {t.Index} - index\n */\nvar getNextTypeIndex = function getNextTypeIndex(ast) {\n  var typeSectionMetadata = t.getSectionMetadata(ast, \"type\");\n  if (typeSectionMetadata === undefined) {\n    return t.indexLiteral(0);\n  }\n  return t.indexLiteral(typeSectionMetadata.vectorOfSize.value);\n};\n\n/**\n * Get next func index\n *\n * The Func section metadata provide informations for implemented funcs\n * in order to have the correct index we shift the index by number of external\n * functions.\n *\n * @param {Object} ast Module's AST\n * @param {Number} countImportedFunc number of imported funcs\n * @returns {t.Index} - index\n */\nvar getNextFuncIndex = function getNextFuncIndex(ast, countImportedFunc) {\n  var funcSectionMetadata = t.getSectionMetadata(ast, \"func\");\n  if (funcSectionMetadata === undefined) {\n    return t.indexLiteral(0 + countImportedFunc);\n  }\n  var vectorOfSize = funcSectionMetadata.vectorOfSize.value;\n  return t.indexLiteral(vectorOfSize + countImportedFunc);\n};\n\n/**\n * Creates an init instruction for a global type\n * @param {t.GlobalType} globalType the global type\n * @returns {t.Instruction} init expression\n */\nvar createDefaultInitForGlobal = function createDefaultInitForGlobal(globalType) {\n  if (globalType.valtype[0] === \"i\") {\n    // create NumberLiteral global initializer\n    return t.objectInstruction(\"const\", globalType.valtype, [t.numberLiteralFromRaw(66)]);\n  } else if (globalType.valtype[0] === \"f\") {\n    // create FloatLiteral global initializer\n    return t.objectInstruction(\"const\", globalType.valtype, [t.floatLiteral(66, false, false, \"66\")]);\n  } else {\n    throw new Error(\"unknown type: \" + globalType.valtype);\n  }\n};\n\n/**\n * Rewrite the import globals:\n * - removes the ModuleImport instruction\n * - injects at the same offset a mutable global of the same type\n *\n * Since the imported globals are before the other global declarations, our\n * indices will be preserved.\n *\n * Note that globals will become mutable.\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\nvar rewriteImportedGlobals = function rewriteImportedGlobals(state) {\n  return function (bin) {\n    var additionalInitCode = state.additionalInitCode;\n    var newGlobals = [];\n    bin = editWithAST(state.ast, bin, {\n      ModuleImport: function ModuleImport(path) {\n        if (t.isGlobalType(path.node.descr)) {\n          var globalType = path.node.descr;\n          globalType.mutability = \"var\";\n          var init = [createDefaultInitForGlobal(globalType), t.instruction(\"end\")];\n          newGlobals.push(t.global(globalType, init));\n          path.remove();\n        }\n      },\n      // in order to preserve non-imported global's order we need to re-inject\n      // those as well\n      Global: function Global(path) {\n        var node = path.node;\n        var _node$init = _slicedToArray(node.init, 1),\n          init = _node$init[0];\n        if (init.id === \"get_global\") {\n          node.globalType.mutability = \"var\";\n          var initialGlobalidx = init.args[0];\n          node.init = [createDefaultInitForGlobal(node.globalType), t.instruction(\"end\")];\n          additionalInitCode.push(\n          /**\n           * get_global in global initializer only works for imported globals.\n           * They have the same indices as the init params, so use the\n           * same index.\n           */\n          t.instruction(\"get_local\", [initialGlobalidx]), t.instruction(\"set_global\", [t.indexLiteral(newGlobals.length)]));\n        }\n        newGlobals.push(node);\n        path.remove();\n      }\n    });\n\n    // Add global declaration instructions\n    return addWithAST(state.ast, bin, newGlobals);\n  };\n};\n\n/**\n * Rewrite the export names\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Module} state.module Module\n * @param {Set<string>} state.externalExports Module\n * @returns {ArrayBufferTransform} transform\n */\nvar rewriteExportNames = function rewriteExportNames(_ref3) {\n  var ast = _ref3.ast,\n    module = _ref3.module,\n    externalExports = _ref3.externalExports;\n  return function (bin) {\n    return editWithAST(ast, bin, {\n      ModuleExport: function ModuleExport(path) {\n        var isExternal = externalExports.has(path.node.name);\n        if (isExternal) {\n          path.remove();\n          return;\n        }\n        var usedName = module.isUsed(path.node.name);\n        if (!usedName) {\n          path.remove();\n          return;\n        }\n        path.node.name = usedName;\n      }\n    });\n  };\n};\n\n/**\n * Mangle import names and modules\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Map<string, UsedWasmDependency>} state.usedDependencyMap mappings to mangle names\n * @returns {ArrayBufferTransform} transform\n */\nvar rewriteImports = function rewriteImports(_ref4) {\n  var ast = _ref4.ast,\n    usedDependencyMap = _ref4.usedDependencyMap;\n  return function (bin) {\n    return editWithAST(ast, bin, {\n      ModuleImport: function ModuleImport(path) {\n        var result = usedDependencyMap.get(path.node.module + \":\" + path.node.name);\n        if (result !== undefined) {\n          path.node.module = result.module;\n          path.node.name = result.name;\n        }\n      }\n    });\n  };\n};\n\n/**\n * Add an init function.\n *\n * The init function fills the globals given input arguments.\n *\n * @param {Object} state transformation state\n * @param {Object} state.ast Module's ast\n * @param {t.Identifier} state.initFuncId identifier of the init function\n * @param {t.Index} state.startAtFuncOffset index of the start function\n * @param {t.ModuleImport[]} state.importedGlobals list of imported globals\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @param {t.Index} state.nextFuncIndex index of the next function\n * @param {t.Index} state.nextTypeIndex index of the next type\n * @returns {ArrayBufferTransform} transform\n */\nvar addInitFunction = function addInitFunction(_ref5) {\n  var ast = _ref5.ast,\n    initFuncId = _ref5.initFuncId,\n    startAtFuncOffset = _ref5.startAtFuncOffset,\n    importedGlobals = _ref5.importedGlobals,\n    additionalInitCode = _ref5.additionalInitCode,\n    nextFuncIndex = _ref5.nextFuncIndex,\n    nextTypeIndex = _ref5.nextTypeIndex;\n  return function (bin) {\n    var funcParams = importedGlobals.map(function (importedGlobal) {\n      // used for debugging\n      var id = t.identifier(\"\".concat(importedGlobal.module, \".\").concat(importedGlobal.name));\n      return t.funcParam(importedGlobal.descr.valtype, id);\n    });\n    var funcBody = importedGlobals.reduce(function (acc, importedGlobal, index) {\n      var args = [t.indexLiteral(index)];\n      var body = [t.instruction(\"get_local\", args), t.instruction(\"set_global\", args)];\n      return [].concat(_toConsumableArray(acc), body);\n    }, []);\n    if (typeof startAtFuncOffset === \"number\") {\n      funcBody.push(t.callInstruction(t.numberLiteralFromRaw(startAtFuncOffset)));\n    }\n    var _iterator = _createForOfIteratorHelper(additionalInitCode),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var instr = _step.value;\n        funcBody.push(instr);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    funcBody.push(t.instruction(\"end\"));\n    var funcResults = [];\n\n    // Code section\n    var funcSignature = t.signature(funcParams, funcResults);\n    var func = t.func(initFuncId, funcSignature, funcBody);\n\n    // Type section\n    var functype = t.typeInstruction(undefined, funcSignature);\n\n    // Func section\n    var funcindex = t.indexInFuncSection(nextTypeIndex);\n\n    // Export section\n    var moduleExport = t.moduleExport(initFuncId.value, t.moduleExportDescr(\"Func\", nextFuncIndex));\n    return addWithAST(ast, bin, [func, moduleExport, funcindex, functype]);\n  };\n};\n\n/**\n * Extract mangle mappings from module\n * @param {Module} module current module\n * @param {boolean} mangle mangle imports\n * @returns {Map<string, UsedWasmDependency>} mappings to mangled names\n */\nvar getUsedDependencyMap = function getUsedDependencyMap(module, mangle) {\n  /** @type {Map<string, UsedWasmDependency>} */\n  var map = new Map();\n  var _iterator2 = _createForOfIteratorHelper(WebAssemblyUtils.getUsedDependencies(module, mangle)),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var usedDep = _step2.value;\n      var dep = usedDep.dependency;\n      var request = dep.request;\n      var exportName = dep.name;\n      map.set(request + \":\" + exportName, usedDep);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return map;\n};\nvar WebAssemblyGenerator = /*#__PURE__*/function (_Generator) {\n  _inherits(WebAssemblyGenerator, _Generator);\n  var _super = _createSuper(WebAssemblyGenerator);\n  function WebAssemblyGenerator(options) {\n    var _this;\n    _classCallCheck(this, WebAssemblyGenerator);\n    _this = _super.call(this);\n    _this.options = options;\n    return _this;\n  }\n\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n   * @param {RuntimeTemplate} runtimeTemplate the runtime template\n   * @param {string} type which kind of code should be generated\n   * @returns {Source} generated code\n   */\n  _createClass(WebAssemblyGenerator, [{\n    key: \"generate\",\n    value: function generate(module, dependencyTemplates, runtimeTemplate, type) {\n      var bin = module.originalSource().source();\n      var initFuncId = t.identifier(Array.isArray(module.usedExports) ? Template.numberToIdentifer(module.usedExports.length) : \"__webpack_init__\");\n\n      // parse it\n      var ast = decode(bin, {\n        ignoreDataSection: true,\n        ignoreCodeSection: true,\n        ignoreCustomNameSection: true\n      });\n      var moduleContext = moduleContextFromModuleAST(ast.body[0]);\n      var importedGlobals = getImportedGlobals(ast);\n      var countImportedFunc = getCountImportedFunc(ast);\n      var startAtFuncOffset = moduleContext.getStart();\n      var nextFuncIndex = getNextFuncIndex(ast, countImportedFunc);\n      var nextTypeIndex = getNextTypeIndex(ast);\n      var usedDependencyMap = getUsedDependencyMap(module, this.options.mangleImports);\n      var externalExports = new Set(module.dependencies.filter(function (d) {\n        return d instanceof WebAssemblyExportImportedDependency;\n      }).map(function (d) {\n        var wasmDep = /** @type {WebAssemblyExportImportedDependency} */d;\n        return wasmDep.exportName;\n      }));\n\n      /** @type {t.Instruction[]} */\n      var additionalInitCode = [];\n      var transform = compose(rewriteExportNames({\n        ast: ast,\n        module: module,\n        externalExports: externalExports\n      }), removeStartFunc({\n        ast: ast\n      }), rewriteImportedGlobals({\n        ast: ast,\n        additionalInitCode: additionalInitCode\n      }), rewriteImports({\n        ast: ast,\n        usedDependencyMap: usedDependencyMap\n      }), addInitFunction({\n        ast: ast,\n        initFuncId: initFuncId,\n        importedGlobals: importedGlobals,\n        additionalInitCode: additionalInitCode,\n        startAtFuncOffset: startAtFuncOffset,\n        nextFuncIndex: nextFuncIndex,\n        nextTypeIndex: nextTypeIndex\n      }));\n      var newBin = transform(bin);\n      return new RawSource(newBin);\n    }\n  }]);\n  return WebAssemblyGenerator;\n}(Generator);\nmodule.exports = WebAssemblyGenerator;","map":{"version":3,"names":["Generator","require","Template","WebAssemblyUtils","RawSource","editWithAST","addWithAST","decode","t","moduleContextFromModuleAST","WebAssemblyExportImportedDependency","compose","fns","reduce","prevFn","nextFn","value","removeStartFunc","state","bin","ast","Start","path","remove","getImportedGlobals","importedGlobals","traverse","ModuleImport","node","isGlobalType","descr","push","getCountImportedFunc","count","isFuncImportDescr","getNextTypeIndex","typeSectionMetadata","getSectionMetadata","undefined","indexLiteral","vectorOfSize","getNextFuncIndex","countImportedFunc","funcSectionMetadata","createDefaultInitForGlobal","globalType","valtype","objectInstruction","numberLiteralFromRaw","floatLiteral","Error","rewriteImportedGlobals","additionalInitCode","newGlobals","mutability","init","instruction","global","Global","id","initialGlobalidx","args","length","rewriteExportNames","module","externalExports","ModuleExport","isExternal","has","name","usedName","isUsed","rewriteImports","usedDependencyMap","result","get","addInitFunction","initFuncId","startAtFuncOffset","nextFuncIndex","nextTypeIndex","funcParams","map","importedGlobal","identifier","funcParam","funcBody","acc","index","body","callInstruction","instr","funcResults","funcSignature","signature","func","functype","typeInstruction","funcindex","indexInFuncSection","moduleExport","moduleExportDescr","getUsedDependencyMap","mangle","Map","getUsedDependencies","usedDep","dep","dependency","request","exportName","set","WebAssemblyGenerator","options","dependencyTemplates","runtimeTemplate","type","originalSource","source","Array","isArray","usedExports","numberToIdentifer","ignoreDataSection","ignoreCodeSection","ignoreCustomNameSection","moduleContext","getStart","mangleImports","Set","dependencies","filter","d","wasmDep","transform","newBin","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/wasm/WebAssemblyGenerator.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Generator = require(\"../Generator\");\nconst Template = require(\"../Template\");\nconst WebAssemblyUtils = require(\"./WebAssemblyUtils\");\nconst { RawSource } = require(\"webpack-sources\");\n\nconst { editWithAST, addWithAST } = require(\"@webassemblyjs/wasm-edit\");\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n\tmoduleContextFromModuleAST\n} = require(\"@webassemblyjs/helper-module-context\");\n\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"./WebAssemblyUtils\").UsedWasmDependency} UsedWasmDependency */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n * @typedef {(ArrayBuffer) => ArrayBuffer} ArrayBufferTransform\n */\n\n/**\n * @template T\n * @param {Function[]} fns transforms\n * @returns {Function} composed transform\n */\nconst compose = (...fns) => {\n\treturn fns.reduce(\n\t\t(prevFn, nextFn) => {\n\t\t\treturn value => nextFn(prevFn(value));\n\t\t},\n\t\tvalue => value\n\t);\n};\n\n// TODO replace with @callback\n\n/**\n * Removes the start instruction\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\nconst removeStartFunc = state => bin => {\n\treturn editWithAST(state.ast, bin, {\n\t\tStart(path) {\n\t\t\tpath.remove();\n\t\t}\n\t});\n};\n\n/**\n * Get imported globals\n *\n * @param {Object} ast Module's AST\n * @returns {Array<t.ModuleImport>} - nodes\n */\nconst getImportedGlobals = ast => {\n\tconst importedGlobals = [];\n\n\tt.traverse(ast, {\n\t\tModuleImport({ node }) {\n\t\t\tif (t.isGlobalType(node.descr)) {\n\t\t\t\timportedGlobals.push(node);\n\t\t\t}\n\t\t}\n\t});\n\n\treturn importedGlobals;\n};\n\n/**\n * Get the count for imported func\n *\n * @param {Object} ast Module's AST\n * @returns {Number} - count\n */\nconst getCountImportedFunc = ast => {\n\tlet count = 0;\n\n\tt.traverse(ast, {\n\t\tModuleImport({ node }) {\n\t\t\tif (t.isFuncImportDescr(node.descr)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn count;\n};\n\n/**\n * Get next type index\n *\n * @param {Object} ast Module's AST\n * @returns {t.Index} - index\n */\nconst getNextTypeIndex = ast => {\n\tconst typeSectionMetadata = t.getSectionMetadata(ast, \"type\");\n\n\tif (typeSectionMetadata === undefined) {\n\t\treturn t.indexLiteral(0);\n\t}\n\n\treturn t.indexLiteral(typeSectionMetadata.vectorOfSize.value);\n};\n\n/**\n * Get next func index\n *\n * The Func section metadata provide informations for implemented funcs\n * in order to have the correct index we shift the index by number of external\n * functions.\n *\n * @param {Object} ast Module's AST\n * @param {Number} countImportedFunc number of imported funcs\n * @returns {t.Index} - index\n */\nconst getNextFuncIndex = (ast, countImportedFunc) => {\n\tconst funcSectionMetadata = t.getSectionMetadata(ast, \"func\");\n\n\tif (funcSectionMetadata === undefined) {\n\t\treturn t.indexLiteral(0 + countImportedFunc);\n\t}\n\n\tconst vectorOfSize = funcSectionMetadata.vectorOfSize.value;\n\n\treturn t.indexLiteral(vectorOfSize + countImportedFunc);\n};\n\n/**\n * Creates an init instruction for a global type\n * @param {t.GlobalType} globalType the global type\n * @returns {t.Instruction} init expression\n */\nconst createDefaultInitForGlobal = globalType => {\n\tif (globalType.valtype[0] === \"i\") {\n\t\t// create NumberLiteral global initializer\n\t\treturn t.objectInstruction(\"const\", globalType.valtype, [\n\t\t\tt.numberLiteralFromRaw(66)\n\t\t]);\n\t} else if (globalType.valtype[0] === \"f\") {\n\t\t// create FloatLiteral global initializer\n\t\treturn t.objectInstruction(\"const\", globalType.valtype, [\n\t\t\tt.floatLiteral(66, false, false, \"66\")\n\t\t]);\n\t} else {\n\t\tthrow new Error(\"unknown type: \" + globalType.valtype);\n\t}\n};\n\n/**\n * Rewrite the import globals:\n * - removes the ModuleImport instruction\n * - injects at the same offset a mutable global of the same type\n *\n * Since the imported globals are before the other global declarations, our\n * indices will be preserved.\n *\n * Note that globals will become mutable.\n *\n * @param {Object} state unused state\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImportedGlobals = state => bin => {\n\tconst additionalInitCode = state.additionalInitCode;\n\tconst newGlobals = [];\n\n\tbin = editWithAST(state.ast, bin, {\n\t\tModuleImport(path) {\n\t\t\tif (t.isGlobalType(path.node.descr)) {\n\t\t\t\tconst globalType = path.node.descr;\n\n\t\t\t\tglobalType.mutability = \"var\";\n\n\t\t\t\tconst init = [\n\t\t\t\t\tcreateDefaultInitForGlobal(globalType),\n\t\t\t\t\tt.instruction(\"end\")\n\t\t\t\t];\n\n\t\t\t\tnewGlobals.push(t.global(globalType, init));\n\n\t\t\t\tpath.remove();\n\t\t\t}\n\t\t},\n\n\t\t// in order to preserve non-imported global's order we need to re-inject\n\t\t// those as well\n\t\tGlobal(path) {\n\t\t\tconst { node } = path;\n\t\t\tconst [init] = node.init;\n\n\t\t\tif (init.id === \"get_global\") {\n\t\t\t\tnode.globalType.mutability = \"var\";\n\n\t\t\t\tconst initialGlobalidx = init.args[0];\n\n\t\t\t\tnode.init = [\n\t\t\t\t\tcreateDefaultInitForGlobal(node.globalType),\n\t\t\t\t\tt.instruction(\"end\")\n\t\t\t\t];\n\n\t\t\t\tadditionalInitCode.push(\n\t\t\t\t\t/**\n\t\t\t\t\t * get_global in global initializer only works for imported globals.\n\t\t\t\t\t * They have the same indices as the init params, so use the\n\t\t\t\t\t * same index.\n\t\t\t\t\t */\n\t\t\t\t\tt.instruction(\"get_local\", [initialGlobalidx]),\n\t\t\t\t\tt.instruction(\"set_global\", [t.indexLiteral(newGlobals.length)])\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tnewGlobals.push(node);\n\n\t\t\tpath.remove();\n\t\t}\n\t});\n\n\t// Add global declaration instructions\n\treturn addWithAST(state.ast, bin, newGlobals);\n};\n\n/**\n * Rewrite the export names\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Module} state.module Module\n * @param {Set<string>} state.externalExports Module\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteExportNames = ({ ast, module, externalExports }) => bin => {\n\treturn editWithAST(ast, bin, {\n\t\tModuleExport(path) {\n\t\t\tconst isExternal = externalExports.has(path.node.name);\n\t\t\tif (isExternal) {\n\t\t\t\tpath.remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst usedName = module.isUsed(path.node.name);\n\t\t\tif (!usedName) {\n\t\t\t\tpath.remove();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpath.node.name = usedName;\n\t\t}\n\t});\n};\n\n/**\n * Mangle import names and modules\n * @param {Object} state state\n * @param {Object} state.ast Module's ast\n * @param {Map<string, UsedWasmDependency>} state.usedDependencyMap mappings to mangle names\n * @returns {ArrayBufferTransform} transform\n */\nconst rewriteImports = ({ ast, usedDependencyMap }) => bin => {\n\treturn editWithAST(ast, bin, {\n\t\tModuleImport(path) {\n\t\t\tconst result = usedDependencyMap.get(\n\t\t\t\tpath.node.module + \":\" + path.node.name\n\t\t\t);\n\n\t\t\tif (result !== undefined) {\n\t\t\t\tpath.node.module = result.module;\n\t\t\t\tpath.node.name = result.name;\n\t\t\t}\n\t\t}\n\t});\n};\n\n/**\n * Add an init function.\n *\n * The init function fills the globals given input arguments.\n *\n * @param {Object} state transformation state\n * @param {Object} state.ast Module's ast\n * @param {t.Identifier} state.initFuncId identifier of the init function\n * @param {t.Index} state.startAtFuncOffset index of the start function\n * @param {t.ModuleImport[]} state.importedGlobals list of imported globals\n * @param {t.Instruction[]} state.additionalInitCode list of addition instructions for the init function\n * @param {t.Index} state.nextFuncIndex index of the next function\n * @param {t.Index} state.nextTypeIndex index of the next type\n * @returns {ArrayBufferTransform} transform\n */\nconst addInitFunction = ({\n\tast,\n\tinitFuncId,\n\tstartAtFuncOffset,\n\timportedGlobals,\n\tadditionalInitCode,\n\tnextFuncIndex,\n\tnextTypeIndex\n}) => bin => {\n\tconst funcParams = importedGlobals.map(importedGlobal => {\n\t\t// used for debugging\n\t\tconst id = t.identifier(`${importedGlobal.module}.${importedGlobal.name}`);\n\n\t\treturn t.funcParam(importedGlobal.descr.valtype, id);\n\t});\n\n\tconst funcBody = importedGlobals.reduce((acc, importedGlobal, index) => {\n\t\tconst args = [t.indexLiteral(index)];\n\t\tconst body = [\n\t\t\tt.instruction(\"get_local\", args),\n\t\t\tt.instruction(\"set_global\", args)\n\t\t];\n\n\t\treturn [...acc, ...body];\n\t}, []);\n\n\tif (typeof startAtFuncOffset === \"number\") {\n\t\tfuncBody.push(t.callInstruction(t.numberLiteralFromRaw(startAtFuncOffset)));\n\t}\n\n\tfor (const instr of additionalInitCode) {\n\t\tfuncBody.push(instr);\n\t}\n\n\tfuncBody.push(t.instruction(\"end\"));\n\n\tconst funcResults = [];\n\n\t// Code section\n\tconst funcSignature = t.signature(funcParams, funcResults);\n\tconst func = t.func(initFuncId, funcSignature, funcBody);\n\n\t// Type section\n\tconst functype = t.typeInstruction(undefined, funcSignature);\n\n\t// Func section\n\tconst funcindex = t.indexInFuncSection(nextTypeIndex);\n\n\t// Export section\n\tconst moduleExport = t.moduleExport(\n\t\tinitFuncId.value,\n\t\tt.moduleExportDescr(\"Func\", nextFuncIndex)\n\t);\n\n\treturn addWithAST(ast, bin, [func, moduleExport, funcindex, functype]);\n};\n\n/**\n * Extract mangle mappings from module\n * @param {Module} module current module\n * @param {boolean} mangle mangle imports\n * @returns {Map<string, UsedWasmDependency>} mappings to mangled names\n */\nconst getUsedDependencyMap = (module, mangle) => {\n\t/** @type {Map<string, UsedWasmDependency>} */\n\tconst map = new Map();\n\tfor (const usedDep of WebAssemblyUtils.getUsedDependencies(module, mangle)) {\n\t\tconst dep = usedDep.dependency;\n\t\tconst request = dep.request;\n\t\tconst exportName = dep.name;\n\t\tmap.set(request + \":\" + exportName, usedDep);\n\t}\n\treturn map;\n};\n\nclass WebAssemblyGenerator extends Generator {\n\tconstructor(options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t}\n\n\t/**\n\t * @param {NormalModule} module module for which the code should be generated\n\t * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n\t * @param {RuntimeTemplate} runtimeTemplate the runtime template\n\t * @param {string} type which kind of code should be generated\n\t * @returns {Source} generated code\n\t */\n\tgenerate(module, dependencyTemplates, runtimeTemplate, type) {\n\t\tlet bin = module.originalSource().source();\n\n\t\tconst initFuncId = t.identifier(\n\t\t\tArray.isArray(module.usedExports)\n\t\t\t\t? Template.numberToIdentifer(module.usedExports.length)\n\t\t\t\t: \"__webpack_init__\"\n\t\t);\n\n\t\t// parse it\n\t\tconst ast = decode(bin, {\n\t\t\tignoreDataSection: true,\n\t\t\tignoreCodeSection: true,\n\t\t\tignoreCustomNameSection: true\n\t\t});\n\n\t\tconst moduleContext = moduleContextFromModuleAST(ast.body[0]);\n\n\t\tconst importedGlobals = getImportedGlobals(ast);\n\t\tconst countImportedFunc = getCountImportedFunc(ast);\n\t\tconst startAtFuncOffset = moduleContext.getStart();\n\t\tconst nextFuncIndex = getNextFuncIndex(ast, countImportedFunc);\n\t\tconst nextTypeIndex = getNextTypeIndex(ast);\n\n\t\tconst usedDependencyMap = getUsedDependencyMap(\n\t\t\tmodule,\n\t\t\tthis.options.mangleImports\n\t\t);\n\t\tconst externalExports = new Set(\n\t\t\tmodule.dependencies\n\t\t\t\t.filter(d => d instanceof WebAssemblyExportImportedDependency)\n\t\t\t\t.map(d => {\n\t\t\t\t\tconst wasmDep = /** @type {WebAssemblyExportImportedDependency} */ (d);\n\t\t\t\t\treturn wasmDep.exportName;\n\t\t\t\t})\n\t\t);\n\n\t\t/** @type {t.Instruction[]} */\n\t\tconst additionalInitCode = [];\n\n\t\tconst transform = compose(\n\t\t\trewriteExportNames({\n\t\t\t\tast,\n\t\t\t\tmodule,\n\t\t\t\texternalExports\n\t\t\t}),\n\n\t\t\tremoveStartFunc({ ast }),\n\n\t\t\trewriteImportedGlobals({ ast, additionalInitCode }),\n\n\t\t\trewriteImports({\n\t\t\t\tast,\n\t\t\t\tusedDependencyMap\n\t\t\t}),\n\n\t\t\taddInitFunction({\n\t\t\t\tast,\n\t\t\t\tinitFuncId,\n\t\t\t\timportedGlobals,\n\t\t\t\tadditionalInitCode,\n\t\t\t\tstartAtFuncOffset,\n\t\t\t\tnextFuncIndex,\n\t\t\t\tnextTypeIndex\n\t\t\t})\n\t\t);\n\n\t\tconst newBin = transform(bin);\n\n\t\treturn new RawSource(newBin);\n\t}\n}\n\nmodule.exports = WebAssemblyGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}