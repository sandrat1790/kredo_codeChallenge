{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\n\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nvar HotUpdateChunk = require(\"./HotUpdateChunk\");\nvar START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nvar START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nvar DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nvar FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nvar INDENT_MULTILINE_REGEX = /^\\t/gm;\nvar LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nvar IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nvar IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nvar COMMENT_END_REGEX = /\\*\\//g;\nvar PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nvar MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\nvar stringifyIdSortPredicate = function stringifyIdSortPredicate(a, b) {\n  var aId = a.id + \"\";\n  var bId = b.id + \"\";\n  if (aId < bId) return -1;\n  if (aId > bId) return 1;\n  return 0;\n};\nvar Template = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Template() {\n    _classCallCheck(this, Template);\n  }\n  _createClass(Template, null, [{\n    key: \"getFunctionContent\",\n    value:\n    /**\n     *\n     * @param {Function} fn a runtime function (.runtime.js) \"template\"\n     * @returns {string} the updated and normalized function string\n     */\n    function getFunctionContent(fn) {\n      return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n    }\n\n    /**\n     * @param {string} str the string converted to identifier\n     * @returns {string} created identifier\n     */\n  }, {\n    key: \"toIdentifier\",\n    value: function toIdentifier(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n    }\n    /**\n     *\n     * @param {string} str string to be converted to commented in bundle code\n     * @returns {string} returns a commented version of string\n     */\n  }, {\n    key: \"toComment\",\n    value: function toComment(str) {\n      if (!str) return \"\";\n      return \"/*! \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n\n    /**\n     *\n     * @param {string} str string to be converted to \"normal comment\"\n     * @returns {string} returns a commented version of string\n     */\n  }, {\n    key: \"toNormalComment\",\n    value: function toNormalComment(str) {\n      if (!str) return \"\";\n      return \"/* \".concat(str.replace(COMMENT_END_REGEX, \"* /\"), \" */\");\n    }\n\n    /**\n     * @param {string} str string path to be normalized\n     * @returns {string} normalized bundle-safe path\n     */\n  }, {\n    key: \"toPath\",\n    value: function toPath(str) {\n      if (typeof str !== \"string\") return \"\";\n      return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n    }\n\n    // map number to a single character a-z, A-Z or <_ + number> if number is too big\n    /**\n     *\n     * @param {number} n number to convert to ident\n     * @returns {string} returns single character ident\n     */\n  }, {\n    key: \"numberToIdentifer\",\n    value: function numberToIdentifer(n) {\n      // lower case\n      if (n < DELTA_A_TO_Z) {\n        return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n      }\n\n      // upper case\n      if (n < DELTA_A_TO_Z * 2) {\n        return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z);\n      }\n\n      // use multiple letters\n      return Template.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) + Template.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)));\n    }\n\n    /**\n     *\n     * @param {string | string[]} s string to convert to identity\n     * @returns {string} converted identity\n     */\n  }, {\n    key: \"indent\",\n    value: function indent(s) {\n      if (Array.isArray(s)) {\n        return s.map(Template.indent).join(\"\\n\");\n      } else {\n        var str = s.trimRight();\n        if (!str) return \"\";\n        var ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n        return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n      }\n    }\n\n    /**\n     *\n     * @param {string|string[]} s string to create prefix for\n     * @param {string} prefix prefix to compose\n     * @returns {string} returns new prefix string\n     */\n  }, {\n    key: \"prefix\",\n    value: function prefix(s, _prefix) {\n      var str = Template.asString(s).trim();\n      if (!str) return \"\";\n      var ind = str[0] === \"\\n\" ? \"\" : _prefix;\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + _prefix + \"$1\");\n    }\n\n    /**\n     *\n     * @param {string|string[]} str string or string collection\n     * @returns {string} returns a single string from array\n     */\n  }, {\n    key: \"asString\",\n    value: function asString(str) {\n      if (Array.isArray(str)) {\n        return str.join(\"\\n\");\n      }\n      return str;\n    }\n\n    /**\n     * @typedef {Object} WithId\n     * @property {string|number} id\n     */\n\n    /**\n     * @param {WithId[]} modules a collection of modules to get array bounds for\n     * @returns {[number, number] | false} returns the upper and lower array bounds\n     * or false if not every module has a number based id\n     */\n  }, {\n    key: \"getModulesArrayBounds\",\n    value: function getModulesArrayBounds(modules) {\n      var maxId = -Infinity;\n      var minId = Infinity;\n      var _iterator = _createForOfIteratorHelper(modules),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _module = _step.value;\n          if (typeof _module.id !== \"number\") return false;\n          if (maxId < _module.id) maxId = /** @type {number} */_module.id;\n          if (minId > _module.id) minId = /** @type {number} */_module.id;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (minId < 16 + (\"\" + minId).length) {\n        // add minId x ',' instead of 'Array(minId).concat(…)'\n        minId = 0;\n      }\n      var objectOverhead = modules.map(function (module) {\n        return (module.id + \"\").length + 2;\n      }).reduce(function (a, b) {\n        return a + b;\n      }, -1);\n      var arrayOverhead = minId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n      return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n    }\n\n    /**\n     * @param {Chunk} chunk chunk whose modules will be rendered\n     * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n     * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n     * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n     * @param {string=} prefix applying prefix strings\n     * @returns {ConcatSource} rendered chunk modules in a Source object\n     */\n  }, {\n    key: \"renderChunkModules\",\n    value: function renderChunkModules(chunk, filterFn, moduleTemplate, dependencyTemplates) {\n      var prefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n      var source = new ConcatSource();\n      var modules = chunk.getModules().filter(filterFn);\n      var removedModules;\n      if (chunk instanceof HotUpdateChunk) {\n        removedModules = chunk.removedModules;\n      }\n      if (modules.length === 0 && (!removedModules || removedModules.length === 0)) {\n        source.add(\"[]\");\n        return source;\n      }\n      /** @type {{id: string|number, source: Source|string}[]} */\n      var allModules = modules.map(function (module) {\n        return {\n          id: module.id,\n          source: moduleTemplate.render(module, dependencyTemplates, {\n            chunk: chunk\n          })\n        };\n      });\n      if (removedModules && removedModules.length > 0) {\n        var _iterator2 = _createForOfIteratorHelper(removedModules),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var id = _step2.value;\n            allModules.push({\n              id: id,\n              source: \"false\"\n            });\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      var bounds = Template.getModulesArrayBounds(allModules);\n      if (bounds) {\n        // Render a spare array\n        var minId = bounds[0];\n        var maxId = bounds[1];\n        if (minId !== 0) {\n          source.add(\"Array(\".concat(minId, \").concat(\"));\n        }\n        source.add(\"[\\n\");\n        /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n        var _modules = new Map();\n        var _iterator3 = _createForOfIteratorHelper(allModules),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _module3 = _step3.value;\n            _modules.set(_module3.id, _module3);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        for (var idx = minId; idx <= maxId; idx++) {\n          var _module2 = _modules.get(idx);\n          if (idx !== minId) {\n            source.add(\",\\n\");\n          }\n          source.add(\"/* \".concat(idx, \" */\"));\n          if (_module2) {\n            source.add(\"\\n\");\n            source.add(_module2.source);\n          }\n        }\n        source.add(\"\\n\" + prefix + \"]\");\n        if (minId !== 0) {\n          source.add(\")\");\n        }\n      } else {\n        // Render an object\n        source.add(\"{\\n\");\n        allModules.sort(stringifyIdSortPredicate).forEach(function (module, idx) {\n          if (idx !== 0) {\n            source.add(\",\\n\");\n          }\n          source.add(\"\\n/***/ \".concat(JSON.stringify(module.id), \":\\n\"));\n          source.add(module.source);\n        });\n        source.add(\"\\n\\n\".concat(prefix, \"}\"));\n      }\n      return source;\n    }\n  }]);\n  return Template;\n}();\nmodule.exports = Template;","map":{"version":3,"names":["require","ConcatSource","HotUpdateChunk","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","stringifyIdSortPredicate","a","b","aId","id","bId","Template","fn","toString","replace","str","n","String","fromCharCode","numberToIdentifer","Math","floor","s","Array","isArray","map","indent","join","trimRight","ind","prefix","asString","trim","modules","maxId","Infinity","minId","module","length","objectOverhead","reduce","arrayOverhead","chunk","filterFn","moduleTemplate","dependencyTemplates","source","getModules","filter","removedModules","add","allModules","render","push","bounds","getModulesArrayBounds","Map","set","idx","get","sort","forEach","JSON","stringify","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/Template.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"webpack-sources\").ConcatSource} ConcatSource */\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst HotUpdateChunk = require(\"./HotUpdateChunk\");\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/**\n * @typedef {Object} HasId\n * @property {number | string} id\n */\n\n/**\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\n */\n\n/**\n * @param {HasId} a first id object to be sorted\n * @param {HasId} b second id object to be sorted against\n * @returns {-1|0|1} the sort value\n */\nconst stringifyIdSortPredicate = (a, b) => {\n\tconst aId = a.id + \"\";\n\tconst bId = b.id + \"\";\n\tif (aId < bId) return -1;\n\tif (aId > bId) return 1;\n\treturn 0;\n};\n\nclass Template {\n\t/**\n\t *\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\n\t * @returns {string} the updated and normalized function string\n\t */\n\tstatic getFunctionContent(fn) {\n\t\treturn fn\n\t\t\t.toString()\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\n\t}\n\n\t/**\n\t * @param {string} str the string converted to identifier\n\t * @returns {string} created identifier\n\t */\n\tstatic toIdentifier(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n\t}\n\t/**\n\t *\n\t * @param {string} str string to be converted to commented in bundle code\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t *\n\t * @param {string} str string to be converted to \"normal comment\"\n\t * @returns {string} returns a commented version of string\n\t */\n\tstatic toNormalComment(str) {\n\t\tif (!str) return \"\";\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n\t}\n\n\t/**\n\t * @param {string} str string path to be normalized\n\t * @returns {string} normalized bundle-safe path\n\t */\n\tstatic toPath(str) {\n\t\tif (typeof str !== \"string\") return \"\";\n\t\treturn str\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n\t}\n\n\t// map number to a single character a-z, A-Z or <_ + number> if number is too big\n\t/**\n\t *\n\t * @param {number} n number to convert to ident\n\t * @returns {string} returns single character ident\n\t */\n\tstatic numberToIdentifer(n) {\n\t\t// lower case\n\t\tif (n < DELTA_A_TO_Z) {\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n\t\t}\n\n\t\t// upper case\n\t\tif (n < DELTA_A_TO_Z * 2) {\n\t\t\treturn String.fromCharCode(\n\t\t\t\tSTART_UPPERCASE_ALPHABET_CODE + n - DELTA_A_TO_Z\n\t\t\t);\n\t\t}\n\n\t\t// use multiple letters\n\t\treturn (\n\t\t\tTemplate.numberToIdentifer(n % (2 * DELTA_A_TO_Z)) +\n\t\t\tTemplate.numberToIdentifer(Math.floor(n / (2 * DELTA_A_TO_Z)))\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @param {string | string[]} s string to convert to identity\n\t * @returns {string} converted identity\n\t */\n\tstatic indent(s) {\n\t\tif (Array.isArray(s)) {\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\n\t\t} else {\n\t\t\tconst str = s.trimRight();\n\t\t\tif (!str) return \"\";\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} s string to create prefix for\n\t * @param {string} prefix prefix to compose\n\t * @returns {string} returns new prefix string\n\t */\n\tstatic prefix(s, prefix) {\n\t\tconst str = Template.asString(s).trim();\n\t\tif (!str) return \"\";\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n\t}\n\n\t/**\n\t *\n\t * @param {string|string[]} str string or string collection\n\t * @returns {string} returns a single string from array\n\t */\n\tstatic asString(str) {\n\t\tif (Array.isArray(str)) {\n\t\t\treturn str.join(\"\\n\");\n\t\t}\n\t\treturn str;\n\t}\n\n\t/**\n\t * @typedef {Object} WithId\n\t * @property {string|number} id\n\t */\n\n\t/**\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\n\t * or false if not every module has a number based id\n\t */\n\tstatic getModulesArrayBounds(modules) {\n\t\tlet maxId = -Infinity;\n\t\tlet minId = Infinity;\n\t\tfor (const module of modules) {\n\t\t\tif (typeof module.id !== \"number\") return false;\n\t\t\tif (maxId < module.id) maxId = /** @type {number} */ (module.id);\n\t\t\tif (minId > module.id) minId = /** @type {number} */ (module.id);\n\t\t}\n\t\tif (minId < 16 + (\"\" + minId).length) {\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\n\t\t\tminId = 0;\n\t\t}\n\t\tconst objectOverhead = modules\n\t\t\t.map(module => (module.id + \"\").length + 2)\n\t\t\t.reduce((a, b) => a + b, -1);\n\t\tconst arrayOverhead =\n\t\t\tminId === 0 ? maxId : 16 + (\"\" + minId).length + maxId;\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\n\t}\n\n\t/**\n\t * @param {Chunk} chunk chunk whose modules will be rendered\n\t * @param {ModuleFilterPredicate} filterFn function used to filter modules from chunk to render\n\t * @param {ModuleTemplate} moduleTemplate ModuleTemplate instance used to render modules\n\t * @param {TODO | TODO[]} dependencyTemplates templates needed for each module to render dependencies\n\t * @param {string=} prefix applying prefix strings\n\t * @returns {ConcatSource} rendered chunk modules in a Source object\n\t */\n\tstatic renderChunkModules(\n\t\tchunk,\n\t\tfilterFn,\n\t\tmoduleTemplate,\n\t\tdependencyTemplates,\n\t\tprefix = \"\"\n\t) {\n\t\tconst source = new ConcatSource();\n\t\tconst modules = chunk.getModules().filter(filterFn);\n\t\tlet removedModules;\n\t\tif (chunk instanceof HotUpdateChunk) {\n\t\t\tremovedModules = chunk.removedModules;\n\t\t}\n\t\tif (\n\t\t\tmodules.length === 0 &&\n\t\t\t(!removedModules || removedModules.length === 0)\n\t\t) {\n\t\t\tsource.add(\"[]\");\n\t\t\treturn source;\n\t\t}\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\n\t\tconst allModules = modules.map(module => {\n\t\t\treturn {\n\t\t\t\tid: module.id,\n\t\t\t\tsource: moduleTemplate.render(module, dependencyTemplates, {\n\t\t\t\t\tchunk\n\t\t\t\t})\n\t\t\t};\n\t\t});\n\t\tif (removedModules && removedModules.length > 0) {\n\t\t\tfor (const id of removedModules) {\n\t\t\t\tallModules.push({\n\t\t\t\t\tid,\n\t\t\t\t\tsource: \"false\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\n\t\tif (bounds) {\n\t\t\t// Render a spare array\n\t\t\tconst minId = bounds[0];\n\t\t\tconst maxId = bounds[1];\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\n\t\t\t}\n\t\t\tsource.add(\"[\\n\");\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n\t\t\tconst modules = new Map();\n\t\t\tfor (const module of allModules) {\n\t\t\t\tmodules.set(module.id, module);\n\t\t\t}\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\n\t\t\t\tconst module = modules.get(idx);\n\t\t\t\tif (idx !== minId) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`/* ${idx} */`);\n\t\t\t\tif (module) {\n\t\t\t\t\tsource.add(\"\\n\");\n\t\t\t\t\tsource.add(module.source);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\n\t\t\tif (minId !== 0) {\n\t\t\t\tsource.add(\")\");\n\t\t\t}\n\t\t} else {\n\t\t\t// Render an object\n\t\t\tsource.add(\"{\\n\");\n\t\t\tallModules.sort(stringifyIdSortPredicate).forEach((module, idx) => {\n\t\t\t\tif (idx !== 0) {\n\t\t\t\t\tsource.add(\",\\n\");\n\t\t\t\t}\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n\t\t\t\tsource.add(module.source);\n\t\t\t});\n\t\t\tsource.add(`\\n\\n${prefix}}`);\n\t\t}\n\t\treturn source;\n\t}\n}\n\nmodule.exports = Template;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}