{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar DependencyReference = require(\"./DependencyReference\");\nvar ModuleDependency = require(\"./ModuleDependency\");\nvar UnsupportedWebAssemblyFeatureError = require(\"../wasm/UnsupportedWebAssemblyFeatureError\");\n\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImportDescription} ModuleImportDescription */\nvar WebAssemblyImportDependency = /*#__PURE__*/function (_ModuleDependency) {\n  _inherits(WebAssemblyImportDependency, _ModuleDependency);\n  var _super = _createSuper(WebAssemblyImportDependency);\n  /**\n   * @param {string} request the request\n   * @param {string} name the imported name\n   * @param {ModuleImportDescription} description the WASM ast node\n   * @param {false | string} onlyDirectImport if only direct imports are allowed\n   */\n  function WebAssemblyImportDependency(request, name, description, onlyDirectImport) {\n    var _this;\n    _classCallCheck(this, WebAssemblyImportDependency);\n    _this = _super.call(this, request);\n    /** @type {string} */\n    _this.name = name;\n    /** @type {ModuleImportDescription} */\n    _this.description = description;\n    /** @type {false | string} */\n    _this.onlyDirectImport = onlyDirectImport;\n    return _this;\n  }\n  _createClass(WebAssemblyImportDependency, [{\n    key: \"getReference\",\n    value: function getReference() {\n      if (!this.module) return null;\n      return new DependencyReference(this.module, [this.name], false);\n    }\n  }, {\n    key: \"getErrors\",\n    value: function getErrors() {\n      if (this.onlyDirectImport && this.module && !this.module.type.startsWith(\"webassembly\")) {\n        return [new UnsupportedWebAssemblyFeatureError(\"Import \\\"\".concat(this.name, \"\\\" from \\\"\").concat(this.request, \"\\\" with \").concat(this.onlyDirectImport, \" can only be used for direct wasm to wasm dependencies\"))];\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"wasm import\";\n    }\n  }]);\n  return WebAssemblyImportDependency;\n}(ModuleDependency);\nmodule.exports = WebAssemblyImportDependency;","map":{"version":3,"names":["DependencyReference","require","ModuleDependency","UnsupportedWebAssemblyFeatureError","WebAssemblyImportDependency","request","name","description","onlyDirectImport","module","type","startsWith","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/dependencies/WebAssemblyImportDependency.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyReference = require(\"./DependencyReference\");\nconst ModuleDependency = require(\"./ModuleDependency\");\nconst UnsupportedWebAssemblyFeatureError = require(\"../wasm/UnsupportedWebAssemblyFeatureError\");\n\n/** @typedef {import(\"@webassemblyjs/ast\").ModuleImportDescription} ModuleImportDescription */\n\nclass WebAssemblyImportDependency extends ModuleDependency {\n\t/**\n\t * @param {string} request the request\n\t * @param {string} name the imported name\n\t * @param {ModuleImportDescription} description the WASM ast node\n\t * @param {false | string} onlyDirectImport if only direct imports are allowed\n\t */\n\tconstructor(request, name, description, onlyDirectImport) {\n\t\tsuper(request);\n\t\t/** @type {string} */\n\t\tthis.name = name;\n\t\t/** @type {ModuleImportDescription} */\n\t\tthis.description = description;\n\t\t/** @type {false | string} */\n\t\tthis.onlyDirectImport = onlyDirectImport;\n\t}\n\n\tgetReference() {\n\t\tif (!this.module) return null;\n\t\treturn new DependencyReference(this.module, [this.name], false);\n\t}\n\n\tgetErrors() {\n\t\tif (\n\t\t\tthis.onlyDirectImport &&\n\t\t\tthis.module &&\n\t\t\t!this.module.type.startsWith(\"webassembly\")\n\t\t) {\n\t\t\treturn [\n\t\t\t\tnew UnsupportedWebAssemblyFeatureError(\n\t\t\t\t\t`Import \"${this.name}\" from \"${this.request}\" with ${this.onlyDirectImport} can only be used for direct wasm to wasm dependencies`\n\t\t\t\t)\n\t\t\t];\n\t\t}\n\t}\n\n\tget type() {\n\t\treturn \"wasm import\";\n\t}\n}\n\nmodule.exports = WebAssemblyImportDependency;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,IAAMA,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC5D,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACtD,IAAME,kCAAkC,GAAGF,OAAO,CAAC,4CAA4C,CAAC;;AAEhG;AAAA,IAEMG,2BAA2B;EAAA;EAAA;EAChC;AACD;AACA;AACA;AACA;AACA;EACC,qCAAYC,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAEC,gBAAgB,EAAE;IAAA;IAAA;IACzD,0BAAMH,OAAO;IACb;IACA,MAAKC,IAAI,GAAGA,IAAI;IAChB;IACA,MAAKC,WAAW,GAAGA,WAAW;IAC9B;IACA,MAAKC,gBAAgB,GAAGA,gBAAgB;IAAC;EAC1C;EAAC;IAAA;IAAA,OAED,wBAAe;MACd,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE,OAAO,IAAI;MAC7B,OAAO,IAAIT,mBAAmB,CAAC,IAAI,CAACS,MAAM,EAAE,CAAC,IAAI,CAACH,IAAI,CAAC,EAAE,KAAK,CAAC;IAChE;EAAC;IAAA;IAAA,OAED,qBAAY;MACX,IACC,IAAI,CAACE,gBAAgB,IACrB,IAAI,CAACC,MAAM,IACX,CAAC,IAAI,CAACA,MAAM,CAACC,IAAI,CAACC,UAAU,CAAC,aAAa,CAAC,EAC1C;QACD,OAAO,CACN,IAAIR,kCAAkC,oBAC1B,IAAI,CAACG,IAAI,uBAAW,IAAI,CAACD,OAAO,qBAAU,IAAI,CAACG,gBAAgB,4DAC1E,CACD;MACF;IACD;EAAC;IAAA;IAAA,KAED,eAAW;MACV,OAAO,aAAa;IACrB;EAAC;EAAA;AAAA,EAtCwCN,gBAAgB;AAyC1DO,MAAM,CAACG,OAAO,GAAGR,2BAA2B"},"metadata":{},"sourceType":"script"}