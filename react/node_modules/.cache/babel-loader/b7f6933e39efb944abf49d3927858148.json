{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/MinChunkSizePlugin\").MinChunkSizePluginOptions} MinChunkSizePluginOptions */\nvar MinChunkSizePlugin = /*#__PURE__*/function () {\n  /**\n   * @param {MinChunkSizePluginOptions} options options object\n   */\n  function MinChunkSizePlugin(options) {\n    _classCallCheck(this, MinChunkSizePlugin);\n    validateOptions(schema, options, \"Min Chunk Size Plugin\");\n    this.options = options;\n  }\n  _createClass(MinChunkSizePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var minChunkSize = options.minChunkSize;\n      compiler.hooks.compilation.tap(\"MinChunkSizePlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"MinChunkSizePlugin\", function (chunks) {\n          var equalOptions = {\n            chunkOverhead: 1,\n            entryChunkMultiplicator: 1\n          };\n          var sortedSizeFilteredExtendedPairCombinations = chunks.reduce(function (combinations, a, idx) {\n            // create combination pairs\n            for (var i = 0; i < idx; i++) {\n              var b = chunks[i];\n              combinations.push([b, a]);\n            }\n            return combinations;\n          }, []).filter(function (pair) {\n            // check if one of the chunks sizes is smaller than the minChunkSize\n            var p0SmallerThanMinChunkSize = pair[0].size(equalOptions) < minChunkSize;\n            var p1SmallerThanMinChunkSize = pair[1].size(equalOptions) < minChunkSize;\n            return p0SmallerThanMinChunkSize || p1SmallerThanMinChunkSize;\n          }).map(function (pair) {\n            // extend combination pairs with size and integrated size\n            var a = pair[0].size(options);\n            var b = pair[1].size(options);\n            var ab = pair[0].integratedSize(pair[1], options);\n            return [a + b - ab, ab, pair[0], pair[1]];\n          }).filter(function (pair) {\n            // filter pairs that do not have an integratedSize\n            // meaning they can NOT be integrated!\n            return pair[1] !== false;\n          }).sort(function (a, b) {\n            // sadly javascript does an inplace sort here\n            // sort by size\n            var diff = b[0] - a[0];\n            if (diff !== 0) return diff;\n            return a[1] - b[1];\n          });\n          if (sortedSizeFilteredExtendedPairCombinations.length === 0) return;\n          var pair = sortedSizeFilteredExtendedPairCombinations[0];\n          pair[2].integrate(pair[3], \"min-size\");\n          chunks.splice(chunks.indexOf(pair[3]), 1);\n          return true;\n        });\n      });\n    }\n  }]);\n  return MinChunkSizePlugin;\n}();\nmodule.exports = MinChunkSizePlugin;","map":{"version":3,"names":["validateOptions","require","schema","MinChunkSizePlugin","options","compiler","minChunkSize","hooks","compilation","tap","optimizeChunksAdvanced","chunks","equalOptions","chunkOverhead","entryChunkMultiplicator","sortedSizeFilteredExtendedPairCombinations","reduce","combinations","a","idx","i","b","push","filter","pair","p0SmallerThanMinChunkSize","size","p1SmallerThanMinChunkSize","map","ab","integratedSize","sort","diff","length","integrate","splice","indexOf","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/optimize/MinChunkSizePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/MinChunkSizePlugin\").MinChunkSizePluginOptions} MinChunkSizePluginOptions */\n\nclass MinChunkSizePlugin {\n\t/**\n\t * @param {MinChunkSizePluginOptions} options options object\n\t */\n\tconstructor(options) {\n\t\tvalidateOptions(schema, options, \"Min Chunk Size Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst minChunkSize = options.minChunkSize;\n\t\tcompiler.hooks.compilation.tap(\"MinChunkSizePlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunksAdvanced.tap(\n\t\t\t\t\"MinChunkSizePlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\tconst equalOptions = {\n\t\t\t\t\t\tchunkOverhead: 1,\n\t\t\t\t\t\tentryChunkMultiplicator: 1\n\t\t\t\t\t};\n\n\t\t\t\t\tconst sortedSizeFilteredExtendedPairCombinations = chunks\n\t\t\t\t\t\t.reduce((combinations, a, idx) => {\n\t\t\t\t\t\t\t// create combination pairs\n\t\t\t\t\t\t\tfor (let i = 0; i < idx; i++) {\n\t\t\t\t\t\t\t\tconst b = chunks[i];\n\t\t\t\t\t\t\t\tcombinations.push([b, a]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn combinations;\n\t\t\t\t\t\t}, [])\n\t\t\t\t\t\t.filter(pair => {\n\t\t\t\t\t\t\t// check if one of the chunks sizes is smaller than the minChunkSize\n\t\t\t\t\t\t\tconst p0SmallerThanMinChunkSize =\n\t\t\t\t\t\t\t\tpair[0].size(equalOptions) < minChunkSize;\n\t\t\t\t\t\t\tconst p1SmallerThanMinChunkSize =\n\t\t\t\t\t\t\t\tpair[1].size(equalOptions) < minChunkSize;\n\t\t\t\t\t\t\treturn p0SmallerThanMinChunkSize || p1SmallerThanMinChunkSize;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map(pair => {\n\t\t\t\t\t\t\t// extend combination pairs with size and integrated size\n\t\t\t\t\t\t\tconst a = pair[0].size(options);\n\t\t\t\t\t\t\tconst b = pair[1].size(options);\n\t\t\t\t\t\t\tconst ab = pair[0].integratedSize(pair[1], options);\n\t\t\t\t\t\t\treturn [a + b - ab, ab, pair[0], pair[1]];\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(pair => {\n\t\t\t\t\t\t\t// filter pairs that do not have an integratedSize\n\t\t\t\t\t\t\t// meaning they can NOT be integrated!\n\t\t\t\t\t\t\treturn pair[1] !== false;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t// sadly javascript does an inplace sort here\n\t\t\t\t\t\t\t// sort by size\n\t\t\t\t\t\t\tconst diff = b[0] - a[0];\n\t\t\t\t\t\t\tif (diff !== 0) return diff;\n\t\t\t\t\t\t\treturn a[1] - b[1];\n\t\t\t\t\t\t});\n\n\t\t\t\t\tif (sortedSizeFilteredExtendedPairCombinations.length === 0) return;\n\n\t\t\t\t\tconst pair = sortedSizeFilteredExtendedPairCombinations[0];\n\n\t\t\t\t\tpair[2].integrate(pair[3], \"min-size\");\n\t\t\t\t\tchunks.splice(chunks.indexOf(pair[3]), 1);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = MinChunkSizePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}