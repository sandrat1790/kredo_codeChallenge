{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Naoyuki Kanezawa @nkzawa\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nvar SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nvar MultiModuleFactory = require(\"./MultiModuleFactory\");\nvar MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nvar SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDynamic} EntryDynamic */\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryStatic} EntryStatic */\n/** @typedef {import(\"./Compiler\")} Compiler */\nvar DynamicEntryPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {string} context the context path\n   * @param {EntryDynamic} entry the entry value\n   */\n  function DynamicEntryPlugin(context, entry) {\n    _classCallCheck(this, DynamicEntryPlugin);\n    this.context = context;\n    this.entry = entry;\n  }\n\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n  _createClass(DynamicEntryPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var _this = this;\n      compiler.hooks.compilation.tap(\"DynamicEntryPlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        var multiModuleFactory = new MultiModuleFactory();\n        compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n        compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n      });\n      compiler.hooks.make.tapAsync(\"DynamicEntryPlugin\", function (compilation, callback) {\n        /**\n         * @param {string|string[]} entry entry value or array of entry values\n         * @param {string} name name of entry\n         * @returns {Promise<EntryStatic>} returns the promise resolving the Compilation#addEntry function\n         */\n        var addEntry = function addEntry(entry, name) {\n          var dep = DynamicEntryPlugin.createDependency(entry, name);\n          return new Promise(function (resolve, reject) {\n            compilation.addEntry(_this.context, dep, name, function (err) {\n              if (err) return reject(err);\n              resolve();\n            });\n          });\n        };\n        Promise.resolve(_this.entry()).then(function (entry) {\n          if (typeof entry === \"string\" || Array.isArray(entry)) {\n            addEntry(entry, \"main\").then(function () {\n              return callback();\n            }, callback);\n          } else if (typeof entry === \"object\") {\n            Promise.all(Object.keys(entry).map(function (name) {\n              return addEntry(entry[name], name);\n            })).then(function () {\n              return callback();\n            }, callback);\n          }\n        });\n      });\n    }\n  }]);\n  return DynamicEntryPlugin;\n}();\nmodule.exports = DynamicEntryPlugin;\n/**\n * @param {string|string[]} entry entry value or array of entry paths\n * @param {string} name name of entry\n * @returns {SingleEntryDependency|MultiEntryDependency} returns dep\n */\nDynamicEntryPlugin.createDependency = function (entry, name) {\n  if (Array.isArray(entry)) {\n    return MultiEntryPlugin.createDependency(entry, name);\n  } else {\n    return SingleEntryPlugin.createDependency(entry, name);\n  }\n};","map":{"version":3,"names":["MultiEntryDependency","require","SingleEntryDependency","MultiModuleFactory","MultiEntryPlugin","SingleEntryPlugin","DynamicEntryPlugin","context","entry","compiler","hooks","compilation","tap","normalModuleFactory","multiModuleFactory","dependencyFactories","set","make","tapAsync","callback","addEntry","name","dep","createDependency","Promise","resolve","reject","err","then","Array","isArray","all","Object","keys","map","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/DynamicEntryPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Naoyuki Kanezawa @nkzawa\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryDynamic} EntryDynamic */\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryStatic} EntryStatic */\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass DynamicEntryPlugin {\n\t/**\n\t * @param {string} context the context path\n\t * @param {EntryDynamic} entry the entry value\n\t */\n\tconstructor(context, entry) {\n\t\tthis.context = context;\n\t\tthis.entry = entry;\n\t}\n\n\t/**\n\t * @param {Compiler} compiler the compiler instance\n\t * @returns {void}\n\t */\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"DynamicEntryPlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tconst multiModuleFactory = new MultiModuleFactory();\n\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tMultiEntryDependency,\n\t\t\t\t\tmultiModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tSingleEntryDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t\tcompiler.hooks.make.tapAsync(\n\t\t\t\"DynamicEntryPlugin\",\n\t\t\t(compilation, callback) => {\n\t\t\t\t/**\n\t\t\t\t * @param {string|string[]} entry entry value or array of entry values\n\t\t\t\t * @param {string} name name of entry\n\t\t\t\t * @returns {Promise<EntryStatic>} returns the promise resolving the Compilation#addEntry function\n\t\t\t\t */\n\t\t\t\tconst addEntry = (entry, name) => {\n\t\t\t\t\tconst dep = DynamicEntryPlugin.createDependency(entry, name);\n\t\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\t\tcompilation.addEntry(this.context, dep, name, err => {\n\t\t\t\t\t\t\tif (err) return reject(err);\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\tPromise.resolve(this.entry()).then(entry => {\n\t\t\t\t\tif (typeof entry === \"string\" || Array.isArray(entry)) {\n\t\t\t\t\t\taddEntry(entry, \"main\").then(() => callback(), callback);\n\t\t\t\t\t} else if (typeof entry === \"object\") {\n\t\t\t\t\t\tPromise.all(\n\t\t\t\t\t\t\tObject.keys(entry).map(name => {\n\t\t\t\t\t\t\t\treturn addEntry(entry[name], name);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t).then(() => callback(), callback);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = DynamicEntryPlugin;\n/**\n * @param {string|string[]} entry entry value or array of entry paths\n * @param {string} name name of entry\n * @returns {SingleEntryDependency|MultiEntryDependency} returns dep\n */\nDynamicEntryPlugin.createDependency = (entry, name) => {\n\tif (Array.isArray(entry)) {\n\t\treturn MultiEntryPlugin.createDependency(entry, name);\n\t} else {\n\t\treturn SingleEntryPlugin.createDependency(entry, name);\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}