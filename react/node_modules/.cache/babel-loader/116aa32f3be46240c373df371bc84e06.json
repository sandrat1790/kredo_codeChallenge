{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar AggressiveMergingPlugin = /*#__PURE__*/function () {\n  function AggressiveMergingPlugin(options) {\n    _classCallCheck(this, AggressiveMergingPlugin);\n    if (options !== undefined && typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\");\n    }\n    this.options = options || {};\n  }\n  _createClass(AggressiveMergingPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var minSizeReduce = options.minSizeReduce || 1.5;\n      compiler.hooks.thisCompilation.tap(\"AggressiveMergingPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunksAdvanced.tap(\"AggressiveMergingPlugin\", function (chunks) {\n          var combinations = [];\n          chunks.forEach(function (a, idx) {\n            if (a.canBeInitial()) return;\n            for (var i = 0; i < idx; i++) {\n              var b = chunks[i];\n              if (b.canBeInitial()) continue;\n              combinations.push({\n                a: a,\n                b: b,\n                improvement: undefined\n              });\n            }\n          });\n          for (var _i = 0, _combinations = combinations; _i < _combinations.length; _i++) {\n            var _pair = _combinations[_i];\n            var a = _pair.b.size({\n              chunkOverhead: 0\n            });\n            var b = _pair.a.size({\n              chunkOverhead: 0\n            });\n            var ab = _pair.b.integratedSize(_pair.a, {\n              chunkOverhead: 0\n            });\n            var newSize = void 0;\n            if (ab === false) {\n              _pair.improvement = false;\n              return;\n            } else {\n              newSize = ab;\n            }\n            _pair.improvement = (a + b) / newSize;\n          }\n          combinations = combinations.filter(function (pair) {\n            return pair.improvement !== false;\n          });\n          combinations.sort(function (a, b) {\n            return b.improvement - a.improvement;\n          });\n          var pair = combinations[0];\n          if (!pair) return;\n          if (pair.improvement < minSizeReduce) return;\n          if (pair.b.integrate(pair.a, \"aggressive-merge\")) {\n            chunks.splice(chunks.indexOf(pair.a), 1);\n            return true;\n          }\n        });\n      });\n    }\n  }]);\n  return AggressiveMergingPlugin;\n}();\nmodule.exports = AggressiveMergingPlugin;","map":{"version":3,"names":["AggressiveMergingPlugin","options","undefined","Array","isArray","Error","compiler","minSizeReduce","hooks","thisCompilation","tap","compilation","optimizeChunksAdvanced","chunks","combinations","forEach","a","idx","canBeInitial","i","b","push","improvement","pair","size","chunkOverhead","ab","integratedSize","newSize","filter","sort","integrate","splice","indexOf","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/optimize/AggressiveMergingPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass AggressiveMergingPlugin {\n\tconstructor(options) {\n\t\tif (\n\t\t\t(options !== undefined && typeof options !== \"object\") ||\n\t\t\tArray.isArray(options)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\"\n\t\t\t);\n\t\t}\n\t\tthis.options = options || {};\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst minSizeReduce = options.minSizeReduce || 1.5;\n\n\t\tcompiler.hooks.thisCompilation.tap(\n\t\t\t\"AggressiveMergingPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeChunksAdvanced.tap(\n\t\t\t\t\t\"AggressiveMergingPlugin\",\n\t\t\t\t\tchunks => {\n\t\t\t\t\t\tlet combinations = [];\n\t\t\t\t\t\tchunks.forEach((a, idx) => {\n\t\t\t\t\t\t\tif (a.canBeInitial()) return;\n\t\t\t\t\t\t\tfor (let i = 0; i < idx; i++) {\n\t\t\t\t\t\t\t\tconst b = chunks[i];\n\t\t\t\t\t\t\t\tif (b.canBeInitial()) continue;\n\t\t\t\t\t\t\t\tcombinations.push({\n\t\t\t\t\t\t\t\t\ta,\n\t\t\t\t\t\t\t\t\tb,\n\t\t\t\t\t\t\t\t\timprovement: undefined\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tfor (const pair of combinations) {\n\t\t\t\t\t\t\tconst a = pair.b.size({\n\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst b = pair.a.size({\n\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tconst ab = pair.b.integratedSize(pair.a, {\n\t\t\t\t\t\t\t\tchunkOverhead: 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet newSize;\n\t\t\t\t\t\t\tif (ab === false) {\n\t\t\t\t\t\t\t\tpair.improvement = false;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnewSize = ab;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpair.improvement = (a + b) / newSize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcombinations = combinations.filter(pair => {\n\t\t\t\t\t\t\treturn pair.improvement !== false;\n\t\t\t\t\t\t});\n\t\t\t\t\t\tcombinations.sort((a, b) => {\n\t\t\t\t\t\t\treturn b.improvement - a.improvement;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst pair = combinations[0];\n\n\t\t\t\t\t\tif (!pair) return;\n\t\t\t\t\t\tif (pair.improvement < minSizeReduce) return;\n\n\t\t\t\t\t\tif (pair.b.integrate(pair.a, \"aggressive-merge\")) {\n\t\t\t\t\t\t\tchunks.splice(chunks.indexOf(pair.a), 1);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = AggressiveMergingPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}