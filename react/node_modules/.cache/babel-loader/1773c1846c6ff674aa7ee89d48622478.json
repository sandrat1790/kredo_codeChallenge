{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RequireIncludeDependency = require(\"./RequireIncludeDependency\");\nvar RequireIncludeDependencyParserPlugin = require(\"./RequireIncludeDependencyParserPlugin\");\nvar ParserHelpers = require(\"../ParserHelpers\");\nvar RequireIncludePlugin = /*#__PURE__*/function () {\n  function RequireIncludePlugin() {\n    _classCallCheck(this, RequireIncludePlugin);\n  }\n  _createClass(RequireIncludePlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"RequireIncludePlugin\", function (compilation, _ref) {\n        var normalModuleFactory = _ref.normalModuleFactory;\n        compilation.dependencyFactories.set(RequireIncludeDependency, normalModuleFactory);\n        compilation.dependencyTemplates.set(RequireIncludeDependency, new RequireIncludeDependency.Template());\n        var handler = function handler(parser, parserOptions) {\n          if (parserOptions.requireInclude !== undefined && !parserOptions.requireInclude) return;\n          new RequireIncludeDependencyParserPlugin().apply(parser);\n          parser.hooks.evaluateTypeof.for(\"require.include\").tap(\"RequireIncludePlugin\", ParserHelpers.evaluateToString(\"function\"));\n          parser.hooks.typeof.for(\"require.include\").tap(\"RequireIncludePlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        };\n        normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"RequireIncludePlugin\", handler);\n        normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"RequireIncludePlugin\", handler);\n      });\n    }\n  }]);\n  return RequireIncludePlugin;\n}();\nmodule.exports = RequireIncludePlugin;","map":{"version":3,"names":["RequireIncludeDependency","require","RequireIncludeDependencyParserPlugin","ParserHelpers","RequireIncludePlugin","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","handler","parser","parserOptions","requireInclude","undefined","apply","evaluateTypeof","for","evaluateToString","typeof","toConstantDependency","JSON","stringify","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/dependencies/RequireIncludePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireIncludeDependency = require(\"./RequireIncludeDependency\");\nconst RequireIncludeDependencyParserPlugin = require(\"./RequireIncludeDependencyParserPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass RequireIncludePlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"RequireIncludePlugin\",\n\t\t\t(compilation, { normalModuleFactory }) => {\n\t\t\t\tcompilation.dependencyFactories.set(\n\t\t\t\t\tRequireIncludeDependency,\n\t\t\t\t\tnormalModuleFactory\n\t\t\t\t);\n\t\t\t\tcompilation.dependencyTemplates.set(\n\t\t\t\t\tRequireIncludeDependency,\n\t\t\t\t\tnew RequireIncludeDependency.Template()\n\t\t\t\t);\n\n\t\t\t\tconst handler = (parser, parserOptions) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tparserOptions.requireInclude !== undefined &&\n\t\t\t\t\t\t!parserOptions.requireInclude\n\t\t\t\t\t)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tnew RequireIncludeDependencyParserPlugin().apply(parser);\n\t\t\t\t\tparser.hooks.evaluateTypeof\n\t\t\t\t\t\t.for(\"require.include\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"RequireIncludePlugin\",\n\t\t\t\t\t\t\tParserHelpers.evaluateToString(\"function\")\n\t\t\t\t\t\t);\n\t\t\t\t\tparser.hooks.typeof\n\t\t\t\t\t\t.for(\"require.include\")\n\t\t\t\t\t\t.tap(\n\t\t\t\t\t\t\t\"RequireIncludePlugin\",\n\t\t\t\t\t\t\tParserHelpers.toConstantDependency(\n\t\t\t\t\t\t\t\tparser,\n\t\t\t\t\t\t\t\tJSON.stringify(\"function\")\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t};\n\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/auto\")\n\t\t\t\t\t.tap(\"RequireIncludePlugin\", handler);\n\t\t\t\tnormalModuleFactory.hooks.parser\n\t\t\t\t\t.for(\"javascript/dynamic\")\n\t\t\t\t\t.tap(\"RequireIncludePlugin\", handler);\n\t\t\t}\n\t\t);\n\t}\n}\nmodule.exports = RequireIncludePlugin;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAEb,IAAMA,wBAAwB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACtE,IAAMC,oCAAoC,GAAGD,OAAO,CAAC,wCAAwC,CAAC;AAE9F,IAAME,aAAa,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAAC,IAE5CG,oBAAoB;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACzB,eAAMC,QAAQ,EAAE;MACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,sBAAsB,EACtB,UAACD,WAAW,QAA8B;QAAA,IAA1BE,mBAAmB,QAAnBA,mBAAmB;QAClCF,WAAW,CAACG,mBAAmB,CAACC,GAAG,CAClCX,wBAAwB,EACxBS,mBAAmB,CACnB;QACDF,WAAW,CAACK,mBAAmB,CAACD,GAAG,CAClCX,wBAAwB,EACxB,IAAIA,wBAAwB,CAACa,QAAQ,EAAE,CACvC;QAED,IAAMC,OAAO,GAAG,SAAVA,OAAO,CAAIC,MAAM,EAAEC,aAAa,EAAK;UAC1C,IACCA,aAAa,CAACC,cAAc,KAAKC,SAAS,IAC1C,CAACF,aAAa,CAACC,cAAc,EAE7B;UAED,IAAIf,oCAAoC,EAAE,CAACiB,KAAK,CAACJ,MAAM,CAAC;UACxDA,MAAM,CAACT,KAAK,CAACc,cAAc,CACzBC,GAAG,CAAC,iBAAiB,CAAC,CACtBb,GAAG,CACH,sBAAsB,EACtBL,aAAa,CAACmB,gBAAgB,CAAC,UAAU,CAAC,CAC1C;UACFP,MAAM,CAACT,KAAK,CAACiB,MAAM,CACjBF,GAAG,CAAC,iBAAiB,CAAC,CACtBb,GAAG,CACH,sBAAsB,EACtBL,aAAa,CAACqB,oBAAoB,CACjCT,MAAM,EACNU,IAAI,CAACC,SAAS,CAAC,UAAU,CAAC,CAC1B,CACD;QACH,CAAC;QAEDjB,mBAAmB,CAACH,KAAK,CAACS,MAAM,CAC9BM,GAAG,CAAC,iBAAiB,CAAC,CACtBb,GAAG,CAAC,sBAAsB,EAAEM,OAAO,CAAC;QACtCL,mBAAmB,CAACH,KAAK,CAACS,MAAM,CAC9BM,GAAG,CAAC,oBAAoB,CAAC,CACzBb,GAAG,CAAC,sBAAsB,EAAEM,OAAO,CAAC;MACvC,CAAC,CACD;IACF;EAAC;EAAA;AAAA;AAEFa,MAAM,CAACC,OAAO,GAAGxB,oBAAoB"},"metadata":{},"sourceType":"script"}