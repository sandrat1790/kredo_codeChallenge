{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin\").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */\nvar OccurrenceOrderModuleIdsPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object\n   */\n  function OccurrenceOrderModuleIdsPlugin() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, OccurrenceOrderModuleIdsPlugin);\n    validateOptions(schema, options, \"Occurrence Order Module Ids Plugin\");\n    this.options = options;\n  }\n  _createClass(OccurrenceOrderModuleIdsPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var prioritiseInitial = this.options.prioritiseInitial;\n      compiler.hooks.compilation.tap(\"OccurrenceOrderModuleIdsPlugin\", function (compilation) {\n        compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderModuleIdsPlugin\", function (modules) {\n          var occursInInitialChunksMap = new Map();\n          var occursInAllChunksMap = new Map();\n          var initialChunkChunkMap = new Map();\n          var entryCountMap = new Map();\n          var _iterator = _createForOfIteratorHelper(modules),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _m = _step.value;\n              var initial = 0;\n              var entry = 0;\n              var _iterator4 = _createForOfIteratorHelper(_m.chunksIterable),\n                _step4;\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var c = _step4.value;\n                  if (c.canBeInitial()) initial++;\n                  if (c.entryModule === _m) entry++;\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              initialChunkChunkMap.set(_m, initial);\n              entryCountMap.set(_m, entry);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var countOccursInEntry = function countOccursInEntry(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n            var count = initialChunkChunkMap.get(r.module);\n            if (!count) {\n              return sum;\n            }\n            return sum + count;\n          };\n          var countOccurs = function countOccurs(sum, r) {\n            if (!r.module) {\n              return sum;\n            }\n            var factor = 1;\n            if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n              factor = r.dependency.getNumberOfIdOccurrences();\n            }\n            if (factor === 0) {\n              return sum;\n            }\n            return sum + factor * r.module.getNumberOfChunks();\n          };\n          if (prioritiseInitial) {\n            var _iterator2 = _createForOfIteratorHelper(modules),\n              _step2;\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var m = _step2.value;\n                var result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n                occursInInitialChunksMap.set(m, result);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n          var originalOrder = new Map();\n          var i = 0;\n          var _iterator3 = _createForOfIteratorHelper(modules),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _m2 = _step3.value;\n              var _result = _m2.reasons.reduce(countOccurs, 0) + _m2.getNumberOfChunks() + entryCountMap.get(_m2);\n              occursInAllChunksMap.set(_m2, _result);\n              originalOrder.set(_m2, i++);\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          modules.sort(function (a, b) {\n            if (prioritiseInitial) {\n              var aEntryOccurs = occursInInitialChunksMap.get(a);\n              var bEntryOccurs = occursInInitialChunksMap.get(b);\n              if (aEntryOccurs > bEntryOccurs) return -1;\n              if (aEntryOccurs < bEntryOccurs) return 1;\n            }\n            var aOccurs = occursInAllChunksMap.get(a);\n            var bOccurs = occursInAllChunksMap.get(b);\n            if (aOccurs > bOccurs) return -1;\n            if (aOccurs < bOccurs) return 1;\n            var orgA = originalOrder.get(a);\n            var orgB = originalOrder.get(b);\n            return orgA - orgB;\n          });\n        });\n      });\n    }\n  }]);\n  return OccurrenceOrderModuleIdsPlugin;\n}();\nmodule.exports = OccurrenceOrderModuleIdsPlugin;","map":{"version":3,"names":["validateOptions","require","schema","OccurrenceOrderModuleIdsPlugin","options","compiler","prioritiseInitial","hooks","compilation","tap","optimizeModuleOrder","modules","occursInInitialChunksMap","Map","occursInAllChunksMap","initialChunkChunkMap","entryCountMap","m","initial","entry","chunksIterable","c","canBeInitial","entryModule","set","countOccursInEntry","sum","r","module","count","get","countOccurs","factor","dependency","getNumberOfIdOccurrences","getNumberOfChunks","result","reasons","reduce","originalOrder","i","sort","a","b","aEntryOccurs","bEntryOccurs","aOccurs","bOccurs","orgA","orgB","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/optimize/OccurrenceModuleOrderPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderModuleIdsPlugin.json\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderModuleIdsPlugin\").OccurrenceOrderModuleIdsPluginOptions} OccurrenceOrderModuleIdsPluginOptions */\n\nclass OccurrenceOrderModuleIdsPlugin {\n\t/**\n\t * @param {OccurrenceOrderModuleIdsPluginOptions=} options options object\n\t */\n\tconstructor(options = {}) {\n\t\tvalidateOptions(schema, options, \"Occurrence Order Module Ids Plugin\");\n\t\tthis.options = options;\n\t}\n\n\tapply(compiler) {\n\t\tconst prioritiseInitial = this.options.prioritiseInitial;\n\t\tcompiler.hooks.compilation.tap(\n\t\t\t\"OccurrenceOrderModuleIdsPlugin\",\n\t\t\tcompilation => {\n\t\t\t\tcompilation.hooks.optimizeModuleOrder.tap(\n\t\t\t\t\t\"OccurrenceOrderModuleIdsPlugin\",\n\t\t\t\t\tmodules => {\n\t\t\t\t\t\tconst occursInInitialChunksMap = new Map();\n\t\t\t\t\t\tconst occursInAllChunksMap = new Map();\n\n\t\t\t\t\t\tconst initialChunkChunkMap = new Map();\n\t\t\t\t\t\tconst entryCountMap = new Map();\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tlet initial = 0;\n\t\t\t\t\t\t\tlet entry = 0;\n\t\t\t\t\t\t\tfor (const c of m.chunksIterable) {\n\t\t\t\t\t\t\t\tif (c.canBeInitial()) initial++;\n\t\t\t\t\t\t\t\tif (c.entryModule === m) entry++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinitialChunkChunkMap.set(m, initial);\n\t\t\t\t\t\t\tentryCountMap.set(m, entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst countOccursInEntry = (sum, r) => {\n\t\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst count = initialChunkChunkMap.get(r.module);\n\t\t\t\t\t\t\tif (!count) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn sum + count;\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst countOccurs = (sum, r) => {\n\t\t\t\t\t\t\tif (!r.module) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet factor = 1;\n\t\t\t\t\t\t\tif (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n\t\t\t\t\t\t\t\tfactor = r.dependency.getNumberOfIdOccurrences();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (factor === 0) {\n\t\t\t\t\t\t\t\treturn sum;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn sum + factor * r.module.getNumberOfChunks();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\t\tm.reasons.reduce(countOccursInEntry, 0) +\n\t\t\t\t\t\t\t\t\tinitialChunkChunkMap.get(m) +\n\t\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\t\toccursInInitialChunksMap.set(m, result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst originalOrder = new Map();\n\t\t\t\t\t\tlet i = 0;\n\t\t\t\t\t\tfor (const m of modules) {\n\t\t\t\t\t\t\tconst result =\n\t\t\t\t\t\t\t\tm.reasons.reduce(countOccurs, 0) +\n\t\t\t\t\t\t\t\tm.getNumberOfChunks() +\n\t\t\t\t\t\t\t\tentryCountMap.get(m);\n\t\t\t\t\t\t\toccursInAllChunksMap.set(m, result);\n\t\t\t\t\t\t\toriginalOrder.set(m, i++);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodules.sort((a, b) => {\n\t\t\t\t\t\t\tif (prioritiseInitial) {\n\t\t\t\t\t\t\t\tconst aEntryOccurs = occursInInitialChunksMap.get(a);\n\t\t\t\t\t\t\t\tconst bEntryOccurs = occursInInitialChunksMap.get(b);\n\t\t\t\t\t\t\t\tif (aEntryOccurs > bEntryOccurs) return -1;\n\t\t\t\t\t\t\t\tif (aEntryOccurs < bEntryOccurs) return 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst aOccurs = occursInAllChunksMap.get(a);\n\t\t\t\t\t\t\tconst bOccurs = occursInAllChunksMap.get(b);\n\t\t\t\t\t\t\tif (aOccurs > bOccurs) return -1;\n\t\t\t\t\t\t\tif (aOccurs < bOccurs) return 1;\n\t\t\t\t\t\t\tconst orgA = originalOrder.get(a);\n\t\t\t\t\t\t\tconst orgB = originalOrder.get(b);\n\t\t\t\t\t\t\treturn orgA - orgB;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t}\n}\n\nmodule.exports = OccurrenceOrderModuleIdsPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}