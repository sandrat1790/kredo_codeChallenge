{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _require = require(\"webpack-sources\"),\n  ConcatSource = _require.ConcatSource;\nvar ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nvar Template = require(\"./Template\");\nvar validateOptions = require(\"schema-utils\");\nvar schema = require(\"../schemas/plugins/BannerPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\nvar wrapComment = function wrapComment(str) {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \"), \"\\n */\");\n};\nvar BannerPlugin = /*#__PURE__*/function () {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  function BannerPlugin(options) {\n    _classCallCheck(this, BannerPlugin);\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n    validateOptions(schema, options, \"Banner Plugin\");\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n\n    /** @type {BannerPluginOptions} */\n    this.options = options;\n    var bannerOption = options.banner;\n    if (typeof bannerOption === \"function\") {\n      var getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : function (data) {\n        return wrapComment(getBanner(data));\n      };\n    } else {\n      var banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n      this.banner = function () {\n        return banner;\n      };\n    }\n  }\n  _createClass(BannerPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      var options = this.options;\n      var banner = this.banner;\n      var matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n      compiler.hooks.compilation.tap(\"BannerPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", function (chunks) {\n          var _iterator = _createForOfIteratorHelper(chunks),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var chunk = _step.value;\n              if (options.entryOnly && !chunk.canBeInitial()) {\n                continue;\n              }\n              var _iterator2 = _createForOfIteratorHelper(chunk.files),\n                _step2;\n              try {\n                var _loop = function _loop() {\n                  var file = _step2.value;\n                  if (!matchObject(file)) {\n                    return \"continue\";\n                  }\n                  var query = \"\";\n                  var filename = file;\n                  var hash = compilation.hash;\n                  var querySplit = filename.indexOf(\"?\");\n                  if (querySplit >= 0) {\n                    query = filename.substr(querySplit);\n                    filename = filename.substr(0, querySplit);\n                  }\n                  var lastSlashIndex = filename.lastIndexOf(\"/\");\n                  var basename = lastSlashIndex === -1 ? filename : filename.substr(lastSlashIndex + 1);\n                  var data = {\n                    hash: hash,\n                    chunk: chunk,\n                    filename: filename,\n                    basename: basename,\n                    query: query\n                  };\n                  var comment = compilation.getPath(banner(data), data);\n                  compilation.updateAsset(file, function (old) {\n                    return new ConcatSource(comment, \"\\n\", old);\n                  });\n                };\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var _ret = _loop();\n                  if (_ret === \"continue\") continue;\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      });\n    }\n  }]);\n  return BannerPlugin;\n}();\nmodule.exports = BannerPlugin;","map":{"version":3,"names":["require","ConcatSource","ModuleFilenameHelpers","Template","validateOptions","schema","wrapComment","str","includes","toComment","replace","split","join","BannerPlugin","options","arguments","length","Error","banner","bannerOption","getBanner","raw","data","compiler","matchObject","bind","undefined","hooks","compilation","tap","optimizeChunkAssets","chunks","chunk","entryOnly","canBeInitial","files","file","query","filename","hash","querySplit","indexOf","substr","lastSlashIndex","lastIndexOf","basename","comment","getPath","updateAsset","old","module","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/BannerPlugin.js"],"sourcesContent":["/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\n\"use strict\";\n\nconst { ConcatSource } = require(\"webpack-sources\");\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\nconst Template = require(\"./Template\");\n\nconst validateOptions = require(\"schema-utils\");\nconst schema = require(\"../schemas/plugins/BannerPlugin.json\");\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\nconst wrapComment = str => {\n\tif (!str.includes(\"\\n\")) {\n\t\treturn Template.toComment(str);\n\t}\n\treturn `/*!\\n * ${str\n\t\t.replace(/\\*\\//g, \"* /\")\n\t\t.split(\"\\n\")\n\t\t.join(\"\\n * \")}\\n */`;\n};\n\nclass BannerPlugin {\n\t/**\n\t * @param {BannerPluginArgument} options options object\n\t */\n\tconstructor(options) {\n\t\tif (arguments.length > 1) {\n\t\t\tthrow new Error(\n\t\t\t\t\"BannerPlugin only takes one argument (pass an options object)\"\n\t\t\t);\n\t\t}\n\n\t\tvalidateOptions(schema, options, \"Banner Plugin\");\n\n\t\tif (typeof options === \"string\" || typeof options === \"function\") {\n\t\t\toptions = {\n\t\t\t\tbanner: options\n\t\t\t};\n\t\t}\n\n\t\t/** @type {BannerPluginOptions} */\n\t\tthis.options = options;\n\n\t\tconst bannerOption = options.banner;\n\t\tif (typeof bannerOption === \"function\") {\n\t\t\tconst getBanner = bannerOption;\n\t\t\tthis.banner = this.options.raw\n\t\t\t\t? getBanner\n\t\t\t\t: data => wrapComment(getBanner(data));\n\t\t} else {\n\t\t\tconst banner = this.options.raw\n\t\t\t\t? bannerOption\n\t\t\t\t: wrapComment(bannerOption);\n\t\t\tthis.banner = () => banner;\n\t\t}\n\t}\n\n\tapply(compiler) {\n\t\tconst options = this.options;\n\t\tconst banner = this.banner;\n\t\tconst matchObject = ModuleFilenameHelpers.matchObject.bind(\n\t\t\tundefined,\n\t\t\toptions\n\t\t);\n\n\t\tcompiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", chunks => {\n\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\tif (options.entryOnly && !chunk.canBeInitial()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const file of chunk.files) {\n\t\t\t\t\t\tif (!matchObject(file)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet query = \"\";\n\t\t\t\t\t\tlet filename = file;\n\t\t\t\t\t\tconst hash = compilation.hash;\n\t\t\t\t\t\tconst querySplit = filename.indexOf(\"?\");\n\n\t\t\t\t\t\tif (querySplit >= 0) {\n\t\t\t\t\t\t\tquery = filename.substr(querySplit);\n\t\t\t\t\t\t\tfilename = filename.substr(0, querySplit);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst lastSlashIndex = filename.lastIndexOf(\"/\");\n\n\t\t\t\t\t\tconst basename =\n\t\t\t\t\t\t\tlastSlashIndex === -1\n\t\t\t\t\t\t\t\t? filename\n\t\t\t\t\t\t\t\t: filename.substr(lastSlashIndex + 1);\n\n\t\t\t\t\t\tconst data = {\n\t\t\t\t\t\t\thash,\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\tbasename,\n\t\t\t\t\t\t\tquery\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst comment = compilation.getPath(banner(data), data);\n\n\t\t\t\t\t\tcompilation.updateAsset(\n\t\t\t\t\t\t\tfile,\n\t\t\t\t\t\t\told => new ConcatSource(comment, \"\\n\", old)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nmodule.exports = BannerPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}