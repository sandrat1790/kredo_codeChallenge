{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar FlagIncludedChunksPlugin = /*#__PURE__*/function () {\n  function FlagIncludedChunksPlugin() {\n    _classCallCheck(this, FlagIncludedChunksPlugin);\n  }\n  _createClass(FlagIncludedChunksPlugin, [{\n    key: \"apply\",\n    value: function apply(compiler) {\n      compiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", function (compilation) {\n        compilation.hooks.optimizeChunkIds.tap(\"FlagIncludedChunksPlugin\", function (chunks) {\n          // prepare two bit integers for each module\n          // 2^31 is the max number represented as SMI in v8\n          // we want the bits distributed this way:\n          // the bit 2^31 is pretty rar and only one module should get it\n          // so it has a probability of 1 / modulesCount\n          // the first bit (2^0) is the easiest and every module could get it\n          // if it doesn't get a better bit\n          // from bit 2^n to 2^(n+1) there is a probability of p\n          // so 1 / modulesCount == p^31\n          // <=> p = sqrt31(1 / modulesCount)\n          // so we use a modulo of 1 / sqrt31(1 / modulesCount)\n          var moduleBits = new WeakMap();\n          var modulesCount = compilation.modules.length;\n\n          // precalculate the modulo values for each bit\n          var modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n          var modulos = Array.from({\n            length: 31\n          }, function (x, i) {\n            return Math.pow(modulo, i) | 0;\n          });\n\n          // iterate all modules to generate bit values\n          var i = 0;\n          var _iterator = _createForOfIteratorHelper(compilation.modules),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _module = _step.value;\n              var bit = 30;\n              while (i % modulos[bit] !== 0) {\n                bit--;\n              }\n              moduleBits.set(_module, 1 << bit);\n              i++;\n            }\n\n            // interate all chunks to generate bitmaps\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          var chunkModulesHash = new WeakMap();\n          var _iterator2 = _createForOfIteratorHelper(chunks),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var chunk = _step2.value;\n              var hash = 0;\n              var _iterator4 = _createForOfIteratorHelper(chunk.modulesIterable),\n                _step4;\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  var _module2 = _step4.value;\n                  hash |= moduleBits.get(_module2);\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              chunkModulesHash.set(chunk, hash);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          var _iterator3 = _createForOfIteratorHelper(chunks),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var chunkA = _step3.value;\n              var chunkAHash = chunkModulesHash.get(chunkA);\n              var chunkAModulesCount = chunkA.getNumberOfModules();\n              if (chunkAModulesCount === 0) continue;\n              var bestModule = undefined;\n              var _iterator5 = _createForOfIteratorHelper(chunkA.modulesIterable),\n                _step5;\n              try {\n                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                  var _module3 = _step5.value;\n                  if (bestModule === undefined || bestModule.getNumberOfChunks() > _module3.getNumberOfChunks()) bestModule = _module3;\n                }\n              } catch (err) {\n                _iterator5.e(err);\n              } finally {\n                _iterator5.f();\n              }\n              var _iterator6 = _createForOfIteratorHelper(bestModule.chunksIterable),\n                _step6;\n              try {\n                loopB: for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  var chunkB = _step6.value;\n                  // as we iterate the same iterables twice\n                  // skip if we find ourselves\n                  if (chunkA === chunkB) continue;\n                  var chunkBModulesCount = chunkB.getNumberOfModules();\n\n                  // ids for empty chunks are not included\n                  if (chunkBModulesCount === 0) continue;\n\n                  // instead of swapping A and B just bail\n                  // as we loop twice the current A will be B and B then A\n                  if (chunkAModulesCount > chunkBModulesCount) continue;\n\n                  // is chunkA in chunkB?\n\n                  // we do a cheap check for the hash value\n                  var chunkBHash = chunkModulesHash.get(chunkB);\n                  if ((chunkBHash & chunkAHash) !== chunkAHash) continue;\n\n                  // compare all modules\n                  var _iterator7 = _createForOfIteratorHelper(chunkA.modulesIterable),\n                    _step7;\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      var m = _step7.value;\n                      if (!chunkB.containsModule(m)) continue loopB;\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n                  chunkB.ids.push(chunkA.id);\n                }\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        });\n      });\n    }\n  }]);\n  return FlagIncludedChunksPlugin;\n}();\nmodule.exports = FlagIncludedChunksPlugin;","map":{"version":3,"names":["FlagIncludedChunksPlugin","compiler","hooks","compilation","tap","optimizeChunkIds","chunks","moduleBits","WeakMap","modulesCount","modules","length","modulo","Math","pow","modulos","Array","from","x","i","module","bit","set","chunkModulesHash","chunk","hash","modulesIterable","get","chunkA","chunkAHash","chunkAModulesCount","getNumberOfModules","bestModule","undefined","getNumberOfChunks","chunksIterable","loopB","chunkB","chunkBModulesCount","chunkBHash","m","containsModule","ids","push","id","exports"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/optimize/FlagIncludedChunksPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass FlagIncludedChunksPlugin {\n\tapply(compiler) {\n\t\tcompiler.hooks.compilation.tap(\"FlagIncludedChunksPlugin\", compilation => {\n\t\t\tcompilation.hooks.optimizeChunkIds.tap(\n\t\t\t\t\"FlagIncludedChunksPlugin\",\n\t\t\t\tchunks => {\n\t\t\t\t\t// prepare two bit integers for each module\n\t\t\t\t\t// 2^31 is the max number represented as SMI in v8\n\t\t\t\t\t// we want the bits distributed this way:\n\t\t\t\t\t// the bit 2^31 is pretty rar and only one module should get it\n\t\t\t\t\t// so it has a probability of 1 / modulesCount\n\t\t\t\t\t// the first bit (2^0) is the easiest and every module could get it\n\t\t\t\t\t// if it doesn't get a better bit\n\t\t\t\t\t// from bit 2^n to 2^(n+1) there is a probability of p\n\t\t\t\t\t// so 1 / modulesCount == p^31\n\t\t\t\t\t// <=> p = sqrt31(1 / modulesCount)\n\t\t\t\t\t// so we use a modulo of 1 / sqrt31(1 / modulesCount)\n\t\t\t\t\tconst moduleBits = new WeakMap();\n\t\t\t\t\tconst modulesCount = compilation.modules.length;\n\n\t\t\t\t\t// precalculate the modulo values for each bit\n\t\t\t\t\tconst modulo = 1 / Math.pow(1 / modulesCount, 1 / 31);\n\t\t\t\t\tconst modulos = Array.from(\n\t\t\t\t\t\t{ length: 31 },\n\t\t\t\t\t\t(x, i) => Math.pow(modulo, i) | 0\n\t\t\t\t\t);\n\n\t\t\t\t\t// iterate all modules to generate bit values\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const module of compilation.modules) {\n\t\t\t\t\t\tlet bit = 30;\n\t\t\t\t\t\twhile (i % modulos[bit] !== 0) {\n\t\t\t\t\t\t\tbit--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmoduleBits.set(module, 1 << bit);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t\t// interate all chunks to generate bitmaps\n\t\t\t\t\tconst chunkModulesHash = new WeakMap();\n\t\t\t\t\tfor (const chunk of chunks) {\n\t\t\t\t\t\tlet hash = 0;\n\t\t\t\t\t\tfor (const module of chunk.modulesIterable) {\n\t\t\t\t\t\t\thash |= moduleBits.get(module);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchunkModulesHash.set(chunk, hash);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const chunkA of chunks) {\n\t\t\t\t\t\tconst chunkAHash = chunkModulesHash.get(chunkA);\n\t\t\t\t\t\tconst chunkAModulesCount = chunkA.getNumberOfModules();\n\t\t\t\t\t\tif (chunkAModulesCount === 0) continue;\n\t\t\t\t\t\tlet bestModule = undefined;\n\t\t\t\t\t\tfor (const module of chunkA.modulesIterable) {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tbestModule === undefined ||\n\t\t\t\t\t\t\t\tbestModule.getNumberOfChunks() > module.getNumberOfChunks()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\tbestModule = module;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tloopB: for (const chunkB of bestModule.chunksIterable) {\n\t\t\t\t\t\t\t// as we iterate the same iterables twice\n\t\t\t\t\t\t\t// skip if we find ourselves\n\t\t\t\t\t\t\tif (chunkA === chunkB) continue;\n\n\t\t\t\t\t\t\tconst chunkBModulesCount = chunkB.getNumberOfModules();\n\n\t\t\t\t\t\t\t// ids for empty chunks are not included\n\t\t\t\t\t\t\tif (chunkBModulesCount === 0) continue;\n\n\t\t\t\t\t\t\t// instead of swapping A and B just bail\n\t\t\t\t\t\t\t// as we loop twice the current A will be B and B then A\n\t\t\t\t\t\t\tif (chunkAModulesCount > chunkBModulesCount) continue;\n\n\t\t\t\t\t\t\t// is chunkA in chunkB?\n\n\t\t\t\t\t\t\t// we do a cheap check for the hash value\n\t\t\t\t\t\t\tconst chunkBHash = chunkModulesHash.get(chunkB);\n\t\t\t\t\t\t\tif ((chunkBHash & chunkAHash) !== chunkAHash) continue;\n\n\t\t\t\t\t\t\t// compare all modules\n\t\t\t\t\t\t\tfor (const m of chunkA.modulesIterable) {\n\t\t\t\t\t\t\t\tif (!chunkB.containsModule(m)) continue loopB;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tchunkB.ids.push(chunkA.id);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n}\nmodule.exports = FlagIncludedChunksPlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}