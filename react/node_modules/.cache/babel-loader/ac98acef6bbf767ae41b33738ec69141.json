{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _classCallCheck = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/myCodes/KredoCodeChallenge/react/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\nvar RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\nvar getFunctionExpression = require(\"./getFunctionExpression\");\nmodule.exports = /*#__PURE__*/function () {\n  function RequireEnsureDependenciesBlockParserPlugin() {\n    _classCallCheck(this, RequireEnsureDependenciesBlockParserPlugin);\n  }\n  _createClass(RequireEnsureDependenciesBlockParserPlugin, [{\n    key: \"apply\",\n    value: function apply(parser) {\n      parser.hooks.call.for(\"require.ensure\").tap(\"RequireEnsureDependenciesBlockParserPlugin\", function (expr) {\n        var chunkName = null;\n        var chunkNameRange = null;\n        var errorExpressionArg = null;\n        var errorExpression = null;\n        switch (expr.arguments.length) {\n          case 4:\n            {\n              var chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n              if (!chunkNameExpr.isString()) return;\n              chunkNameRange = chunkNameExpr.range;\n              chunkName = chunkNameExpr.string;\n            }\n          // falls through\n          case 3:\n            {\n              errorExpressionArg = expr.arguments[2];\n              errorExpression = getFunctionExpression(errorExpressionArg);\n              if (!errorExpression && !chunkName) {\n                var _chunkNameExpr = parser.evaluateExpression(expr.arguments[2]);\n                if (!_chunkNameExpr.isString()) return;\n                chunkNameRange = _chunkNameExpr.range;\n                chunkName = _chunkNameExpr.string;\n              }\n            }\n          // falls through\n          case 2:\n            {\n              var dependenciesExpr = parser.evaluateExpression(expr.arguments[0]);\n              var dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];\n              var successExpressionArg = expr.arguments[1];\n              var successExpression = getFunctionExpression(successExpressionArg);\n              if (successExpression) {\n                parser.walkExpressions(successExpression.expressions);\n              }\n              if (errorExpression) {\n                parser.walkExpressions(errorExpression.expressions);\n              }\n              var dep = new RequireEnsureDependenciesBlock(expr, successExpression ? successExpression.fn : successExpressionArg, errorExpression ? errorExpression.fn : errorExpressionArg, chunkName, chunkNameRange, parser.state.module, expr.loc);\n              var old = parser.state.current;\n              parser.state.current = dep;\n              try {\n                var failed = false;\n                parser.inScope([], function () {\n                  var _iterator = _createForOfIteratorHelper(dependenciesItems),\n                    _step;\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var ee = _step.value;\n                      if (ee.isString()) {\n                        var edep = new RequireEnsureItemDependency(ee.string);\n                        edep.loc = dep.loc;\n                        dep.addDependency(edep);\n                      } else {\n                        failed = true;\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                });\n                if (failed) {\n                  return;\n                }\n                if (successExpression) {\n                  if (successExpression.fn.body.type === \"BlockStatement\") {\n                    parser.walkStatement(successExpression.fn.body);\n                  } else {\n                    parser.walkExpression(successExpression.fn.body);\n                  }\n                }\n                old.addBlock(dep);\n              } finally {\n                parser.state.current = old;\n              }\n              if (!successExpression) {\n                parser.walkExpression(successExpressionArg);\n              }\n              if (errorExpression) {\n                if (errorExpression.fn.body.type === \"BlockStatement\") {\n                  parser.walkStatement(errorExpression.fn.body);\n                } else {\n                  parser.walkExpression(errorExpression.fn.body);\n                }\n              } else if (errorExpressionArg) {\n                parser.walkExpression(errorExpressionArg);\n              }\n              return true;\n            }\n        }\n      });\n    }\n  }]);\n  return RequireEnsureDependenciesBlockParserPlugin;\n}();","map":{"version":3,"names":["RequireEnsureDependenciesBlock","require","RequireEnsureItemDependency","getFunctionExpression","module","exports","parser","hooks","call","for","tap","expr","chunkName","chunkNameRange","errorExpressionArg","errorExpression","arguments","length","chunkNameExpr","evaluateExpression","isString","range","string","dependenciesExpr","dependenciesItems","isArray","items","successExpressionArg","successExpression","walkExpressions","expressions","dep","fn","state","loc","old","current","failed","inScope","ee","edep","addDependency","body","type","walkStatement","walkExpression","addBlock"],"sources":["C:/myCodes/KredoCodeChallenge/react/node_modules/webpack/lib/dependencies/RequireEnsureDependenciesBlockParserPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\nconst RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\nconst getFunctionExpression = require(\"./getFunctionExpression\");\n\nmodule.exports = class RequireEnsureDependenciesBlockParserPlugin {\n\tapply(parser) {\n\t\tparser.hooks.call\n\t\t\t.for(\"require.ensure\")\n\t\t\t.tap(\"RequireEnsureDependenciesBlockParserPlugin\", expr => {\n\t\t\t\tlet chunkName = null;\n\t\t\t\tlet chunkNameRange = null;\n\t\t\t\tlet errorExpressionArg = null;\n\t\t\t\tlet errorExpression = null;\n\t\t\t\tswitch (expr.arguments.length) {\n\t\t\t\t\tcase 4: {\n\t\t\t\t\t\tconst chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n\t\t\t\t\t\tif (!chunkNameExpr.isString()) return;\n\t\t\t\t\t\tchunkNameRange = chunkNameExpr.range;\n\t\t\t\t\t\tchunkName = chunkNameExpr.string;\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 3: {\n\t\t\t\t\t\terrorExpressionArg = expr.arguments[2];\n\t\t\t\t\t\terrorExpression = getFunctionExpression(errorExpressionArg);\n\n\t\t\t\t\t\tif (!errorExpression && !chunkName) {\n\t\t\t\t\t\t\tconst chunkNameExpr = parser.evaluateExpression(\n\t\t\t\t\t\t\t\texpr.arguments[2]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (!chunkNameExpr.isString()) return;\n\t\t\t\t\t\t\tchunkNameRange = chunkNameExpr.range;\n\t\t\t\t\t\t\tchunkName = chunkNameExpr.string;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// falls through\n\t\t\t\t\tcase 2: {\n\t\t\t\t\t\tconst dependenciesExpr = parser.evaluateExpression(\n\t\t\t\t\t\t\texpr.arguments[0]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst dependenciesItems = dependenciesExpr.isArray()\n\t\t\t\t\t\t\t? dependenciesExpr.items\n\t\t\t\t\t\t\t: [dependenciesExpr];\n\t\t\t\t\t\tconst successExpressionArg = expr.arguments[1];\n\t\t\t\t\t\tconst successExpression = getFunctionExpression(\n\t\t\t\t\t\t\tsuccessExpressionArg\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (successExpression) {\n\t\t\t\t\t\t\tparser.walkExpressions(successExpression.expressions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errorExpression) {\n\t\t\t\t\t\t\tparser.walkExpressions(errorExpression.expressions);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst dep = new RequireEnsureDependenciesBlock(\n\t\t\t\t\t\t\texpr,\n\t\t\t\t\t\t\tsuccessExpression ? successExpression.fn : successExpressionArg,\n\t\t\t\t\t\t\terrorExpression ? errorExpression.fn : errorExpressionArg,\n\t\t\t\t\t\t\tchunkName,\n\t\t\t\t\t\t\tchunkNameRange,\n\t\t\t\t\t\t\tparser.state.module,\n\t\t\t\t\t\t\texpr.loc\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst old = parser.state.current;\n\t\t\t\t\t\tparser.state.current = dep;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlet failed = false;\n\t\t\t\t\t\t\tparser.inScope([], () => {\n\t\t\t\t\t\t\t\tfor (const ee of dependenciesItems) {\n\t\t\t\t\t\t\t\t\tif (ee.isString()) {\n\t\t\t\t\t\t\t\t\t\tconst edep = new RequireEnsureItemDependency(ee.string);\n\t\t\t\t\t\t\t\t\t\tedep.loc = dep.loc;\n\t\t\t\t\t\t\t\t\t\tdep.addDependency(edep);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfailed = true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (failed) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (successExpression) {\n\t\t\t\t\t\t\t\tif (successExpression.fn.body.type === \"BlockStatement\") {\n\t\t\t\t\t\t\t\t\tparser.walkStatement(successExpression.fn.body);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tparser.walkExpression(successExpression.fn.body);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\told.addBlock(dep);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tparser.state.current = old;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!successExpression) {\n\t\t\t\t\t\t\tparser.walkExpression(successExpressionArg);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (errorExpression) {\n\t\t\t\t\t\t\tif (errorExpression.fn.body.type === \"BlockStatement\") {\n\t\t\t\t\t\t\t\tparser.walkStatement(errorExpression.fn.body);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparser.walkExpression(errorExpression.fn.body);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (errorExpressionArg) {\n\t\t\t\t\t\t\tparser.walkExpression(errorExpressionArg);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAEb,IAAMA,8BAA8B,GAAGC,OAAO,CAAC,kCAAkC,CAAC;AAClF,IAAMC,2BAA2B,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAC5E,IAAME,qBAAqB,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAEhEG,MAAM,CAACC,OAAO;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACb,eAAMC,MAAM,EAAE;MACbA,MAAM,CAACC,KAAK,CAACC,IAAI,CACfC,GAAG,CAAC,gBAAgB,CAAC,CACrBC,GAAG,CAAC,4CAA4C,EAAE,UAAAC,IAAI,EAAI;QAC1D,IAAIC,SAAS,GAAG,IAAI;QACpB,IAAIC,cAAc,GAAG,IAAI;QACzB,IAAIC,kBAAkB,GAAG,IAAI;QAC7B,IAAIC,eAAe,GAAG,IAAI;QAC1B,QAAQJ,IAAI,CAACK,SAAS,CAACC,MAAM;UAC5B,KAAK,CAAC;YAAE;cACP,IAAMC,aAAa,GAAGZ,MAAM,CAACa,kBAAkB,CAACR,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC,CAAC;cAClE,IAAI,CAACE,aAAa,CAACE,QAAQ,EAAE,EAAE;cAC/BP,cAAc,GAAGK,aAAa,CAACG,KAAK;cACpCT,SAAS,GAAGM,aAAa,CAACI,MAAM;YACjC;UACA;UACA,KAAK,CAAC;YAAE;cACPR,kBAAkB,GAAGH,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC;cACtCD,eAAe,GAAGZ,qBAAqB,CAACW,kBAAkB,CAAC;cAE3D,IAAI,CAACC,eAAe,IAAI,CAACH,SAAS,EAAE;gBACnC,IAAMM,cAAa,GAAGZ,MAAM,CAACa,kBAAkB,CAC9CR,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC,CACjB;gBACD,IAAI,CAACE,cAAa,CAACE,QAAQ,EAAE,EAAE;gBAC/BP,cAAc,GAAGK,cAAa,CAACG,KAAK;gBACpCT,SAAS,GAAGM,cAAa,CAACI,MAAM;cACjC;YACD;UACA;UACA,KAAK,CAAC;YAAE;cACP,IAAMC,gBAAgB,GAAGjB,MAAM,CAACa,kBAAkB,CACjDR,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC,CACjB;cACD,IAAMQ,iBAAiB,GAAGD,gBAAgB,CAACE,OAAO,EAAE,GACjDF,gBAAgB,CAACG,KAAK,GACtB,CAACH,gBAAgB,CAAC;cACrB,IAAMI,oBAAoB,GAAGhB,IAAI,CAACK,SAAS,CAAC,CAAC,CAAC;cAC9C,IAAMY,iBAAiB,GAAGzB,qBAAqB,CAC9CwB,oBAAoB,CACpB;cAED,IAAIC,iBAAiB,EAAE;gBACtBtB,MAAM,CAACuB,eAAe,CAACD,iBAAiB,CAACE,WAAW,CAAC;cACtD;cACA,IAAIf,eAAe,EAAE;gBACpBT,MAAM,CAACuB,eAAe,CAACd,eAAe,CAACe,WAAW,CAAC;cACpD;cAEA,IAAMC,GAAG,GAAG,IAAI/B,8BAA8B,CAC7CW,IAAI,EACJiB,iBAAiB,GAAGA,iBAAiB,CAACI,EAAE,GAAGL,oBAAoB,EAC/DZ,eAAe,GAAGA,eAAe,CAACiB,EAAE,GAAGlB,kBAAkB,EACzDF,SAAS,EACTC,cAAc,EACdP,MAAM,CAAC2B,KAAK,CAAC7B,MAAM,EACnBO,IAAI,CAACuB,GAAG,CACR;cACD,IAAMC,GAAG,GAAG7B,MAAM,CAAC2B,KAAK,CAACG,OAAO;cAChC9B,MAAM,CAAC2B,KAAK,CAACG,OAAO,GAAGL,GAAG;cAC1B,IAAI;gBACH,IAAIM,MAAM,GAAG,KAAK;gBAClB/B,MAAM,CAACgC,OAAO,CAAC,EAAE,EAAE,YAAM;kBAAA,2CACPd,iBAAiB;oBAAA;kBAAA;oBAAlC,oDAAoC;sBAAA,IAAzBe,EAAE;sBACZ,IAAIA,EAAE,CAACnB,QAAQ,EAAE,EAAE;wBAClB,IAAMoB,IAAI,GAAG,IAAItC,2BAA2B,CAACqC,EAAE,CAACjB,MAAM,CAAC;wBACvDkB,IAAI,CAACN,GAAG,GAAGH,GAAG,CAACG,GAAG;wBAClBH,GAAG,CAACU,aAAa,CAACD,IAAI,CAAC;sBACxB,CAAC,MAAM;wBACNH,MAAM,GAAG,IAAI;sBACd;oBACD;kBAAC;oBAAA;kBAAA;oBAAA;kBAAA;gBACF,CAAC,CAAC;gBACF,IAAIA,MAAM,EAAE;kBACX;gBACD;gBACA,IAAIT,iBAAiB,EAAE;kBACtB,IAAIA,iBAAiB,CAACI,EAAE,CAACU,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;oBACxDrC,MAAM,CAACsC,aAAa,CAAChB,iBAAiB,CAACI,EAAE,CAACU,IAAI,CAAC;kBAChD,CAAC,MAAM;oBACNpC,MAAM,CAACuC,cAAc,CAACjB,iBAAiB,CAACI,EAAE,CAACU,IAAI,CAAC;kBACjD;gBACD;gBACAP,GAAG,CAACW,QAAQ,CAACf,GAAG,CAAC;cAClB,CAAC,SAAS;gBACTzB,MAAM,CAAC2B,KAAK,CAACG,OAAO,GAAGD,GAAG;cAC3B;cACA,IAAI,CAACP,iBAAiB,EAAE;gBACvBtB,MAAM,CAACuC,cAAc,CAAClB,oBAAoB,CAAC;cAC5C;cACA,IAAIZ,eAAe,EAAE;gBACpB,IAAIA,eAAe,CAACiB,EAAE,CAACU,IAAI,CAACC,IAAI,KAAK,gBAAgB,EAAE;kBACtDrC,MAAM,CAACsC,aAAa,CAAC7B,eAAe,CAACiB,EAAE,CAACU,IAAI,CAAC;gBAC9C,CAAC,MAAM;kBACNpC,MAAM,CAACuC,cAAc,CAAC9B,eAAe,CAACiB,EAAE,CAACU,IAAI,CAAC;gBAC/C;cACD,CAAC,MAAM,IAAI5B,kBAAkB,EAAE;gBAC9BR,MAAM,CAACuC,cAAc,CAAC/B,kBAAkB,CAAC;cAC1C;cACA,OAAO,IAAI;YACZ;QAAC;MAEH,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA,GACD"},"metadata":{},"sourceType":"script"}